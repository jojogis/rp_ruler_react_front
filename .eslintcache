[{"C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\index.js":"1","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\App.js":"2","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\reportWebVitals.js":"3","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\Auth.js":"4","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\Copyright.js":"5","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\Reg.js":"6","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\Chat.js":"7","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\MainMenu.js":"8","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\AppContext.js":"9","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\RoomsList.js":"10","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\ServerName.js":"11","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\RoomAppBar.js":"12","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\Messages.js":"13","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\InputReplyMessage.js":"14","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\ProfileDialog.js":"15","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\UsersList.js":"16","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\FormDialog.js":"17","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\ServersDialog.js":"18","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\ServerCard.js":"19","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\UserPopover.js":"20","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\Emoji.js":"21","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\Restore.js":"22","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\AddServerDialog.js":"23","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\DialogTitleWithClose.js":"24","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\AddRoomDialog.js":"25","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\StyledBadge.js":"26","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\AddCategoryDialog.js":"27","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\Utils.js":"28","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\Api.js":"29","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\AddCharacterDialog.js":"30","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\CharactersListDialog.js":"31"},{"size":503,"mtime":1616679610000,"results":"32","hashOfConfig":"33"},{"size":6747,"mtime":1620238760707,"results":"34","hashOfConfig":"33"},{"size":362,"mtime":1616679610000,"results":"35","hashOfConfig":"33"},{"size":4735,"mtime":1620051239318,"results":"36","hashOfConfig":"33"},{"size":405,"mtime":1616679610000,"results":"37","hashOfConfig":"33"},{"size":6624,"mtime":1620051464256,"results":"38","hashOfConfig":"33"},{"size":18931,"mtime":1621352366524,"results":"39","hashOfConfig":"33"},{"size":3435,"mtime":1620230367740,"results":"40","hashOfConfig":"33"},{"size":302,"mtime":1619619001217,"results":"41","hashOfConfig":"33"},{"size":13820,"mtime":1621168968516,"results":"42","hashOfConfig":"33"},{"size":9793,"mtime":1621352012895,"results":"43","hashOfConfig":"33"},{"size":2717,"mtime":1619275162702,"results":"44","hashOfConfig":"33"},{"size":7524,"mtime":1621190194818,"results":"45","hashOfConfig":"33"},{"size":1358,"mtime":1616679610000,"results":"46","hashOfConfig":"33"},{"size":11611,"mtime":1620229616101,"results":"47","hashOfConfig":"33"},{"size":3388,"mtime":1620167939684,"results":"48","hashOfConfig":"33"},{"size":1754,"mtime":1616679610000,"results":"49","hashOfConfig":"33"},{"size":6339,"mtime":1620047445814,"results":"50","hashOfConfig":"33"},{"size":2766,"mtime":1620230340056,"results":"51","hashOfConfig":"33"},{"size":4162,"mtime":1620168143105,"results":"52","hashOfConfig":"33"},{"size":3150,"mtime":1619529624890,"results":"53","hashOfConfig":"33"},{"size":12174,"mtime":1619457167335,"results":"54","hashOfConfig":"33"},{"size":38013,"mtime":1621360289216,"results":"55","hashOfConfig":"33"},{"size":1077,"mtime":1617101286000,"results":"56","hashOfConfig":"33"},{"size":6783,"mtime":1620230657627,"results":"57","hashOfConfig":"33"},{"size":826,"mtime":1616679610000,"results":"58","hashOfConfig":"33"},{"size":3200,"mtime":1620311702146,"results":"59","hashOfConfig":"33"},{"size":1160,"mtime":1621355166134,"results":"60","hashOfConfig":"33"},{"size":17222,"mtime":1621358538299,"results":"61","hashOfConfig":"33"},{"size":8360,"mtime":1621353561548,"results":"62","hashOfConfig":"33"},{"size":4667,"mtime":1621356993278,"results":"63","hashOfConfig":"33"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},"kco36v",{"filePath":"67","messages":"68","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"66"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"66"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"66"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"82","messages":"83","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"66"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"66"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"66"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"66"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"66"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"66"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"66"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"66"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"66"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"66"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"66"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"135","messages":"136","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"137","messages":"138","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"139","messages":"140","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\index.js",[],["141","142"],"C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\App.js",["143","144","145","146"],"import Cookies from 'universal-cookie';\nimport './App.css';\nimport * as React from \"react\";\nimport Auth from \"./Auth\";\nimport Reg from \"./Reg\";\nimport Chat from \"./Chat\";\nimport {createMuiTheme, Snackbar} from \"@material-ui/core\";\nimport {ThemeProvider} from \"@material-ui/core\";\nimport {Route, Switch, Redirect} from \"react-router\";\nimport {BrowserRouter as Router} from \"react-router-dom\";\nimport TokenContext from \"./AppContext\";\nimport Restore from \"./Restore\";\nimport ParticlesBg from \"particles-bg\";\nimport {Alert} from \"@material-ui/lab\";\nimport Api from \"./Api\";\n\n\n\nexport class App extends React.Component{\n\n    constructor(props) {\n        super(props);\n        let darkTheme = createMuiTheme({\n            palette: {\n                type: 'dark',\n                primary: {\n                    main: \"#ff5722\",\n                },\n                secondary: {\n                    main: \"#ff5722\",\n                },\n            },\n        });\n        let lightTheme = createMuiTheme({\n            palette: {\n                type: 'light',\n                primary: {\n                    main: \"#ff5722\",\n                },\n                secondary: {\n                    main: \"#ff5722\",\n                },\n            },\n        });\n\n        const token = localStorage.token;\n        const user_id = localStorage.user_id;\n        const user_type = localStorage.user_type;\n        const isDarkTheme = localStorage.is_dark_theme == \"1\";\n        const isAnimationEnable = localStorage.is_animation_enable !== \"0\";\n        this.handleLogin = this.handleLogin.bind(this);\n        this.toggleTheme = this.toggleTheme.bind(this);\n        this.logout = this.logout.bind(this);\n        this.state = {\n            token:token,\n            user_id:user_id,\n            user_type:user_type,\n            isDarkTheme:isDarkTheme,\n            toggleTheme:this.toggleTheme,\n            logout:this.logout,\n            snackBarOpen:false,\n            alertMessage:\"\",\n            alertStatus:\"success\",\n            showMessage:(message,status) => {\n                this.setState({alertMessage:message,snackBarOpen:true,alertStatus:status});\n            },\n            isAnimationEnable:isAnimationEnable,\n            toggleAnimation: () => {\n                localStorage.setItem(\"is_animation_enable\",!this.state.isAnimationEnable ? \"1\" : \"0\");\n                this.setState(\n                (state)=>{return {isAnimationEnable:!state.isAnimationEnable}\n                });\n            },\n            theme:isDarkTheme ? darkTheme : lightTheme\n        };\n        if(this.state.token != null){\n            Api.checkToken(this.state.token).then((data)=>{\n                if(data.correct == 0){\n                    this.logout();\n                }\n            })\n        }\n\n\n\n    }\n\n    logout(){\n        localStorage.setItem(\"token\",null);\n        localStorage.setItem(\"user_id\",null);\n        localStorage.setItem(\"user_type\",null);\n        this.setState({token:null,user_id:null,user_type:null});\n    }\n\n    handleLogin(token,id,user_type){\n        localStorage.setItem(\"token\",token);\n        localStorage.setItem(\"user_id\",id);\n        localStorage.setItem(\"user_type\",user_type);\n        this.setState({token:token,user_id:id,user_type:user_type});\n    }\n\n\n\n    toggleTheme () {\n        let darkTheme = createMuiTheme({\n            palette: {\n                type: 'dark',\n                primary: {\n                    main: \"#ff5722\",\n                },\n                secondary: {\n                    main: \"#ff5722\",\n                },\n            },\n        });\n        let lightTheme = createMuiTheme({\n            palette: {\n                type: 'light',\n                primary: {\n                    main: \"#ff5722\",\n                },\n                secondary: {\n                    main: \"#ff5722\",\n                },\n            },\n        });\n        this.setState(state => ({\n            theme:state.isDarkTheme ? lightTheme : darkTheme,\n            isDarkTheme: !state.isDarkTheme\n            }),() => {\n                this.forceUpdate();\n                localStorage.setItem(\"is_dark_theme\",this.state.isDarkTheme ? \"1\" : \"0\");\n        }\n        );\n\n    }\n\n\n\n    render() {\n        /*\n        let randIndex = Math.floor(Math.random()*4);\n        let effect = null;\n        switch(randIndex){\n            case 0:\n                effect = <ParticlesBg color=\"#ff5722\" num={200} type=\"cobweb\"  bg={true} />;\n                break;\n            case 1:\n                effect = <ParticlesBg color=\"#303030\" num={200} type=\"lines\"  bg={true} />;\n                break;\n            case 2:\n                effect = <ParticlesBg color=\"#ff5722\" num={20} type=\"fountain\"  bg={true} />;\n                break;\n            case 3:\n                effect = <ParticlesBg color=\"#ff5722\" num={20} type=\"polygon\"  bg={true} />;\n                break;\n        }*/\n        return(\n            <TokenContext.Provider value={this.state}>\n                <ThemeProvider theme={this.state.theme}>\n            <Router>\n                {this.state.isAnimationEnable ? <ParticlesBg color=\"#ff5722\" num={200} type=\"cobweb\"  bg={true} /> : \"\"}\n                <Switch>\n                    <Route path=\"/login\">\n                        <Auth onLogin={this.handleLogin}/>\n                    </Route>\n                    <Route path=\"/registration\">\n                        <Reg onReg={this.handleLogin}/>\n                    </Route>\n                    <Route path=\"/restore\">\n                        <Restore/>\n                    </Route>\n                    <PrivateRoute token={this.state.token} path=\"/\">\n                        <Chat isDarkTheme={this.state.isDarkTheme}/>\n                        <Snackbar open={this.state.snackBarOpen} autoHideDuration={3000} onClose={()=>this.setState({snackBarOpen:false})}>\n                            <Alert severity={this.state.alertStatus} variant=\"filled\" elevation={6}>\n                                {this.state.alertMessage}\n                            </Alert>\n                        </Snackbar>\n                    </PrivateRoute>\n                </Switch>\n            </Router>\n                </ThemeProvider>\n            </TokenContext.Provider>\n                );\n    }\n}\nfunction PrivateRoute({ children, ...rest }) {\n    let contextType = TokenContext;\n    return (\n        <Route\n            {...rest}\n            render={({ location }) =>\n                rest.token != null ? (\n                    children\n                ) : (\n                    <Redirect\n                        to={{\n                            pathname: \"/login\",\n                            state: { from: location }\n                        }}\n                    />\n                )\n            }\n        />\n    );\n}","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\reportWebVitals.js",[],"C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\Auth.js",["147"],"import * as React from \"react\";\nimport PropTypes from 'prop-types';\nimport {\n    Box, Button,\n    Container,\n    CssBaseline,\n    Grid,\n    Link,\n    TextField,\n    Typography, withStyles,Paper\n} from \"@material-ui/core\";\nimport { Link as RouterLink } from 'react-router-dom';\nimport {Copyright} from \"./Copyright\";\nimport {withRouter} from \"react-router-dom\";\nimport Api from \"./Api\";\n\n\nclass Auth extends React.Component{\n\n    routingFunction = () => {\n        this.props.history.push(\"/\");\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            login:\"\",\n            pass:\"\",\n            wrongLoginPass:false\n        };\n        this.handleInputChange = this.handleInputChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleInputChange(event) {\n        const target = event.target;\n        const value = target.value;\n        const name = target.name;\n\n        this.setState({\n            [name]: value,\n            wrongLoginPass:false\n        });\n    }\n\n    handleSubmit(e){\n        e.preventDefault();\n        Api.login(this.state.login,this.state.pass).then((data)=>{\n            if(data[\"token\"] !== undefined){\n                this.props.onLogin(data[\"token\"],data[\"user_id\"],data[\"user_type\"]);\n                this.routingFunction();\n            }else if( data[\"error\"] === 1){\n                this.setState({wrongLoginPass:true});\n            }\n        })\n    }\n\n    render() {\n        const {classes} = this.props;\n\n\n        return(<Grid container justify=\"center\">\n            <CssBaseline />\n\n            <Paper elevation={6} className={classes.paper} item>\n                <Typography component=\"h1\" variant=\"h5\">\n                    Добро пожаловать. Снова.\n                </Typography>\n                <form className={classes.form} noValidate\n                      onSubmit={this.handleSubmit} >\n                    <TextField\n                        variant=\"outlined\"\n                        margin=\"normal\"\n                        error={this.state.wrongLoginPass}\n                        required\n                        fullWidth\n                        id=\"login\"\n                        label=\"Логин или E-mail\"\n                        name=\"login\"\n                        helperText={this.state.wrongLoginPass ? \"Неверный логин или пароль\" : \"\"}\n                        autoComplete=\"login\"\n                        onChange = {this.handleInputChange}\n                        value={this.state.login}\n                        autoFocus\n                    />\n                    <TextField\n                        variant=\"outlined\"\n                        margin=\"normal\"\n                        required\n                        error={this.state.wrongLoginPass}\n                        fullWidth\n                        onChange = {this.handleInputChange}\n                        name=\"pass\"\n                        label=\"Пароль\"\n                        type=\"password\"\n                        value={this.state.password}\n                        id=\"pass\"\n                        autoComplete=\"current-password\"\n                    />\n                    <Button\n                        type=\"submit\"\n                        fullWidth\n                        variant=\"contained\"\n                        color=\"primary\"\n                        className={classes.submit}\n                    >\n                        Войти\n                    </Button>\n\n                    <Grid container>\n                        <Grid item xs>\n                            <Link href=\"#\" variant=\"body2\" to=\"/restore\" component={RouterLink}>\n                                Забыли пароль?\n                            </Link>\n                        </Grid>\n                        <Grid item>\n                            <Link to=\"/registration\" component={RouterLink} variant=\"body2\">\n                                Зарегистрироваться\n                            </Link>\n                        </Grid>\n                    </Grid>\n                </form>\n                <Box mt={8}>\n                    <Copyright />\n                </Box>\n            </Paper>\n\n        </Grid>);\n    }\n}\n\n\n\nAuth.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nconst styles = {\n    paper: {\n        marginTop: \"160px\",\n        padding:\"60px\",\n        width:\"500px\",\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n    },\n    form: {\n        width: '100%', // Fix IE 11 issue.\n        marginTop: \"10px\",\n    },\n    submit: {\n        margin: \"30px 0 20px\",\n    },\n};\n\n\nexport default withStyles(styles)(withRouter(Auth));","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\Copyright.js",[],"C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\Reg.js",["148","149","150","151","152","153"],"import * as React from \"react\";\nimport {\n    Box,\n    Button,\n    Container,\n    CssBaseline,\n    FormControlLabel,\n    Grid,\n    Link, Paper,\n    TextField,\n    Typography, withStyles\n} from \"@material-ui/core\";\nimport {Copyright} from \"./Copyright\";\nimport {Link as RouterLink, withRouter} from 'react-router-dom';\nimport ParticlesBg from \"particles-bg\";\nimport Api from \"./Api\";\n\n\n\nclass Reg extends React.Component{\n    routingFunction = () => {\n        this.props.history.push(\"/\");\n    }\n    constructor(props) {\n        super(props);\n        this.state = {\n            login:\"\",\n            pass:\"\",\n            email:\"\",\n            isWrongLogin:\"\",\n            isWrongMail:\"\",\n            isWrongPassword:\"\"\n        };\n        this.handleInputChange = this.handleInputChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n    handleInputChange(event) {\n        const target = event.target;\n        const value = target.value;\n        const name = target.name;\n        this.setState({\n            [name]: value,\n            isWrongLogin:\"\",\n            isWrongMail:\"\",\n            isWrongPassword:\"\"\n        });\n    }\n\n    handleSubmit(e){\n        e.preventDefault();\n        if(this.state.login === \"\"){\n            this.setState({isWrongLogin:\"Введите логин\"});\n            return;\n        }\n        if(this.state.email === \"\"){\n            this.setState({isWrongMail:\"Введите email\"});\n            return;\n        }\n        let re = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n        if( !(re.test(this.state.email.toLowerCase())) ){\n            this.setState({isWrongMail:\"Некорректный email\"});\n            return;\n        }\n        if(this.state.pass.length < 6){\n            this.setState({isWrongPassword:\"Слишком короткий пароль\"});\n            return;\n        }\n\n        Api.register(this.state.login,this.state.pass,this.state.email).then((data)=>{\n            if(data[\"token\"] !== undefined){\n                this.props.onReg(data[\"token\"],data[\"user_id\"],data[\"user_type\"]);\n                this.routingFunction();\n            }else if( data[\"error\"] === 1){\n                this.setState({isWrongLogin:\"Логин занят\"});\n            }else if( data[\"error\"] === 2) {\n                this.setState({isWrongMail:\"Email занят\"});\n            }\n        })\n\n    }\n\n    render() {\n        const {classes} = this.props;\n        return ( <Grid container justify=\"center\">\n            <CssBaseline />\n\n            <Paper elevation={6} className={classes.paper} item>\n                <Typography component=\"h1\" variant=\"h5\">\n                    Добро пожаловать.\n                </Typography>\n                <form className={classes.form} onSubmit={this.handleSubmit} noValidate>\n                    <Grid container spacing={2}>\n                        <Grid item xs={12} sm={12}>\n                            <TextField\n                                autoComplete=\"login\"\n                                name=\"login\"\n                                variant=\"outlined\"\n                                required\n                                fullWidth\n                                id=\"login\"\n                                error={this.state.isWrongLogin != \"\"}\n                                helperText={this.state.isWrongLogin}\n                                onChange={this.handleInputChange}\n                                label=\"Логин\"\n                                autoFocus\n                            />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <TextField\n                                variant=\"outlined\"\n                                required\n                                fullWidth\n                                id=\"email\"\n                                label=\"Email\"\n                                error={this.state.isWrongMail != \"\"}\n                                helperText={this.state.isWrongMail}\n                                name=\"email\"\n                                onChange={this.handleInputChange}\n                                autoComplete=\"email\"\n                            />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <TextField\n                                variant=\"outlined\"\n                                required\n                                fullWidth\n                                name=\"pass\"\n                                label=\"Пароль\"\n                                error={this.state.isWrongPassword != \"\"}\n                                helperText={this.state.isWrongPassword}\n                                type=\"password\"\n                                onChange={this.handleInputChange}\n                                id=\"pass\"\n                                autoComplete=\"current-password\"\n                            />\n                        </Grid>\n                    </Grid>\n                    <Button\n                        type=\"submit\"\n                        fullWidth\n                        variant=\"contained\"\n                        color=\"primary\"\n                        className={classes.submit}\n                    >\n                        зарегистрироваться\n                    </Button>\n                    <Grid container justify=\"flex-end\">\n                        <Grid item xs>\n                            <Link href=\"#\" variant=\"body2\" component={RouterLink} to=\"/restore\" >\n                                Забыли пароль?\n                            </Link>\n                        </Grid>\n                        <Grid item>\n                            <Link href=\"#\" component={RouterLink} to=\"/login\" variant=\"body2\">\n                                Уже есть аккаунт?\n                            </Link>\n                        </Grid>\n                    </Grid>\n                </form>\n                <Box mt={5}>\n                    <Copyright />\n                </Box>\n            </Paper>\n\n        </Grid>);\n    }\n}\n\nconst styles = {\n    paper: {\n        marginTop: \"160px\",\n        padding:\"60px\",\n        width:\"500px\",\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n    },\n    form: {\n        width: '100%', // Fix IE 11 issue.\n        marginTop: \"10px\",\n    },\n    submit: {\n        margin: \"30px 0 20px\",\n    },\n};\nexport default withStyles(styles)(withRouter(Reg));","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\Chat.js",["154","155","156","157","158","159","160","161"],"C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\MainMenu.js",["162","163","164","165"],"import * as React from \"react\";\nimport {Avatar, Dialog, Fab, List, ListItem, withStyles} from \"@material-ui/core\";\nimport {AssignmentInd, Add, Settings, Explore, Forum} from \"@material-ui/icons\";\n\nimport {Divider} from \"@material-ui/core\";\nimport AppContext from \"./AppContext.js\";\nimport ProfileDialog from \"./ProfileDialog\";\nimport ServersDialog from \"./ServersDialog\";\nimport AddServerDialog from \"./AddServerDialog\";\nimport UsersList from \"./UsersList\";\nimport Utils from \"./Utils\";\n\n\n\nclass MainMenu extends React.Component{\n    static contextType = AppContext;\n    constructor(props) {\n        super(props);\n        this.state = {\n            profileDialogOpen:false,\n            serversDialogOpen:false,\n            addServerDialogOpen:false,\n\n        };\n\n        this.handleServerCreate = this.handleServerCreate.bind(this);\n\n    }\n\n    handleServerCreate(id){\n        this.props.onServerConnect();\n        this.props.onChangeServer(id);\n    }\n\n\n    render() {\n        const {classes} = this.props;\n        return (<div><List><ListItem><Fab onClick={() => this.setState({profileDialogOpen:true})} aria-label=\"add\">\n            <Settings />\n        </Fab></ListItem>\n                <ListItem><Fab onClick={this.props.onToChatClick} aria-label=\"add\">\n                    <Forum />\n                </Fab></ListItem>\n                <Divider className={classes.divider}/>\n            {this.props.servers.map((item)=>(\n                <ListItem key={item.id}>\n                    <Avatar className={classes.avatar + (this.props.currentServer===item.id ? \" \" + classes.current : \"\")} onClick={() => this.props.onChangeServer(item.id)}\n                            src={Utils.uploadDir+item.avatar}>\n                        <Fab className={classes.serverElem + (this.props.currentServer===item.id ? \" \"+classes.current : \"\")}>{item.name.substr(0,2)}</Fab>\n                    </Avatar></ListItem>\n            ))}\n                {this.context.user_type == 1 ? <ListItem><Fab color=\"primary\" className={classes.serverElem} onClick={() => this.setState({addServerDialogOpen:true})}>\n                    <Add/></Fab></ListItem> : \"\"}\n\n                <ListItem><Fab color=\"primary\" onClick={() =>this.setState({serversDialogOpen:true})} className={classes.serverElem}>\n                    <Explore/></Fab></ListItem>\n\n            </List><ProfileDialog open={this.state.profileDialogOpen} onClose={() =>this.setState({profileDialogOpen:false})}/>\n                    <ServersDialog open={this.state.serversDialogOpen}\n                                   connectedServers={this.props.servers}\n                                   onServerConnect={this.props.onServerConnect}\n                                   onClose={() => this.setState({serversDialogOpen:false})}/>\n                    <AddServerDialog open={this.state.addServerDialogOpen}\n                                     onCreate={this.handleServerCreate}\n                                     onClose={() => this.setState({addServerDialogOpen:false})}/>\n\n        </div>\n        );\n    }\n\n}\nconst styles = {\n    divider: {\n\n        padding:\"1px\"\n    },\n    current:{\n        \"border-radius\":\"30%\"\n    },\n    avatar:{\n        width:\"56px\",\n        height:\"56px\",\n        \"background-color\":\"#e0e0e0\",\n        \"cursor\":\"pointer\",\n        transition:\".1s\"\n    },\n    serverElem:{\n        \"font-size\":\"20px\",\n        transition:\".1s\"\n    }\n};\nexport default withStyles(styles)(MainMenu);","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\AppContext.js",[],"C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\RoomsList.js",["166","167"],"import * as React from \"react\";\nimport AppContext from \"./AppContext\";\nimport {\n    Accordion, AccordionDetails, AccordionSummary,\n    Badge, Icon,\n    List,\n    ListItem,\n    ListItemIcon,\n    ListItemText,\n    Menu,\n    MenuItem,\n    Typography,\n    withStyles\n} from \"@material-ui/core\";\nimport {\n    Delete,\n    Edit, ExpandMore,\n    Notifications,\n    NotificationsOff\n} from \"@material-ui/icons\";\nimport AddRoomDialog from \"./AddRoomDialog\";\nimport Reorder, {reorder} from \"react-reorder\";\nimport Utils from \"./Utils\";\nimport Api from \"./Api\";\nimport AddCategoryDialog from \"./AddCategoryDialog\";\n\n\nclass RoomsList extends React.Component{\n    static contextType = AppContext;\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            anchorEl:null,\n            clickedRoomId:null,\n            isEditOpen:false,\n            isEditCatOpen:false,\n            clickedRoom:null,\n            clickedCategory:null,\n            categoryAnchorEl:null,\n            clickedCategoryId:null\n        };\n        this.handleRoomContext = this.handleRoomContext.bind(this);\n        this.deleteRoom = this.deleteRoom.bind(this);\n        this.handleChangeNotifications = this.handleChangeNotifications.bind(this);\n        this.handleReorder = this.handleReorder.bind(this);\n        this.deleteCategory = this.deleteCategory.bind(this);\n        this.handleCatContext = this.handleCatContext.bind(this);\n    }\n\n    handleRoomClick(roomId){\n        this.props.onChangeRoom(roomId);\n    }\n\n    deleteRoom(){\n        Api.deleteRoom(this.context.token,this.state.clickedRoomId).then((data)=>{\n            this.setState({anchorEl:null,clickedRoomId:null});\n            this.props.onRoomsUpdate();\n        })\n    }\n\n    handleRoomContext(event,id){\n\n        let clickedRoom = Utils.getElById(this.props.rooms,id);\n        this.setState({\n            anchorEl:event.currentTarget,\n            clickedRoomId:id,\n            clickedRoom:clickedRoom\n        });\n    }\n\n    handleCatContext(event,id){\n        let clickedCategory = Utils.getElById(this.props.categories,id);\n        this.setState({\n            categoryAnchorEl:event.currentTarget,\n            clickedCategoryId:id,\n            clickedCategory:clickedCategory\n        });\n    }\n\n    handleChangeNotifications(){\n        Api.changeAlert(this.context.token,this.state.clickedRoomId).then((data)=>{\n            this.setState({anchorEl:null,clickedRoomId:null});\n            this.props.onRoomsUpdate();\n        })\n    }\n\n\n\n    deleteCategory(){\n        Api.deleteCategory(this.context.token,this.state.clickedCategoryId).then((data)=>{\n            this.setState({categoryAnchorEl:null,clickedCategoryId:null});\n            this.props.onCategoriesUpdate();\n            this.props.onRoomsUpdate();\n        })\n    }\n\n    handleReorder (event, previousIndex, nextIndex, fromId, toId) {\n        if(previousIndex === nextIndex && fromId === toId)return;\n        let toCat = toId.replace(\"cat-\",\"\");\n        if(toCat === \"null\")toCat = null;\n\n        let fromCat = fromId.replace(\"cat-\",\"\");\n        if(fromCat === \"null\")fromCat = null;\n\n        let roomId = this.props.rooms.filter(room => room.category_id == fromCat)[previousIndex].id;\n\n        Api.setRoomCategory(this.context.token,roomId,toCat,nextIndex).then((data)=>{\n            this.props.onRoomsUpdate(null,true);\n        })\n\n\n\n\n    }\n\n    render() {\n        const {classes} = this.props;\n        let canEditRooms = (this.props.admin || this.props.role?.room_edit) && !this.props.isChat;\n        if((this.props.rooms == null || this.props.rooms.length === 0) && (this.props.categories == null || this.props.categories.length === 0)){\n            return(<Typography variant=\"subtitle2\" align=\"center\">Комнат пока нет...</Typography>);\n        }else {\n            return (<div>\n                {this.props.categories.map((category) => (\n                    <Accordion>\n                        <AccordionSummary\n                            onContextMenu={(e) => this.handleCatContext(e,category.id)}\n                            expandIcon={<ExpandMore />}\n                        >\n                          <Typography> {category.name}</Typography>\n                        </AccordionSummary>\n                        <AccordionDetails style={{padding:\"5px 0px\"}}>\n\n                        <Reorder\n                            reorderId={\"cat-\"+category.id} // Unique ID that is used internally to track this list (required)\n                            reorderGroup=\"roomsReorder\"\n                            lock=\"horizontal\" // Lock the dragging direction (optional): vertical, horizontal (do not use with groups)\n                            holdTime={100} // Default hold time before dragging begins (mouse & touch) (optional), defaults to 0\n                            touchHoldTime={500} // Hold time before dragging begins on touch devices (optional), defaults to holdTime\n                            mouseHoldTime={100} // Hold time before dragging begins with mouse (optional), defaults to holdTime\n                            autoScroll={true} // Enable auto-scrolling when the pointer is close to the edge of the Reorder component (optional), defaults to true\n                            disableContextMenus={true} // Disable context menus when holding on touch devices (optional), defaults to true\n                            onReorder={this.handleReorder}\n                            component={List}\n                            disabled={!this.props.admin && !this.props.role.room_edit}\n                            style={{width:\"100%\"}}\n                            placeholder={\n                                <ListItem className={classes.dragPlaceholder} fullwidth button/>\n                            }\n                        >\n                            {this.props.rooms.filter(room => room.category_id === category.id).map((room) => (\n                                <ListItem style={{zIndex:1}} fullwidth onContextMenu={(event) =>  this.handleRoomContext(event,room.id)}\n                                          selected={this.props.currentRoom === room.id} onClick={() => this.handleRoomClick(room.id)} key={room.id} button>\n                                    <ListItemIcon>\n                                        <Badge anchorOrigin={{\n                                            vertical: 'top',\n                                            horizontal: 'left',\n                                        }} color=\"primary\" badgeContent={\"+\"+room.is_unread} invisible={!(room.is_unread > 0)}>\n                                            <Icon>{room.icon}</Icon>\n                                        </Badge>\n                                    </ListItemIcon>\n                                    <ListItemText>\n                                        <span className={classes.room}>{room.login ?? room.name}</span>\n                                    </ListItemText>\n                                    {room.is_muted ? <NotificationsOff opacity={0.7}/> : \"\"}\n\n                                </ListItem>\n                            ))}\n                        </Reorder>\n\n                    </AccordionDetails>\n                    </Accordion>\n                ))}\n\n                <Reorder\n                    reorderId=\"cat-null\" // Unique ID that is used internally to track this list (required)\n                    reorderGroup=\"roomsReorder\"\n                    lock=\"horizontal\" // Lock the dragging direction (optional): vertical, horizontal (do not use with groups)\n                    holdTime={300} // Default hold time before dragging begins (mouse & touch) (optional), defaults to 0\n                    touchHoldTime={500} // Hold time before dragging begins on touch devices (optional), defaults to holdTime\n                    mouseHoldTime={200} // Hold time before dragging begins with mouse (optional), defaults to holdTime\n                    autoScroll={true} // Enable auto-scrolling when the pointer is close to the edge of the Reorder component (optional), defaults to true\n                    disableContextMenus={true} // Disable context menus when holding on touch devices (optional), defaults to true\n                    onReorder={this.handleReorder}\n                    component={List}\n                    disabled={!this.props.admin && !this.props.role.room_edit}\n                    style={{width:\"100%\"}}\n                    placeholder={\n                        <ListItem className={classes.dragPlaceholder} fullwidth button/>\n                    }\n                >\n                    {this.props.rooms.filter(room => room.category_id == null).map((room) => (\n                        <ListItem style={{zIndex:1}} fullwidth onContextMenu={(event) =>  this.handleRoomContext(event,room.id)}\n                                  selected={this.props.currentRoom === room.id} onClick={() => this.handleRoomClick(room.id)} key={room.id} button>\n                            <ListItemIcon>\n                                <Badge anchorOrigin={{\n                                    vertical: 'top',\n                                    horizontal: 'left',\n                                }} color=\"primary\" badgeContent={\"+\"+room.is_unread} invisible={!(room.is_unread > 0)}>\n                                    <Icon>{room.icon}</Icon>\n                                </Badge>\n                            </ListItemIcon>\n                            <ListItemText>\n                                <span className={classes.room}>{room.login ?? room.name}</span>\n                            </ListItemText>\n                            {room.is_muted ? <NotificationsOff opacity={0.7}/> : \"\"}\n\n                        </ListItem>\n                    )) }\n                </Reorder>\n\n                <Menu\n                transformOrigin={{\n                    vertical: 'top',\n                    horizontal: 'center',\n                }}\n                anchorOrigin={{\n                    vertical: \"bottom\",\n                    horizontal: 'center',\n                }}\n\n                getContentAnchorEl={null}\n                anchorEl={this.state.anchorEl}\n                keepMounted\n                open={Boolean(this.state.anchorEl)}\n                onClose={() => this.setState({anchorEl:null})}\n            >\n                {canEditRooms ? <MenuItem className={classes.delete} onClick={this.deleteRoom}>\n                    Удалить комнату<Delete className={classes.icon}/></MenuItem> : \"\"}\n                {canEditRooms ? <MenuItem className={classes.edit} onClick={() => this.setState({isEditOpen:true,anchorEl:null})}>\n                    Редактировать <Edit className={classes.icon}/></MenuItem> : \"\"}\n                <MenuItem className={classes.notifications} onClick={this.handleChangeNotifications}>\n                    <Notifications className={classes.icon}/>{this.state.clickedRoom != null && this.state.clickedRoom.is_muted ? \"Включить уведомления\" : \"Отключить уведомления\"}</MenuItem>\n            </Menu>\n                {canEditRooms ?<Menu\n                    transformOrigin={{\n                        vertical: 'top',\n                        horizontal: 'center',\n                    }}\n                    anchorOrigin={{\n                        vertical: \"bottom\",\n                        horizontal: 'center',\n                    }}\n\n                    getContentAnchorEl={null}\n                    anchorEl={this.state.categoryAnchorEl}\n                    keepMounted\n                    open={Boolean(this.state.categoryAnchorEl)}\n                    onClose={() => this.setState({categoryAnchorEl:null})}\n                >\n                     <MenuItem className={classes.delete} onClick={this.deleteCategory}>\n                        Удалить категорию<Delete className={classes.icon}/></MenuItem>\n                    <MenuItem className={classes.edit} onClick={() => this.setState({isEditCatOpen:true})}>\n                        Редактировать<Edit className={classes.icon}/></MenuItem>\n                </Menu>: \"\"}\n                {this.state.clickedRoom != null ? <AddRoomDialog\n                    open={this.state.isEditOpen}\n                    serverId={this.props.serverId}\n                    onCreate={this.props.onRoomsUpdate}\n                    roomId={this.state.clickedRoomId}\n                    name={this.state.clickedRoom.name}\n                    description={this.state.clickedRoom.description}\n                    bg={this.state.clickedRoom.bg}\n                    icon={this.state.clickedRoom.icon}\n                    onClose={() => this.setState({isEditOpen:false})}\n                /> : \"\"}\n                {this.state.clickedCategory != null ? <AddCategoryDialog\n                    open={this.state.isEditCatOpen}\n                    name={this.state.clickedCategory.name}\n                    onCreate={this.props.onRoomsUpdate}\n                    onClose={() => this.setState({isEditCatOpen:false})}\n                    categoryId={this.state.clickedCategoryId}\n                /> : \"\"}\n            </div>);\n        }\n    }\n\n}\n\nconst styles = {\n    dragPlaceholder:{\n        height:\"48px\",\n        \"z-index\":0,\n        border:\"2px dashed #999\"\n    },\n    room:{\n        \"text-overflow\":\"ellipsis\",\n        \"white-space\":\"nowrap\",\n        \"display\":\"block\",\n        \"width\":\"100%\",\n        \"overflow\":\"hidden\"\n    },\n    notifications:{\n        color:\"#ccc\",\n        width:\"250px\"\n    },\n    edit:{\n        color:\"#ffc107\",\n        width:\"250px\"\n    },\n    menu:{\n        width:\"400px\"\n    },\n    delete:{\n        color:\"#f50057\",\n        \"padding-right\":\"50px\"\n    },\n    icon:{\n        position:\"absolute\",\n        right:\"10px\"\n    }\n};\nexport default withStyles(styles)(RoomsList);","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\ServerName.js",["168","169"],"C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\RoomAppBar.js",["170"],"import * as React from \"react\";\nimport {\n    Accordion,\n    AccordionDetails,\n    AccordionSummary,\n    AppBar,\n    Toolbar,\n    Typography,\n    withStyles\n} from \"@material-ui/core\";\nimport {ExpandMore} from \"@material-ui/icons\";\nimport Utils from \"./Utils\";\n\nclass RoomAppBar extends React.Component{\n    constructor(props) {\n        super(props);\n        this.state = {\n            open:false\n        };\n    }\n    render(){\n        const {classes} = this.props;\n        if(this.props.description != null && this.props.description.length > 100){\n            return(<AppBar color=\"default\" position=\"absolute\">\n                <Toolbar className={classes.root}>\n                    <Accordion className={classes.accordion} expanded={this.state.open} onChange={() => this.setState((state) => {return {open:!state.open}} )}>\n                        <AccordionSummary\n                            expandIcon={<ExpandMore />}\n                            id=\"panel1bh-header\"\n                        >\n                            <Typography className={classes.divider} variant=\"h6\" noWrap>\n                                {this.props.name}\n                            </Typography>\n                            {!this.state.open ? <Typography className={classes.description} variant=\"body2\">\n                                {Utils.truncateString(this.props.description,100)}\n                            </Typography> : \"\"}\n                        </AccordionSummary>\n                        <AccordionDetails>\n                            <Typography variant=\"body2\">\n                                {this.props.description}\n                            </Typography>\n                        </AccordionDetails>\n                    </Accordion>\n\n\n                </Toolbar>\n            </AppBar>);\n        }else{\n            return(<AppBar color=\"default\" position=\"absolute\">\n                <Toolbar>\n                    <Typography className={this.props.description != \"\" ? classes.divider : \"\"} variant=\"h6\" noWrap>\n                        {this.props.name}\n                    </Typography>\n                    <Typography className={classes.description} variant=\"body2\" noWrap>\n                        {Utils.truncateString(this.props.description,100)}\n                    </Typography>\n\n                </Toolbar>\n            </AppBar>);\n        }\n\n    }\n\n\n}\n\nconst styles = {\n    root:{\n        overflow:\"hidden\"\n    },\n    accordion:{\n        background:\"transparent\",\n        boxShadow:\"none\"\n    },\n    divider:{\n        borderRight:\"1px solid #888\",\n        paddingRight:\"10px\"\n    },\n    description:{\n        marginTop:\"5px\",\n        marginLeft:\"10px\",\n\n    }\n\n};\nexport default withStyles(styles)(RoomAppBar);","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\Messages.js",["171","172","173","174","175","176","177","178","179","180","181","182","183"],"C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\InputReplyMessage.js",["184"],"import * as React from \"react\";\nimport {Paper, withStyles} from \"@material-ui/core\";\nimport {Close} from \"@material-ui/icons\";\n\nclass InputReplyMessage extends React.Component{\n    render(){\n        const {classes} = this.props;\n        if(this.props.replyLogin === null)return(<div/>);\n        return( <div className={this.props.onCancel != null ? classes.messageReplyWrap : null }>\n                                <div className={classes.messageReply}>\n                                    <h5 className={classes.login}>{this.props.replyLogin}</h5>\n                                    <span className={classes.text}>{this.props.replyText}</span>\n                                    {this.props.onCancel != null ? <Close onClick={this.props.onCancel} className={classes.close}/> : null }\n                                </div>\n        </div>);\n    }\n}\n\nconst styles = {\n    messageReplyWrap:{\n        padding:\"10px 20px\"\n    },\n    messageReply:{\n        \"border-left\":\"2px solid #ff5722\",\n        \"padding-left\":\"10px\"\n    },\n    login:{\n        margin:\"0\",\n        \"font-size\":\"1.15em\",\n        \"font-weight\":400,\n        color:\"#ff5722\"\n    },\n    text:{\n        opacity:0.7\n    },\n    close:{\n        position:\"absolute\",\n        cursor:\"pointer\",\n        right:\"10px\",\n        top:\"10px\"\n    },\n\n\n};\nexport default withStyles(styles)(InputReplyMessage);","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\ProfileDialog.js",["185","186"],"import * as React from \"react\";\nimport {\n    Accordion, AccordionDetails, AccordionSummary,\n    AppBar, Avatar,\n    Button,\n    Dialog, DialogActions, DialogTitle, Divider, FormControlLabel,\n    IconButton,\n    List,\n    ListItem, ListItemAvatar,\n    ListItemText, Slide, Snackbar, Switch,\n    Toolbar,\n    Typography,\n    withStyles\n} from \"@material-ui/core\";\nimport {Close, ExpandMore} from \"@material-ui/icons\";\nimport TokenContext from \"./AppContext\";\nimport FormDialog from \"./FormDialog\";\nimport Api from \"./Api\";\nimport Utils from \"./Utils\";\n\n\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n    return <Slide direction=\"right\" ref={ref} {...props} />;\n});\n\nclass ProfileDialog extends React.Component {\n    static contextType = TokenContext;\n    constructor(props) {\n        super(props);\n        this.handleClose = this.handleClose.bind(this);\n        this.handleDarkThemeChange = this.handleDarkThemeChange.bind(this);\n        this.state = {expanded:false,\n            login:null,\n            email:null,\n            status:null,\n            avatar:null,\n            loginFormOpen:false,\n            statusFormOpen:false,\n            passFormOpen:false,\n            isConfirmDeleteOpen:false\n        };\n        this.handleAccordionChange = this.handleAccordionChange.bind(this);\n        this.handleSaveLogin = this.handleSaveLogin.bind(this);\n        this.handleSaveStatus = this.handleSaveStatus.bind(this);\n        this.handleSavePassword = this.handleSavePassword.bind(this);\n        this.handleFileUploaded = this.handleFileUploaded.bind(this);\n    }\n\n    componentDidMount() {\n        Api.getProfile(this.context.token).then((data)=>{\n            if(data.error === undefined){\n                this.setState({...data.user})\n            }\n        })\n    }\n\n    handleClose(){\n        this.props.onClose();\n    }\n    handleDarkThemeChange(){\n        this.context.toggleTheme();\n    }\n\n\n    handleSaveLogin(data){\n        if(data==null)return;\n        let newLogin = data.login;\n        if(newLogin.length === 0){\n            this.context.showMessage(\"Логин не может быть пустым\",\"error\");\n            return;\n        }\n        Api.editProfile(this.context.token,newLogin).then((data)=>{\n            if(data.error === undefined){\n                this.setState({login:newLogin});\n                this.context.showMessage(\"Логин успешно изменен.\",\"success\");\n            }else{\n                this.context.showMessage(data.error,\"error\");\n            }\n        })\n        this.setState({loginFormOpen:false});\n    }\n\n\n\n    handleSaveStatus(data){\n        let newStatus = data == null ? \" \" : data.status;\n        this.setState({statusFormOpen:false});\n        Api.editProfile(this.context.token,null,newStatus).then((data)=>{\n            if(data.error === undefined){\n                this.context.showMessage(\"Статус успешно изменен.\",\"success\");\n                this.setState({status:newStatus});\n            }else{\n                this.context.showMessage(data.error,\"error\");\n            }\n        })\n\n    }\n\n    handleSavePassword(data){\n        if(data == null)return;\n        this.setState({passFormOpen:false});\n        let prevPass = data.prev_password;\n        let newPass = data.new_password;\n        Api.editProfile(this.context.token,null,null,prevPass,newPass).then((data)=>{\n            if(data.error === undefined){\n                this.context.showMessage(\"Пароль успешно изменен.\",\"success\");\n            }else{\n                this.context.showMessage(data.error,\"error\");\n            }\n        })\n\n    }\n\n    handleAccordionChange = (panel) => (event, isExpanded) => {\n        this.setState({expanded:isExpanded ? panel : false});\n    };\n    handleFileUploaded(event){\n        if(event.target.files != null && event.target.files.length != 0){\n            let file = event.target.files[0];\n            Api.uploadAvatar(this.context.token,file).then((data)=>{\n                this.setState({avatar:data.avatar});\n            })\n        }\n\n    }\n\n    handleAccountDelete(){\n        Api.deleteAccount(this.context.token).then((data)=>{\n            if(data.error === undefined){\n                this.context.logout();\n            }\n        })\n    }\n\n    render(){\n        const {classes} = this.props;\n        return(<Dialog fullScreen open={this.props.open} onClose={this.handleClose} TransitionComponent={Transition}>\n            <AppBar className={classes.appBar}>\n                <Toolbar>\n                    <IconButton edge=\"start\" color=\"inherit\" onClick={this.handleClose} aria-label=\"close\">\n                        <Close />\n                    </IconButton>\n                    <Typography variant=\"h6\" className={classes.title}>\n                        Настройки\n                    </Typography>\n                </Toolbar>\n            </AppBar>\n            <br/><br/><br/><br/>\n            <Accordion expanded={this.state.expanded === 'general'} onChange={this.handleAccordionChange(\"general\")}>\n                <AccordionSummary\n                    expandIcon={<ExpandMore />}\n                    aria-controls=\"generalbh-content\"\n                    id=\"generalbh-header\"\n                >\n                    <Typography>Основные настройки</Typography>\n                </AccordionSummary>\n                <AccordionDetails>\n                    <List className={classes.list}>\n                        <ListItem button>\n                            <FormControlLabel\n                                control={<Switch checked={this.context.isDarkTheme} onChange={this.handleDarkThemeChange} />}\n                                label=\"Темная тема\"\n                            />\n                        </ListItem>\n                        <Divider />\n                        <ListItem button>\n                            <FormControlLabel\n                                control={<Switch checked={this.context.isAnimationEnable} onChange={this.context.toggleAnimation} />}\n                                label=\"Анимация фона\"\n                            />\n                        </ListItem>\n                        <Divider />\n                    </List>\n                </AccordionDetails>\n            </Accordion>\n            <Accordion expanded={this.state.expanded === 'user'} onChange={this.handleAccordionChange(\"user\")}>\n                <AccordionSummary\n                    expandIcon={<ExpandMore />}\n                    aria-controls=\"userbh-content\"\n                    id=\"userbh-header\"\n                >\n                    <Typography>Пользователь</Typography>\n                </AccordionSummary>\n                <AccordionDetails>\n                    <List className={classes.list}>\n                        <ListItem button>\n                            <ListItemAvatar>\n                                <Avatar alt={this.state.login} src={Utils.uploadDir+this.state.avatar}/>\n                            </ListItemAvatar>\n                            <input onChange={this.handleFileUploaded} name=\"avatar\" accept=\"image/*\" className={classes.inputFile} id=\"button-file\" type=\"file\"/>\n                            <label htmlFor=\"button-file\">\n                                <Button variant=\"contained\" color=\"primary\" component=\"span\">\n                                    Загрузить аватар.\n                                </Button>\n                            </label>\n                        </ListItem>\n                        <ListItem button>\n                            <ListItemText primary=\"Логин\" secondary={this.state.login} />\n                            <Button onClick={() => this.setState({loginFormOpen:true})} variant=\"contained\" color=\"primary\" component=\"span\">\n                                Изменить\n                            </Button>\n                        </ListItem>\n                        <Divider />\n                        <ListItem button>\n                            <ListItemText primary=\"Почта\" secondary={this.state.email} />\n                        </ListItem>\n                        <Divider />\n                        <ListItem button>\n                            <ListItemText primary=\"Статус\" secondary={this.state.status} />\n                            <Button variant=\"contained\" onClick={() => this.setState({statusFormOpen:true})} color=\"primary\" component=\"span\">\n                                Изменить\n                            </Button>\n                        </ListItem>\n                        <Divider />\n                        <ListItem button>\n                            <ListItemText primary=\"Пароль\" />\n                            <Button variant=\"contained\" color=\"primary\" onClick={() => this.setState({passFormOpen:true})} component=\"span\">\n                                Изменить\n                            </Button>\n                        </ListItem>\n\n                        <ListItem>\n                            <Button variant=\"contained\" color=\"primary\" onClick={() => this.setState({isConfirmDeleteOpen:true})} component=\"span\">\n                                Удалить аккаунт\n                            </Button>\n                        </ListItem>\n\n\n                        <ListItem>\n                            <Button variant=\"contained\" color=\"primary\" onClick={this.context.logout} component=\"span\">\n                                Выйти\n                            </Button>\n                        </ListItem>\n                    </List>\n                </AccordionDetails>\n            </Accordion>\n            <FormDialog open={this.state.loginFormOpen} onSave={this.handleSaveLogin} types={[\"text\"]} names={[\"login\"]}\n                        onClose={() => this.setState({loginFormOpen:false})} text=\"Введите логин\" labels={[\"Логин\"]}/>\n            <FormDialog open={this.state.statusFormOpen} onSave={this.handleSaveStatus} types={[\"text\"]} names={[\"status\"]}\n                        onClose={() => this.setState({statusFormOpen:false})} text=\"Введите статус\" labels={[\"Статус\"]}/>\n            <FormDialog open={this.state.passFormOpen} onSave={this.handleSavePassword} types={[\"password\",\"password\"]}\n                        names={[\"prev_password\",\"new_password\"]}\n                        onClose={() => this.setState({passFormOpen:false})} text=\"Введите текущий и новый пароли\"\n                        labels={[\"Текущий пароль\",\"Новый пароль\"]}/>\n            <Dialog open={this.state.isConfirmDeleteOpen} onClose={() => this.setState({isConfirmDeleteOpen:false})}>\n                <DialogTitle>Вы уверены?</DialogTitle>\n                <DialogActions>\n                    <Button onClick={() => this.setState({isConfirmDeleteOpen:false})} color=\"primary\">\n                        Отменить\n                    </Button>\n                    <Button onClick={() => this.handleAccountDelete()} color=\"primary\" autoFocus>\n                        Удалить аккаунт\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </Dialog>)\n    }\n\n}\nconst styles = {\n    appBar:{\n        appBar: {\n            position: 'relative',\n        },\n        title: {\n            marginLeft: \"20px\",\n            flex: 1,\n        },\n\n    },\n    inputFile:{\n        display: 'none',\n    },\n    list:{\n        width:\"100% !important\"\n    }\n\n\n};\nexport default withStyles(styles)(ProfileDialog);","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\UsersList.js",["187","188","189"],"import * as React from \"react\";\nimport TokenContext from \"./AppContext\";\nimport {Avatar, Badge, List, ListItem, ListItemAvatar, ListItemText, withStyles} from \"@material-ui/core\";\nimport UserPopover from \"./UserPopover\";\nimport StyledBadge from \"./StyledBadge\";\nimport {blue, cyan, green, lime, orange, pink, purple, red, yellow} from \"@material-ui/core/colors\";\nimport Utils from \"./Utils\";\n\n\n\nclass UsersList extends React.Component{\n    static contextType = TokenContext;\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            popoverOpen:false,\n            anchorEl:null,\n            clickedUser:null\n        }\n        this.handleClose = this.handleClose.bind(this);\n        this.handleWriteClick = this.handleWriteClick.bind(this);\n    }\n\n    handleWriteClick(event,id){\n        this.handleClose();\n        this.props.onWriteToUser(event,id);\n\n    }\n\n    handleClose(){\n        this.setState({popoverOpen:false})\n    }\n\n    handleClick(event,id){\n        this.setState({anchorEl:event.currentTarget,\n            clickedUser:Utils.getElById(this.props.users,id),\n            popoverOpen:true\n        });\n    }\n\n    render() {\n        const {classes} = this.props;\n        if(this.props.users == null)return(<List/>);\n        return(<div><List>\n            {this.props.users.map((user)=>(\n            <ListItem button key={user.id} onClick={(event)=>this.handleClick(event,user.id)}\n                      onContextMenu={(event)=>this.handleClick(event,user.id)}>\n                <ListItemAvatar>\n                    <StyledBadge variant=\"dot\"\n                                 anchorOrigin={{\n                                    vertical: 'bottom',\n                                    horizontal: 'right',\n                                 }}\n                                 overlap=\"circle\"\n                                 invisible={user.online == 0}>\n                        <Avatar alt={user.login} src={Utils.uploadDir+user.avatar} />\n                    </StyledBadge>\n                </ListItemAvatar>\n                <ListItemText className={user.color != null ? classes[user.color+\"Text\"] : \"\"} primary={user.login}/>\n            </ListItem>\n            ))}\n        </List>\n        <UserPopover open={this.state.popoverOpen}\n                     onClose={this.handleClose}\n                     onWriteToUser={(event)=>this.handleWriteClick(event,this.state.clickedUser.id)}\n                     anchorEl={this.state.anchorEl}\n                     user={this.state.clickedUser}\n                     server={this.props.server}\n                     role={this.props.role}\n                     onUsersUpdate={this.props.onUsersUpdate}\n                     onMessagesUpdate={this.props.onMessagesUpdate}\n                     doWrite={this.state.clickedUser != null && this.context.user_id != this.state.clickedUser.id}\n        />\n        </div>)\n    }\n}\n\nconst styles = {\n    redText:{\n        color:red[400]\n    },\n    pinkText:{\n        color:pink[400],\n    },\n    purpleText:{\n        color:purple[400],\n    },\n    limeText:{\n        color:lime[400],\n    },\n    blueText:{\n        color:blue[400],\n    },\n    cyanText:{\n        color:cyan[400],\n    },\n    greenText:{\n        color:green[400],\n    },\n    yellowText:{\n        color:yellow[400],\n    },\n    orangeText:{\n        color:orange[400],\n    }\n};\nexport default withStyles(styles)(UsersList);","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\FormDialog.js",["190","191"],"import * as React from \"react\";\nimport TokenContext from \"./AppContext\";\nimport {\n    Button,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogTitle,\n    List,\n    TextField,\n    withStyles\n} from \"@material-ui/core\";\n\nclass FormDialog extends React.Component {\n    static contextType = TokenContext;\n    constructor(props) {\n        super(props);\n        this.handleChange = this.handleChange.bind(this);\n    }\n    handleChange(event,key){\n        this.setState({[key]:event.target.value});\n    }\n    componentDidUpdate(prevProps) {\n        if(!prevProps.open && this.props.open){\n            this.props.names.map((item)=>{\n                this.setState({[item]:\"\"});\n            })\n        }\n    }\n\n    render() {\n\n        return (<Dialog maxWidth=\"sm\" fullWidth open={this.props.open} onClose={this.props.onClose} aria-labelledby=\"form-dialog-title\">\n            <DialogTitle id=\"form-dialog-title\">{this.props.text}</DialogTitle>\n\n            <DialogContent>\n                {this.props.names.map((item,i)=>(\n                    <TextField\n                        autoFocus\n                        margin=\"dense\"\n                        id=\"name\"\n                        onChange={(event) => this.handleChange(event,item)}\n                        label={this.props.labels[i]}\n                        type={this.props.types[i]}\n                        fullWidth\n                    />\n                ))}\n\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={() => this.props.onSave(this.state)} color=\"primary\">\n                    Сохранить\n                </Button>\n            </DialogActions>\n        </Dialog>);\n    }\n\n}\nconst styles = {\n\n};\nexport default withStyles(styles)(FormDialog);","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\ServersDialog.js",[],"C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\ServerCard.js",[],"C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\UserPopover.js",[],"C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\Emoji.js",["192"],"import * as React from \"react\";\nimport {Button, Fade, Popover, withStyles} from \"@material-ui/core\";\nimport {Picker} from \"emoji-mart\";\nimport {Mood} from \"@material-ui/icons\";\n\nclass Emoji extends React.Component {\n\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            open:false,\n            anchorEl:null,\n        }\n        this.handleButtonClick = this.handleButtonClick.bind(this);\n        this.handleClose = this.handleClose.bind(this);\n    }\n\n    handleButtonClick(event){\n        this.setState({\n            anchorEl:event.currentTarget,\n            open:true\n        });\n    }\n    handleClose(){\n        this.setState({open:false});\n    }\n\n\n    render() {\n        const {classes} = this.props;\n        return (<div><Button onClick={this.handleButtonClick} className={classes.emojiButton}><Mood/></Button>\n            <Popover\n            open={this.state.open}\n            anchorEl={this.state.anchorEl}\n            onClose={this.handleClose}\n            anchorOrigin={{\n                vertical: 'top',\n                horizontal: 'right',\n            }}\n            transformOrigin={{\n                vertical: 'bottom',\n                horizontal: 'right',\n            }}\n        >\n            <Picker\n                native={true}\n\n                theme={this.props.isDarkTheme ? \"dark\" : \"light\"}\n                color=\"#ff5722\"\n                defaultSkin={6}\n                title=\"\"\n                disableSkinTonePicker={true}\n                onSelect={this.props.onSelect}\n                emoji='point_up'\n                showPreview={false}\n                i18n={{search: 'Поиск',\n                    clear: 'Очистить',\n                    notfound: 'Не найдено',\n                    skintext: 'Нигер?',\n                    categories: {\n                        search: 'Результаты',\n                        recent: 'Любимые смайлики',\n                        smileys: 'Эмоции',\n                        people: 'Люди',\n                        nature: 'Не люди',\n                        foods: 'Хавчик',\n                        activity: 'Спорт',\n                        places: 'Путешествия',\n                        objects: 'Предметы',\n                        symbols: 'Символы',\n                        flags: 'Флаги',\n                        custom: 'Кастом',\n                    },\n                    categorieslabel: 'Категории', // Accessible title for the list of categories\n                    skintones: {\n                        1: 'Китаец',\n                        2: 'Ариец',\n                        3: 'Не совсем ариец',\n                        4: 'Полу нигер',\n                        5: 'Нигер',\n                        6: 'Самый нигерный нигер',\n                    }}}\n            />\n\n        </Popover></div>);\n    }\n}\nconst styles = {\n    emojiButton:{\n        position:\"absolute\",\n        bottom:\"10px\",\n        right:\"69px\",\n        opacity:0.7\n    },\n};\nexport default withStyles(styles)(Emoji);","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\Restore.js",["193","194","195","196","197"],"import * as React from \"react\";\nimport PropTypes from 'prop-types';\nimport {\n    Box, Button,\n    Container,\n    CssBaseline,\n    Grid,\n    Link, Paper,\n    TextField,\n    Typography, withStyles\n} from \"@material-ui/core\";\nimport { Link as RouterLink } from 'react-router-dom';\nimport {Copyright} from \"./Copyright\";\nimport {withRouter} from \"react-router-dom\";\n\n\n\nclass Restore extends React.Component{\n\n    routingFunction = () => {\n        this.props.history.push(\"/login\");\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            login:\"\",\n            wrongLogin:false,\n            wrongCode:false,\n            codeSend:false,\n            code:\"\",\n            codeConfirm:false,\n            password:\"\",\n            emptyPass:false,\n            passwordRepeat:\"\",\n            wrongPass:false\n        };\n        this.handleInputChange = this.handleInputChange.bind(this);\n        this.handleSubmitLogin = this.handleSubmitLogin.bind(this);\n        this.handleSubmitCode = this.handleSubmitCode.bind(this);\n        this.handleSubmitPass = this.handleSubmitPass.bind(this);\n    }\n\n    handleInputChange(event) {\n        const target = event.target;\n        const value = target.value;\n        const name = target.name;\n\n        this.setState({\n            [name]: value,\n            wrongLogin:false\n        });\n    }\n\n    handleSubmitLogin(e){\n        e.preventDefault();\n        const requestOptions = {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: \"login=\"+this.state.login\n        };\n        fetch(\"https://rp-ruler.ru/api/restore_send.php\",requestOptions)\n            .then(response => response.json())\n            .then((data)=>{\n                if(data[\"success\"] == 1){\n                    this.setState({codeSend:true,wrongLogin:false});\n                }else{\n                    this.setState({wrongLogin:true});\n                }\n            })\n    }\n    handleSubmitCode(e){\n        e.preventDefault();\n        const requestOptions = {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: \"login=\"+this.state.login+\"&code=\"+this.state.code\n        };\n        fetch(\"https://rp-ruler.ru/api/restore_code_check.php\",requestOptions)\n            .then(response => response.json())\n            .then((data)=>{\n                if(data[\"correct\"] == 1){\n                    this.setState({codeConfirm:true,wrongCode:false});\n                }else{\n                    this.setState({wrongCode:true});\n                }\n            })\n    }\n    handleSubmitPass(e){\n        e.preventDefault();\n        if(this.state.password.length < 6){\n            this.setState({emptyPass:true});\n            return;\n        }\n        if(this.state.password != this.state.passwordRepeat){\n            this.setState({wrongPass:true});\n            return;\n        }\n        const requestOptions = {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: \"login=\"+this.state.login+\"&code=\"+this.state.code+\"&pass=\"+this.state.password\n        };\n        fetch(\"https://rp-ruler.ru/api/restore.php\",requestOptions)\n            .then(response => response.json())\n            .then((data)=>{\n                if(data[\"success\"] == 1){\n                    this.setState({wrongPass:false});\n                    this.routingFunction();\n                }\n            })\n    }\n\n    render() {\n        const {classes} = this.props;\n        if(!this.state.codeSend){\n            return(<Grid container justify=\"center\">\n                <CssBaseline />\n                <Paper elevation={6} className={classes.paper} item>\n                    <Typography component=\"h1\" variant=\"h5\">\n                        Восстановление пароля. Снова...\n                    </Typography>\n                    <form className={classes.form} noValidate\n                          onSubmit={this.handleSubmitLogin} >\n                        <TextField\n                            variant=\"outlined\"\n                            margin=\"normal\"\n                            error={this.state.wrongLogin}\n                            required\n                            fullWidth\n                            id=\"login\"\n                            label=\"Логин или E-mail\"\n                            name=\"login\"\n                            helperText={this.state.wrongLogin ? \"Пользователь не найден\" : \"\"}\n                            autoComplete=\"login\"\n                            onChange = {this.handleInputChange}\n                            value={this.state.login}\n                            autoFocus\n                        />\n                        <Button\n                            type=\"submit\"\n                            fullWidth\n                            variant=\"contained\"\n                            color=\"primary\"\n                            className={classes.submit}\n                        >\n                            Отправить письмо\n                        </Button>\n                        <Grid container>\n                            <Grid item xs>\n                                <Link href=\"#\" variant=\"body2\" to=\"/login\" component={RouterLink}>\n                                    Войти\n                                </Link>\n                            </Grid>\n                            <Grid item>\n                                <Link to=\"/registration\" component={RouterLink} variant=\"body2\">\n                                    Зарегистрироваться\n                                </Link>\n                            </Grid>\n                        </Grid>\n                    </form>\n                    <Box mt={8}>\n                        <Copyright />\n                    </Box>\n                </Paper>\n\n            </Grid>);\n\n        }else if(!this.state.codeConfirm){\n\n            return(<Grid container justify=\"center\">\n                <CssBaseline />\n                <Paper elevation={6} className={classes.paper} item>\n                    <Typography component=\"h1\" variant=\"h5\">\n                        Восстановление пароля. Снова...\n                    </Typography>\n                    <form className={classes.form} noValidate\n                          onSubmit={this.handleSubmitCode} >\n                        <TextField\n                            variant=\"outlined\"\n                            margin=\"normal\"\n                            error={this.state.wrongCode}\n                            required\n                            fullWidth\n                            id=\"code\"\n                            label=\"Код из письма\"\n                            name=\"code\"\n                            autoComplete=\"false\"\n                            helperText={this.state.wrongCode ? \"Неверный код\" : \"\"}\n                            onChange = {this.handleInputChange}\n                            value={this.state.code}\n                            autoFocus\n                        />\n                        <Button\n                            type=\"submit\"\n                            fullWidth\n                            variant=\"contained\"\n                            color=\"primary\"\n                            className={classes.submit}\n                        >\n                            Отправить\n                        </Button>\n                        <Grid container>\n                            <Grid item xs>\n                                <Link href=\"#\" variant=\"body2\" to=\"/login\" component={RouterLink}>\n                                    Войти\n                                </Link>\n                            </Grid>\n                            <Grid item>\n                                <Link to=\"/registration\" component={RouterLink} variant=\"body2\">\n                                    Зарегистрироваться\n                                </Link>\n                            </Grid>\n                        </Grid>\n                    </form>\n                    <Box mt={8}>\n                        <Copyright />\n                    </Box>\n                </Paper>\n\n            </Grid>);\n\n        }else{\n            return(<Grid container justify=\"center\">\n                <CssBaseline />\n                <Paper elevation={6} className={classes.paper} item>\n                    <Typography component=\"h1\" variant=\"h5\">\n                        Восстановление пароля. Снова...\n                    </Typography>\n                    <form className={classes.form} noValidate\n                          onSubmit={this.handleSubmitPass} >\n                        <TextField\n                            variant=\"outlined\"\n                            margin=\"normal\"\n                            required\n                            fullWidth\n                            error={this.state.emptyPass}\n                            helperText={this.state.emptyPass ? \"Слишком короткий пароль\" : \"\"}\n                            id=\"password\"\n                            label=\"Новый пароль\"\n                            name=\"password\"\n                            type=\"password\"\n                            autoComplete=\"password\"\n                            onChange = {this.handleInputChange}\n                            value={this.state.password}\n                            autoFocus\n                        />\n                        <TextField\n                            variant=\"outlined\"\n                            margin=\"normal\"\n                            required\n                            fullWidth\n                            error={this.state.wrongPass}\n                            helperText={this.state.wrongPass ? \"Пароли не совпадают\" : \"\"}\n                            id=\"passwordRepeat\"\n                            label=\"Еще раз, чтобы не забыл\"\n                            name=\"passwordRepeat\"\n                            type=\"password\"\n                            autoComplete=\"password\"\n                            onChange = {this.handleInputChange}\n                            value={this.state.passwordRepeat}\n                        />\n                        <Button\n                            type=\"submit\"\n                            fullWidth\n                            variant=\"contained\"\n                            color=\"primary\"\n                            className={classes.submit}\n                        >\n                            Поменять пароль\n                        </Button>\n                        <Grid container>\n                            <Grid item xs>\n                                <Link href=\"#\" variant=\"body2\" to=\"/login\" component={RouterLink}>\n                                    Войти\n                                </Link>\n                            </Grid>\n                            <Grid item>\n                                <Link to=\"/registration\" component={RouterLink} variant=\"body2\">\n                                    Зарегистрироваться\n                                </Link>\n                            </Grid>\n                        </Grid>\n                    </form>\n                    <Box mt={8}>\n                        <Copyright />\n                    </Box>\n                </Paper>\n\n            </Grid>);\n        }\n\n\n    }\n}\n\n\n\nRestore.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nconst styles = {\n    paper: {\n        marginTop: \"160px\",\n        padding:\"60px\",\n        width:\"500px\",\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n    },\n    form: {\n        width: '100%', // Fix IE 11 issue.\n        marginTop: \"10px\",\n    },\n    submit: {\n        margin: \"30px 0 20px\",\n    },\n};\n\n\nexport default withStyles(styles)(withRouter(Restore));","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\AddServerDialog.js",["198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217"],"C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\DialogTitleWithClose.js",[],"C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\AddRoomDialog.js",["218","219","220","221","222"],"import * as React from \"react\";\nimport TokenContext from \"./AppContext\";\nimport {\n    Button,\n    Dialog,\n    DialogContent,\n    FormControlLabel,\n    Grid,\n    Icon,\n    Switch,\n    TextField, Typography,\n    withStyles\n} from \"@material-ui/core\";\nimport DialogTitleWithClose from \"./DialogTitleWithClose\";\nimport Api from \"./Api\";\nimport Utils from \"./Utils\";\n\n\nclass AddRoomDialog extends React.Component {\n    static contextType = TokenContext;\n\n    constructor(props) {\n        super(props);\n        this.icons = [\"chat\",\"chat_bubble\",\"chat_bubble_outline\",\"bookmark\",\"change_history\",\"child_care\",\"child_friendly\",\"code\",\"directions_run\",\"directions_walk\",\"drafts\",\n        \"eco\",\"emoji_flags\",\"emoji_food_beverage\",\"explore\",\"favorite\",\"favorite_border\",\"fireplace\",\"grade\",\"group\",\"person\",\"home\",\"monetization_on\",\"question_answer\",\"school\",\n            \"smoking_rooms\",\"spa\",\"terrain\",\"waves\",\"work\"];\n        this.state = {\n            name: this.props.name,\n            bg:this.props.bg == null || this.props.bg === \"null\" ? null : this.props.bg,\n            isNameError:\"\",\n            icon:this.props.icon ?? \"chat\",\n            description:this.props.description\n        }\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleFileUploaded = this.handleFileUploaded.bind(this);\n\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.bg !== this.props.bg) {\n            this.setState({bg:this.props.bg == null || this.props.bg === \"null\" ? null : this.props.bg})\n        }\n        if (prevProps.name !== this.props.name) {\n            this.setState({name:this.props.name});\n        }\n        if (prevProps.description !== this.props.description) {\n            this.setState({description:this.props.description});\n        }\n        if (prevProps.icon !== this.props.icon) {\n            this.setState({icon:this.props.icon});\n        }\n    }\n    handleSubmit(){\n        if(this.state.name == null || this.state.name.length === 0){\n            this.setState({isNameError:\"Введите название\"});\n            return;\n        }\n        if(this.state.name.length > 35){\n            this.setState({isNameError:\"Максимальная длина - 35 символов\"});\n            return;\n        }\n        let desc = this.state.description == null ? \"\" : this.state.description;\n        if(this.props.roomId == null){\n            Api.addRoom(this.context.token,this.props.serverId,this.state.name,desc,this.state.icon,this.state.bg).then((data)=>{\n                this.props.onCreate();\n                this.props.onClose();\n            })\n        }else{\n            Api.editRoom(this.context.token,this.props.serverId,this.props.roomId,this.state.name,desc,this.state.icon,this.state.bg).then((data)=>{\n                this.props.onCreate();\n                this.props.onClose();\n            })\n        }\n    }\n    handleFileUploaded(event){\n\n        if(event.target.files != null && event.target.files.length != 0){\n            let file = event.target.files[0];\n            Api.uploadFile(this.context.token,file).then((data)=>{\n                this.setState({bg:data.filename});\n            })\n        }\n\n    }\n\n    render() {\n        const {classes} = this.props;\n        let title = this.props.roomId == null ? \"Добавление комнаты\" :  \"Редактирование комнаты\";\n        let btnText = this.props.roomId == null ? \"Добавить комнату\" :  \"Сохранить\";\n        return (<Dialog maxWidth=\"sm\" fullWidth open={this.props.open} onClose={this.props.onClose}\n                        aria-labelledby=\"form-dialog-title\">\n            <DialogTitleWithClose id=\"customized-dialog-title\" onClose={this.props.onClose}>\n                {title}\n            </DialogTitleWithClose>\n            <DialogContent dividers>\n                <Grid container alignItems=\"center\" direction=\"column\">\n                    {this.state.bg != null ? <img className={classes.bg} src={Utils.uploadDir+this.state.bg}/>:\"\"}\n                    <br/>\n                    <input onChange={this.handleFileUploaded} name=\"bg\" accept=\"image/*\" className={classes.inputFile} id=\"bg-file\" type=\"file\"/>\n                    <label htmlFor=\"bg-file\">\n                        {this.state.bg == null ?\n                        <Button variant=\"contained\" color=\"primary\" component=\"span\">\n                            Загрузить фон комнаты.\n                        </Button> : \"\"}\n                    </label>\n                </Grid>\n                {this.state.bg != null ? <Grid container alignItems=\"center\" direction=\"column\">\n                    <Button onClick={() => this.setState({bg:null})} variant=\"contained\" color=\"primary\" component=\"span\">\n                        Удалить фон комнаты.\n                    </Button>\n                </Grid> : \"\"}\n\n                <TextField\n                    variant=\"outlined\"\n                    margin=\"normal\"\n                    required\n                    fullWidth\n                    helperText={this.state.isNameError}\n                    error={this.state.isNameError.length != 0}\n                    onChange={(e)=>this.setState({name:e.target.value})}\n                    label=\"Название комнаты\"\n                    autoFocus\n                    value={this.state.name}\n                />\n\n                <TextField\n                    variant=\"outlined\"\n                    margin=\"normal\"\n                    fullWidth\n                    multiline\n                    rows={3}\n                    onChange={(e)=>this.setState({description:e.target.value})}\n                    label=\"Описание комнаты\"\n                    autoFocus\n                    value={this.state.description}\n                />\n                <br/><br/>\n                <Typography>Иконка комнаты</Typography><br/>\n                <Grid container justify=\"center\" >\n                    {this.icons.map((icon) => {\n                        return <Button onClick={() => this.setState({icon:icon})} variant={icon===this.state.icon ? \"contained\" : \"\"} className={classes.iconButton}><Icon>{icon}</Icon></Button>\n                    })}\n                </Grid>\n                <br/>\n                <Grid container justify=\"center\">\n                    <Button variant=\"contained\" color=\"primary\" onClick={this.handleSubmit} component=\"span\">\n                        {btnText}\n                    </Button>\n                </Grid>\n            </DialogContent>\n        </Dialog>)\n    }\n}\nconst styles = {\n    iconButton:{\n        width:'25px',\n\n    },\n    inputFile:{\n        display: 'none',\n    },\n    bg:{\n        \"max-width\":\"200px\"\n    },\n\n};\n\nexport default withStyles(styles)(AddRoomDialog);","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\StyledBadge.js",[],"C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\AddCategoryDialog.js",["223","224","225","226","227"],"import * as React from \"react\";\r\nimport TokenContext from \"./AppContext\";\r\nimport {Button, Dialog, DialogContent, FormControlLabel, Grid, Switch, TextField, withStyles} from \"@material-ui/core\";\r\nimport DialogTitleWithClose from \"./DialogTitleWithClose\";\r\nimport Api from \"./Api\";\r\n\r\nclass AddRoomDialog extends React.Component {\r\n    static contextType = TokenContext;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            name: this.props.name,\r\n            isNameError:\"\",\r\n        }\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.name !== this.props.name) {\r\n            this.setState({name:this.props.name});\r\n        }\r\n    }\r\n    handleSubmit(){\r\n        if(this.state.name == null || this.state.name.length == 0){\r\n            this.setState({isNameError:\"Введите название\"});\r\n            return;\r\n        }\r\n        if(this.state.name.length > 35){\r\n            this.setState({isNameError:\"Максимальная длина - 35 символов\"});\r\n            return;\r\n        }\r\n        if(this.props.categoryId == null) {\r\n            Api.addCategory(this.context.token, this.state.name, this.props.serverId).then((data) => {\r\n                this.props.onCreate();\r\n                this.props.onClose();\r\n            })\r\n        }else{\r\n            Api.editCategory(this.context.token,this.state.name,this.props.categoryId).then((data)=>{\r\n                this.props.onCreate();\r\n                this.props.onClose();\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        const {classes} = this.props;\r\n        const title = this.props.categoryId == null ? \"Добавление категории\" : \"Редактирование категории\";\r\n        return (<Dialog maxWidth=\"sm\" fullWidth open={this.props.open} onClose={this.props.onClose}\r\n                        aria-labelledby=\"form-dialog-title\">\r\n            <DialogTitleWithClose id=\"customized-dialog-title\" onClose={this.props.onClose}>\r\n                {title}\r\n            </DialogTitleWithClose>\r\n            <DialogContent dividers>\r\n\r\n                <TextField\r\n                    variant=\"outlined\"\r\n                    margin=\"normal\"\r\n                    required\r\n                    fullWidth\r\n                    helperText={this.state.isNameError}\r\n                    error={this.state.isNameError.length != 0}\r\n                    onChange={(e)=>this.setState({name:e.target.value,isNameError:\"\"})}\r\n                    label=\"Название категории\"\r\n                    autoFocus\r\n                    value={this.state.name}\r\n                />\r\n\r\n                <Grid container justify=\"center\">\r\n                    <Button variant=\"contained\" color=\"primary\" onClick={this.handleSubmit} component=\"span\">\r\n                        Сохранить\r\n                    </Button>\r\n                </Grid>\r\n            </DialogContent>\r\n        </Dialog>)\r\n    }\r\n}\r\nconst styles = {\r\n    inputFile:{\r\n        display: 'none',\r\n    },\r\n    bg:{\r\n        \"max-width\":\"200px\"\r\n    },\r\n\r\n};\r\n\r\nexport default withStyles(styles)(AddRoomDialog);","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\Utils.js",[],"C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\Api.js",["228"],"C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\AddCharacterDialog.js",["229","230","231","232","233","234","235","236","237"],"C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\CharactersListDialog.js",["238","239","240","241","242","243"],{"ruleId":"244","replacedBy":"245"},{"ruleId":"246","replacedBy":"247"},{"ruleId":"248","severity":1,"message":"249","line":1,"column":8,"nodeType":"250","messageId":"251","endLine":1,"endColumn":15},{"ruleId":"252","severity":1,"message":"253","line":49,"column":56,"nodeType":"254","messageId":"255","endLine":49,"endColumn":58},{"ruleId":"252","severity":1,"message":"253","line":78,"column":33,"nodeType":"254","messageId":"255","endLine":78,"endColumn":35},{"ruleId":"248","severity":1,"message":"256","line":189,"column":9,"nodeType":"250","messageId":"251","endLine":189,"endColumn":20},{"ruleId":"248","severity":1,"message":"257","line":5,"column":5,"nodeType":"250","messageId":"251","endLine":5,"endColumn":14},{"ruleId":"248","severity":1,"message":"257","line":5,"column":5,"nodeType":"250","messageId":"251","endLine":5,"endColumn":14},{"ruleId":"248","severity":1,"message":"258","line":7,"column":5,"nodeType":"250","messageId":"251","endLine":7,"endColumn":21},{"ruleId":"248","severity":1,"message":"259","line":15,"column":8,"nodeType":"250","messageId":"251","endLine":15,"endColumn":19},{"ruleId":"252","severity":1,"message":"260","line":101,"column":64,"nodeType":"254","messageId":"255","endLine":101,"endColumn":66},{"ruleId":"252","severity":1,"message":"260","line":115,"column":63,"nodeType":"254","messageId":"255","endLine":115,"endColumn":65},{"ruleId":"252","severity":1,"message":"260","line":129,"column":67,"nodeType":"254","messageId":"255","endLine":129,"endColumn":69},{"ruleId":"261","severity":1,"message":"262","line":75,"column":17,"nodeType":"263","endLine":75,"endColumn":27},{"ruleId":"261","severity":1,"message":"262","line":76,"column":17,"nodeType":"263","endLine":76,"endColumn":27},{"ruleId":"252","severity":1,"message":"253","line":129,"column":47,"nodeType":"254","messageId":"255","endLine":129,"endColumn":49},{"ruleId":"252","severity":1,"message":"260","line":182,"column":27,"nodeType":"254","messageId":"255","endLine":182,"endColumn":29},{"ruleId":"252","severity":1,"message":"260","line":229,"column":34,"nodeType":"254","messageId":"255","endLine":229,"endColumn":36},{"ruleId":"252","severity":1,"message":"260","line":290,"column":29,"nodeType":"254","messageId":"255","endLine":290,"endColumn":31},{"ruleId":"252","severity":1,"message":"253","line":381,"column":52,"nodeType":"254","messageId":"255","endLine":381,"endColumn":54},{"ruleId":"252","severity":1,"message":"253","line":385,"column":55,"nodeType":"254","messageId":"255","endLine":385,"endColumn":57},{"ruleId":"248","severity":1,"message":"264","line":2,"column":17,"nodeType":"250","messageId":"251","endLine":2,"endColumn":23},{"ruleId":"248","severity":1,"message":"265","line":3,"column":9,"nodeType":"250","messageId":"251","endLine":3,"endColumn":22},{"ruleId":"248","severity":1,"message":"266","line":10,"column":8,"nodeType":"250","messageId":"251","endLine":10,"endColumn":17},{"ruleId":"252","severity":1,"message":"253","line":52,"column":41,"nodeType":"254","messageId":"255","endLine":52,"endColumn":43},{"ruleId":"248","severity":1,"message":"267","line":22,"column":18,"nodeType":"250","messageId":"251","endLine":22,"endColumn":25},{"ruleId":"252","severity":1,"message":"253","line":106,"column":71,"nodeType":"254","messageId":"255","endLine":106,"endColumn":73},{"ruleId":"248","severity":1,"message":"268","line":11,"column":82,"nodeType":"250","messageId":"251","endLine":11,"endColumn":88},{"ruleId":"248","severity":1,"message":"269","line":18,"column":8,"nodeType":"250","messageId":"251","endLine":18,"endColumn":20},{"ruleId":"252","severity":1,"message":"260","line":51,"column":67,"nodeType":"254","messageId":"255","endLine":51,"endColumn":69},{"ruleId":"248","severity":1,"message":"270","line":4,"column":13,"nodeType":"250","messageId":"251","endLine":4,"endColumn":23},{"ruleId":"248","severity":1,"message":"271","line":4,"column":25,"nodeType":"250","messageId":"251","endLine":4,"endColumn":39},{"ruleId":"248","severity":1,"message":"272","line":7,"column":35,"nodeType":"250","messageId":"251","endLine":7,"endColumn":45},{"ruleId":"252","severity":1,"message":"253","line":98,"column":32,"nodeType":"254","messageId":"255","endLine":98,"endColumn":34},{"ruleId":"252","severity":1,"message":"260","line":99,"column":27,"nodeType":"254","messageId":"255","endLine":99,"endColumn":29},{"ruleId":"252","severity":1,"message":"253","line":99,"column":57,"nodeType":"254","messageId":"255","endLine":99,"endColumn":59},{"ruleId":"252","severity":1,"message":"260","line":102,"column":21,"nodeType":"254","messageId":"255","endLine":102,"endColumn":23},{"ruleId":"252","severity":1,"message":"253","line":102,"column":51,"nodeType":"254","messageId":"255","endLine":102,"endColumn":53},{"ruleId":"252","severity":1,"message":"260","line":120,"column":25,"nodeType":"254","messageId":"255","endLine":120,"endColumn":27},{"ruleId":"252","severity":1,"message":"253","line":120,"column":55,"nodeType":"254","messageId":"255","endLine":120,"endColumn":57},{"ruleId":"252","severity":1,"message":"260","line":121,"column":25,"nodeType":"254","messageId":"255","endLine":121,"endColumn":27},{"ruleId":"252","severity":1,"message":"253","line":121,"column":55,"nodeType":"254","messageId":"255","endLine":121,"endColumn":57},{"ruleId":"252","severity":1,"message":"253","line":140,"column":73,"nodeType":"254","messageId":"255","endLine":140,"endColumn":75},{"ruleId":"248","severity":1,"message":"273","line":2,"column":9,"nodeType":"250","messageId":"251","endLine":2,"endColumn":14},{"ruleId":"248","severity":1,"message":"274","line":10,"column":26,"nodeType":"250","messageId":"251","endLine":10,"endColumn":34},{"ruleId":"252","severity":1,"message":"260","line":119,"column":68,"nodeType":"254","messageId":"255","endLine":119,"endColumn":70},{"ruleId":"248","severity":1,"message":"275","line":3,"column":17,"nodeType":"250","messageId":"251","endLine":3,"endColumn":22},{"ruleId":"252","severity":1,"message":"253","line":56,"column":57,"nodeType":"254","messageId":"255","endLine":56,"endColumn":59},{"ruleId":"252","severity":1,"message":"260","line":73,"column":86,"nodeType":"254","messageId":"255","endLine":73,"endColumn":88},{"ruleId":"248","severity":1,"message":"276","line":9,"column":5,"nodeType":"250","messageId":"251","endLine":9,"endColumn":9},{"ruleId":"277","severity":1,"message":"278","line":25,"column":40,"nodeType":"279","messageId":"280","endLine":25,"endColumn":42},{"ruleId":"248","severity":1,"message":"281","line":2,"column":17,"nodeType":"250","messageId":"251","endLine":2,"endColumn":21},{"ruleId":"248","severity":1,"message":"257","line":5,"column":5,"nodeType":"250","messageId":"251","endLine":5,"endColumn":14},{"ruleId":"252","severity":1,"message":"253","line":68,"column":36,"nodeType":"254","messageId":"255","endLine":68,"endColumn":38},{"ruleId":"252","severity":1,"message":"253","line":87,"column":36,"nodeType":"254","messageId":"255","endLine":87,"endColumn":38},{"ruleId":"252","severity":1,"message":"260","line":100,"column":32,"nodeType":"254","messageId":"255","endLine":100,"endColumn":34},{"ruleId":"252","severity":1,"message":"253","line":114,"column":36,"nodeType":"254","messageId":"255","endLine":114,"endColumn":38},{"ruleId":"248","severity":1,"message":"282","line":34,"column":5,"nodeType":"250","messageId":"251","endLine":34,"endColumn":21},{"ruleId":"248","severity":1,"message":"283","line":35,"column":5,"nodeType":"250","messageId":"251","endLine":35,"endColumn":18},{"ruleId":"248","severity":1,"message":"284","line":36,"column":5,"nodeType":"250","messageId":"251","endLine":36,"endColumn":27},{"ruleId":"248","severity":1,"message":"285","line":40,"column":21,"nodeType":"250","messageId":"251","endLine":40,"endColumn":31},{"ruleId":"248","severity":1,"message":"286","line":44,"column":9,"nodeType":"250","messageId":"251","endLine":44,"endColumn":15},{"ruleId":"252","severity":1,"message":"253","line":82,"column":46,"nodeType":"254","messageId":"255","endLine":82,"endColumn":48},{"ruleId":"252","severity":1,"message":"253","line":139,"column":46,"nodeType":"254","messageId":"255","endLine":139,"endColumn":48},{"ruleId":"252","severity":1,"message":"260","line":158,"column":31,"nodeType":"254","messageId":"255","endLine":158,"endColumn":33},{"ruleId":"252","severity":1,"message":"260","line":186,"column":44,"nodeType":"254","messageId":"255","endLine":186,"endColumn":46},{"ruleId":"252","severity":1,"message":"260","line":215,"column":68,"nodeType":"254","messageId":"255","endLine":215,"endColumn":70},{"ruleId":"252","severity":1,"message":"253","line":218,"column":37,"nodeType":"254","messageId":"255","endLine":218,"endColumn":39},{"ruleId":"252","severity":1,"message":"253","line":237,"column":35,"nodeType":"254","messageId":"255","endLine":237,"endColumn":37},{"ruleId":"261","severity":1,"message":"262","line":307,"column":61,"nodeType":"263","endLine":307,"endColumn":71},{"ruleId":"252","severity":1,"message":"253","line":310,"column":133,"nodeType":"254","messageId":"255","endLine":310,"endColumn":135},{"ruleId":"287","severity":1,"message":"288","line":340,"column":46,"nodeType":"289","endLine":340,"endColumn":111},{"ruleId":"252","severity":1,"message":"260","line":365,"column":58,"nodeType":"254","messageId":"255","endLine":365,"endColumn":60},{"ruleId":"252","severity":1,"message":"253","line":464,"column":87,"nodeType":"254","messageId":"255","endLine":464,"endColumn":89},{"ruleId":"252","severity":1,"message":"253","line":467,"column":99,"nodeType":"254","messageId":"255","endLine":467,"endColumn":101},{"ruleId":"252","severity":1,"message":"253","line":488,"column":79,"nodeType":"254","messageId":"255","endLine":488,"endColumn":81},{"ruleId":"252","severity":1,"message":"253","line":492,"column":91,"nodeType":"254","messageId":"255","endLine":492,"endColumn":93},{"ruleId":"248","severity":1,"message":"258","line":7,"column":5,"nodeType":"250","messageId":"251","endLine":7,"endColumn":21},{"ruleId":"248","severity":1,"message":"290","line":10,"column":5,"nodeType":"250","messageId":"251","endLine":10,"endColumn":11},{"ruleId":"252","severity":1,"message":"260","line":76,"column":68,"nodeType":"254","messageId":"255","endLine":76,"endColumn":70},{"ruleId":"287","severity":1,"message":"288","line":96,"column":46,"nodeType":"289","endLine":96,"endColumn":111},{"ruleId":"252","severity":1,"message":"260","line":118,"column":58,"nodeType":"254","messageId":"255","endLine":118,"endColumn":60},{"ruleId":"248","severity":1,"message":"258","line":3,"column":40,"nodeType":"250","messageId":"251","endLine":3,"endColumn":56},{"ruleId":"248","severity":1,"message":"290","line":3,"column":64,"nodeType":"250","messageId":"251","endLine":3,"endColumn":70},{"ruleId":"252","severity":1,"message":"253","line":24,"column":62,"nodeType":"254","messageId":"255","endLine":24,"endColumn":64},{"ruleId":"248","severity":1,"message":"291","line":47,"column":16,"nodeType":"250","messageId":"251","endLine":47,"endColumn":23},{"ruleId":"252","severity":1,"message":"260","line":62,"column":58,"nodeType":"254","messageId":"255","endLine":62,"endColumn":60},{"ruleId":"248","severity":1,"message":"292","line":1,"column":8,"nodeType":"250","messageId":"251","endLine":1,"endColumn":18},{"ruleId":"252","severity":1,"message":"253","line":39,"column":62,"nodeType":"254","messageId":"255","endLine":39,"endColumn":64},{"ruleId":"252","severity":1,"message":"253","line":43,"column":60,"nodeType":"254","messageId":"255","endLine":43,"endColumn":62},{"ruleId":"252","severity":1,"message":"253","line":51,"column":72,"nodeType":"254","messageId":"255","endLine":51,"endColumn":74},{"ruleId":"252","severity":1,"message":"253","line":55,"column":66,"nodeType":"254","messageId":"255","endLine":55,"endColumn":68},{"ruleId":"252","severity":1,"message":"253","line":73,"column":56,"nodeType":"254","messageId":"255","endLine":73,"endColumn":58},{"ruleId":"252","severity":1,"message":"253","line":153,"column":46,"nodeType":"254","messageId":"255","endLine":153,"endColumn":48},{"ruleId":"252","severity":1,"message":"253","line":165,"column":46,"nodeType":"254","messageId":"255","endLine":165,"endColumn":48},{"ruleId":"252","severity":1,"message":"253","line":166,"column":46,"nodeType":"254","messageId":"255","endLine":166,"endColumn":48},{"ruleId":"252","severity":1,"message":"260","line":171,"column":46,"nodeType":"254","messageId":"255","endLine":171,"endColumn":48},{"ruleId":"248","severity":1,"message":"293","line":3,"column":40,"nodeType":"250","messageId":"251","endLine":3,"endColumn":44},{"ruleId":"248","severity":1,"message":"294","line":3,"column":46,"nodeType":"250","messageId":"251","endLine":3,"endColumn":54},{"ruleId":"248","severity":1,"message":"295","line":7,"column":24,"nodeType":"250","messageId":"251","endLine":7,"endColumn":33},{"ruleId":"252","severity":1,"message":"253","line":28,"column":49,"nodeType":"254","messageId":"255","endLine":28,"endColumn":51},{"ruleId":"252","severity":1,"message":"253","line":31,"column":47,"nodeType":"254","messageId":"255","endLine":31,"endColumn":49},{"ruleId":"248","severity":1,"message":"291","line":76,"column":16,"nodeType":"250","messageId":"251","endLine":76,"endColumn":23},"no-native-reassign",["296"],"no-negated-in-lhs",["297"],"no-unused-vars","'Cookies' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'contextType' is assigned a value but never used.","'Container' is defined but never used.","'FormControlLabel' is defined but never used.","'ParticlesBg' is defined but never used.","Expected '!==' and instead saw '!='.","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","'Dialog' is defined but never used.","'AssignmentInd' is defined but never used.","'UsersList' is defined but never used.","'reorder' is defined but never used.","'Remove' is defined but never used.","'AddCharacter' is defined but never used.","'IconButton' is defined but never used.","'LinearProgress' is defined but never used.","'Typography' is defined but never used.","'Paper' is defined but never used.","'Snackbar' is defined but never used.","'Badge' is defined but never used.","'List' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'Fade' is defined but never used.","'reorderImmutable' is defined but never used.","'reorderFromTo' is defined but never used.","'reorderFromToImmutable' is defined but never used.","'deepPurple' is defined but never used.","'number' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Switch' is defined but never used.","'classes' is assigned a value but never used.","'AppContext' is defined but never used.","'Menu' is defined but never used.","'MenuItem' is defined but never used.","'ExitToApp' is defined but never used.","no-global-assign","no-unsafe-negation"]