[{"C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\index.js":"1","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\App.js":"2","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\reportWebVitals.js":"3","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\Auth.js":"4","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\Copyright.js":"5","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\Reg.js":"6","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\Chat.js":"7","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\MainMenu.js":"8","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\AppContext.js":"9","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\RoomsList.js":"10","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\ServerName.js":"11","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\RoomAppBar.js":"12","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\Messages.js":"13","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\InputReplyMessage.js":"14","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\ProfileDialog.js":"15","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\UsersList.js":"16","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\FormDialog.js":"17","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\ServersDialog.js":"18","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\ServerCard.js":"19","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\UserPopover.js":"20","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\Emoji.js":"21","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\Restore.js":"22","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\AddServerDialog.js":"23","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\DialogTitleWithClose.js":"24","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\AddRoomDialog.js":"25","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\StyledBadge.js":"26","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\AddCategoryDialog.js":"27","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\Utils.js":"28"},{"size":503,"mtime":1616679610000,"results":"29","hashOfConfig":"30"},{"size":6310,"mtime":1619207826382,"results":"31","hashOfConfig":"30"},{"size":362,"mtime":1616679610000,"results":"32","hashOfConfig":"30"},{"size":5064,"mtime":1616679610000,"results":"33","hashOfConfig":"30"},{"size":405,"mtime":1616679610000,"results":"34","hashOfConfig":"30"},{"size":6968,"mtime":1616679610000,"results":"35","hashOfConfig":"30"},{"size":23166,"mtime":1619453291450,"results":"36","hashOfConfig":"30"},{"size":3392,"mtime":1619276023163,"results":"37","hashOfConfig":"30"},{"size":264,"mtime":1616679610000,"results":"38","hashOfConfig":"30"},{"size":14280,"mtime":1619453620552,"results":"39","hashOfConfig":"30"},{"size":9041,"mtime":1619453429517,"results":"40","hashOfConfig":"30"},{"size":2717,"mtime":1619275162702,"results":"41","hashOfConfig":"30"},{"size":7539,"mtime":1619274002300,"results":"42","hashOfConfig":"30"},{"size":1358,"mtime":1616679610000,"results":"43","hashOfConfig":"30"},{"size":14655,"mtime":1616679610000,"results":"44","hashOfConfig":"30"},{"size":3402,"mtime":1619274145535,"results":"45","hashOfConfig":"30"},{"size":1754,"mtime":1616679610000,"results":"46","hashOfConfig":"30"},{"size":7361,"mtime":1619275302517,"results":"47","hashOfConfig":"30"},{"size":2765,"mtime":1616679610000,"results":"48","hashOfConfig":"30"},{"size":4176,"mtime":1619274145532,"results":"49","hashOfConfig":"30"},{"size":3105,"mtime":1616679610000,"results":"50","hashOfConfig":"30"},{"size":12174,"mtime":1619457167335,"results":"51","hashOfConfig":"30"},{"size":29979,"mtime":1619275516876,"results":"52","hashOfConfig":"30"},{"size":1077,"mtime":1617101286000,"results":"53","hashOfConfig":"30"},{"size":6790,"mtime":1617736619934,"results":"54","hashOfConfig":"30"},{"size":826,"mtime":1616679610000,"results":"55","hashOfConfig":"30"},{"size":3124,"mtime":1619216975477,"results":"56","hashOfConfig":"30"},{"size":435,"mtime":1619275138451,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"kco36v",{"filePath":"61","messages":"62","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"60"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"60"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"60"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"76","messages":"77","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"60"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"83","messages":"84","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"60"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"60"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"60"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"60"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"60"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"60"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"60"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"60"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"115","messages":"116","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"60"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"60"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"60"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\index.js",[],["130","131"],"C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\App.js",["132","133","134"],"import Cookies from 'universal-cookie';\nimport './App.css';\nimport * as React from \"react\";\nimport Auth from \"./Auth\";\nimport Reg from \"./Reg\";\nimport Chat from \"./Chat\";\nimport {createMuiTheme} from \"@material-ui/core\";\nimport {ThemeProvider} from \"@material-ui/core\";\nimport {Route, Switch, Redirect} from \"react-router\";\nimport {BrowserRouter as Router} from \"react-router-dom\";\nimport TokenContext from \"./AppContext\";\nimport Restore from \"./Restore\";\nimport ParticlesBg from \"particles-bg\";\n\n\n\nexport class App extends React.Component{\n\n    constructor(props) {\n        super(props);\n        let darkTheme = createMuiTheme({\n            palette: {\n                type: 'dark',\n                primary: {\n                    main: \"#ff5722\",\n                },\n                secondary: {\n                    main: \"#ff5722\",\n                },\n            },\n        });\n        let lightTheme = createMuiTheme({\n            palette: {\n                type: 'light',\n                primary: {\n                    main: \"#ff5722\",\n                },\n                secondary: {\n                    main: \"#ff5722\",\n                },\n            },\n        });\n\n\n\n\n\n        const cookies = new Cookies();\n        const token = cookies.get(\"token\");\n        const user_id = cookies.get(\"user_id\");\n        const user_type = cookies.get(\"user_type\");\n        const isDarkTheme = cookies.get(\"is_dark_theme\") == \"1\";\n        this.handleLogin = this.handleLogin.bind(this);\n        this.toggleTheme = this.toggleTheme.bind(this);\n        this.logout = this.logout.bind(this);\n        this.state = {\n            token:token,\n            user_id:user_id,\n            user_type:user_type,\n            isDarkTheme:isDarkTheme,\n            toggleTheme:this.toggleTheme,\n            logout:this.logout,\n            isAnimationEnable:true,\n            toggleAnimation: () => {this.setState(\n                (state)=>{return {isAnimationEnable:!state.isAnimationEnable}\n                })},\n            theme:isDarkTheme ? darkTheme : lightTheme\n        };\n        if(this.state.token != null){\n            const requestOptions = {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/x-www-form-urlencoded',\n                },\n                body: \"token=\"+this.state.token\n            };\n            fetch(\"https://rp-ruler.ru/api/check_token.php\",requestOptions)\n                .then(response => response.json())\n                .then((data)=>{\n                    if(data[\"correct\"] == 0){\n                        this.logout();\n                    }\n                })\n        }\n\n\n\n    }\n\n    logout(){\n        const cookies = new Cookies();\n        cookies.set(\"token\",null);\n        cookies.set(\"user_id\",null);\n        cookies.set(\"user_type\",null);\n        this.setState({token:null,user_id:null,user_type:null});\n    }\n\n    handleLogin(token,id,user_type){\n        const cookies = new Cookies();\n        cookies.set(\"token\",token);\n        cookies.set(\"user_id\",id);\n        cookies.set(\"user_type\",user_type);\n        this.setState({token:token,user_id:id,user_type:user_type});\n    }\n\n\n\n    toggleTheme () {\n        let darkTheme = createMuiTheme({\n            palette: {\n                type: 'dark',\n                primary: {\n                    main: \"#ff5722\",\n                },\n                secondary: {\n                    main: \"#ff5722\",\n                },\n            },\n        });\n        let lightTheme = createMuiTheme({\n            palette: {\n                type: 'light',\n                primary: {\n                    main: \"#ff5722\",\n                },\n                secondary: {\n                    main: \"#ff5722\",\n                },\n            },\n        });\n        this.setState(state => ({\n            theme:state.isDarkTheme ? lightTheme : darkTheme,\n            isDarkTheme: !state.isDarkTheme\n            }),() => {\n                this.forceUpdate();\n                const cookies = new Cookies();\n                cookies.set(\"is_dark_theme\",this.state.isDarkTheme ? \"1\" : \"0\");\n        }\n        );\n\n    }\n\n\n\n    render() {\n        /*\n        let randIndex = Math.floor(Math.random()*4);\n        let effect = null;\n        switch(randIndex){\n            case 0:\n                effect = <ParticlesBg color=\"#ff5722\" num={200} type=\"cobweb\"  bg={true} />;\n                break;\n            case 1:\n                effect = <ParticlesBg color=\"#303030\" num={200} type=\"lines\"  bg={true} />;\n                break;\n            case 2:\n                effect = <ParticlesBg color=\"#ff5722\" num={20} type=\"fountain\"  bg={true} />;\n                break;\n            case 3:\n                effect = <ParticlesBg color=\"#ff5722\" num={20} type=\"polygon\"  bg={true} />;\n                break;\n        }*/\n        return(\n            <TokenContext.Provider value={this.state}>\n                <ThemeProvider theme={this.state.theme}>\n            <Router>\n                {this.state.isAnimationEnable ? <ParticlesBg color=\"#ff5722\" num={200} type=\"cobweb\"  bg={true} /> : \"\"}\n                <Switch>\n                    <Route path=\"/login\">\n                        <Auth onLogin={this.handleLogin}/>\n                    </Route>\n                    <Route path=\"/registration\">\n                        <Reg onReg={this.handleLogin}/>\n                    </Route>\n                    <Route path=\"/restore\">\n                        <Restore/>\n                    </Route>\n                    <PrivateRoute token={this.state.token} path=\"/\">\n                        <Chat isDarkTheme={this.state.isDarkTheme}/>\n                    </PrivateRoute>\n                </Switch>\n            </Router>\n                </ThemeProvider>\n            </TokenContext.Provider>\n                );\n    }\n}\nfunction PrivateRoute({ children, ...rest }) {\n    let contextType = TokenContext;\n    return (\n        <Route\n            {...rest}\n            render={({ location }) =>\n                rest.token != null ? (\n                    children\n                ) : (\n                    <Redirect\n                        to={{\n                            pathname: \"/login\",\n                            state: { from: location }\n                        }}\n                    />\n                )\n            }\n        />\n    );\n}","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\reportWebVitals.js",[],"C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\Auth.js",["135"],"import * as React from \"react\";\nimport PropTypes from 'prop-types';\nimport {\n    Box, Button,\n    Container,\n    CssBaseline,\n    Grid,\n    Link,\n    TextField,\n    Typography, withStyles,Paper\n} from \"@material-ui/core\";\nimport { Link as RouterLink } from 'react-router-dom';\nimport {Copyright} from \"./Copyright\";\nimport {withRouter} from \"react-router-dom\";\n\n\n\n\n\n\nclass Auth extends React.Component{\n\n    routingFunction = () => {\n        this.props.history.push(\"/\");\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            login:\"\",\n            pass:\"\",\n            wrongLoginPass:false\n        };\n        this.handleInputChange = this.handleInputChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleInputChange(event) {\n        const target = event.target;\n        const value = target.value;\n        const name = target.name;\n\n        this.setState({\n            [name]: value,\n            wrongLoginPass:false\n        });\n    }\n\n    handleSubmit(e){\n        e.preventDefault();\n        const requestOptions = {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: \"login=\"+this.state.login+\"&pass=\"+this.state.pass\n        };\n        fetch(\"https://rp-ruler.ru/api/login.php\",requestOptions)\n            .then(response => response.json())\n            .then((data)=>{\n                if(data[\"token\"] !== undefined){\n                    this.props.onLogin(data[\"token\"],data[\"user_id\"],data[\"user_type\"]);\n                    this.routingFunction();\n                }else if( data[\"error\"] === 1){\n                    this.setState({wrongLoginPass:true});\n                }\n            })\n    }\n\n    render() {\n        const {classes} = this.props;\n\n\n        return(<Grid container justify=\"center\">\n            <CssBaseline />\n\n            <Paper elevation={6} className={classes.paper} item>\n                <Typography component=\"h1\" variant=\"h5\">\n                    Добро пожаловать. Снова.\n                </Typography>\n                <form className={classes.form} noValidate\n                      onSubmit={this.handleSubmit} >\n                    <TextField\n                        variant=\"outlined\"\n                        margin=\"normal\"\n                        error={this.state.wrongLoginPass}\n                        required\n                        fullWidth\n                        id=\"login\"\n                        label=\"Логин или E-mail\"\n                        name=\"login\"\n                        helperText={this.state.wrongLoginPass ? \"Неверный логин или пароль\" : \"\"}\n                        autoComplete=\"login\"\n                        onChange = {this.handleInputChange}\n                        value={this.state.login}\n                        autoFocus\n                    />\n                    <TextField\n                        variant=\"outlined\"\n                        margin=\"normal\"\n                        required\n                        error={this.state.wrongLoginPass}\n                        fullWidth\n                        onChange = {this.handleInputChange}\n                        name=\"pass\"\n                        label=\"Пароль\"\n                        type=\"password\"\n                        value={this.state.password}\n                        id=\"pass\"\n                        autoComplete=\"current-password\"\n                    />\n                    <Button\n                        type=\"submit\"\n                        fullWidth\n                        variant=\"contained\"\n                        color=\"primary\"\n                        className={classes.submit}\n                    >\n                        Войти\n                    </Button>\n\n                    <Grid container>\n                        <Grid item xs>\n                            <Link href=\"#\" variant=\"body2\" to=\"/restore\" component={RouterLink}>\n                                Забыли пароль?\n                            </Link>\n                        </Grid>\n                        <Grid item>\n                            <Link to=\"/registration\" component={RouterLink} variant=\"body2\">\n                                Зарегистрироваться\n                            </Link>\n                        </Grid>\n                    </Grid>\n                </form>\n                <Box mt={8}>\n                    <Copyright />\n                </Box>\n            </Paper>\n\n        </Grid>);\n    }\n}\n\n\n\nAuth.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nconst styles = {\n    paper: {\n        marginTop: \"160px\",\n        padding:\"60px\",\n        width:\"500px\",\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n    },\n    form: {\n        width: '100%', // Fix IE 11 issue.\n        marginTop: \"10px\",\n    },\n    submit: {\n        margin: \"30px 0 20px\",\n    },\n};\n\n\nexport default withStyles(styles)(withRouter(Auth));","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\Copyright.js",[],"C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\Reg.js",["136","137","138","139","140","141","142","143"],"import * as React from \"react\";\nimport {\n    Box,\n    Button,\n    Container,\n    CssBaseline,\n    FormControlLabel,\n    Grid,\n    Link, Paper,\n    TextField,\n    Typography, withStyles\n} from \"@material-ui/core\";\nimport {Copyright} from \"./Copyright\";\nimport {Link as RouterLink, withRouter} from 'react-router-dom';\nimport ParticlesBg from \"particles-bg\";\n\n\n\nclass Reg extends React.Component{\n    routingFunction = () => {\n        this.props.history.push(\"/\");\n    }\n    constructor(props) {\n        super(props);\n        this.state = {\n            login:\"\",\n            pass:\"\",\n            email:\"\",\n            isWrongLogin:\"\",\n            isWrongMail:\"\",\n            isWrongPassword:\"\"\n        };\n        this.handleInputChange = this.handleInputChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n    handleInputChange(event) {\n        const target = event.target;\n        const value = target.value;\n        const name = target.name;\n        this.setState({\n            [name]: value,\n            isWrongLogin:\"\",\n            isWrongMail:\"\",\n            isWrongPassword:\"\"\n        });\n    }\n\n    handleSubmit(e){\n        e.preventDefault();\n        if(this.state.login == \"\"){\n            this.setState({isWrongLogin:\"Введите логин\"});\n            return;\n        }\n        if(this.state.email == \"\"){\n            this.setState({isWrongMail:\"Введите email\"});\n            return;\n        }\n        let re = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n        if( !(re.test(this.state.email.toLowerCase())) ){\n            this.setState({isWrongMail:\"Некорректный email\"});\n            return;\n        }\n        if(this.state.pass.length < 6){\n            this.setState({isWrongPassword:\"Слишком короткий пароль\"});\n            return;\n        }\n\n        const requestOptions = {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: \"login=\"+this.state.login+\"&pass=\"+this.state.pass+\"&email=\"+this.state.email\n        };\n        fetch(\"https://rp-ruler.ru/api/registration.php\",requestOptions)\n            .then(response => response.json())\n            .then((data)=>{\n                if(data[\"token\"] !== undefined){\n                    this.props.onReg(data[\"token\"],data[\"user_id\"],data[\"user_type\"]);\n                    this.routingFunction();\n                }else if( data[\"error\"] === 1){\n                    this.setState({isWrongLogin:\"Логин занят\"});\n                }else if( data[\"error\"] === 2) {\n                    this.setState({isWrongMail:\"Email занят\"});\n                }\n            })\n    }\n\n    render() {\n        const {classes} = this.props;\n        return ( <Grid container justify=\"center\">\n            <CssBaseline />\n\n            <Paper elevation={6} className={classes.paper} item>\n                <Typography component=\"h1\" variant=\"h5\">\n                    Добро пожаловать.\n                </Typography>\n                <form className={classes.form} onSubmit={this.handleSubmit} noValidate>\n                    <Grid container spacing={2}>\n                        <Grid item xs={12} sm={12}>\n                            <TextField\n                                autoComplete=\"login\"\n                                name=\"login\"\n                                variant=\"outlined\"\n                                required\n                                fullWidth\n                                id=\"login\"\n                                error={this.state.isWrongLogin != \"\"}\n                                helperText={this.state.isWrongLogin}\n                                onChange={this.handleInputChange}\n                                label=\"Логин\"\n                                autoFocus\n                            />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <TextField\n                                variant=\"outlined\"\n                                required\n                                fullWidth\n                                id=\"email\"\n                                label=\"Email\"\n                                error={this.state.isWrongMail != \"\"}\n                                helperText={this.state.isWrongMail}\n                                name=\"email\"\n                                onChange={this.handleInputChange}\n                                autoComplete=\"email\"\n                            />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <TextField\n                                variant=\"outlined\"\n                                required\n                                fullWidth\n                                name=\"pass\"\n                                label=\"Пароль\"\n                                error={this.state.isWrongPassword != \"\"}\n                                helperText={this.state.isWrongPassword}\n                                type=\"password\"\n                                onChange={this.handleInputChange}\n                                id=\"pass\"\n                                autoComplete=\"current-password\"\n                            />\n                        </Grid>\n                    </Grid>\n                    <Button\n                        type=\"submit\"\n                        fullWidth\n                        variant=\"contained\"\n                        color=\"primary\"\n                        className={classes.submit}\n                    >\n                        зарегистрироваться\n                    </Button>\n                    <Grid container justify=\"flex-end\">\n                        <Grid item xs>\n                            <Link href=\"#\" variant=\"body2\" component={RouterLink} to=\"/restore\" >\n                                Забыли пароль?\n                            </Link>\n                        </Grid>\n                        <Grid item>\n                            <Link href=\"#\" component={RouterLink} to=\"/login\" variant=\"body2\">\n                                Уже есть аккаунт?\n                            </Link>\n                        </Grid>\n                    </Grid>\n                </form>\n                <Box mt={5}>\n                    <Copyright />\n                </Box>\n            </Paper>\n\n        </Grid>);\n    }\n}\n\nconst styles = {\n    paper: {\n        marginTop: \"160px\",\n        padding:\"60px\",\n        width:\"500px\",\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n    },\n    form: {\n        width: '100%', // Fix IE 11 issue.\n        marginTop: \"10px\",\n    },\n    submit: {\n        margin: \"30px 0 20px\",\n    },\n};\nexport default withStyles(styles)(withRouter(Reg));","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\Chat.js",["144","145","146","147","148","149","150","151","152","153","154","155","156"],"C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\MainMenu.js",["157","158","159","160"],"import * as React from \"react\";\nimport {Avatar, Dialog, Fab, List, ListItem, withStyles} from \"@material-ui/core\";\nimport {AssignmentInd, Add, Settings, Explore, Forum} from \"@material-ui/icons\";\n\nimport {Divider} from \"@material-ui/core\";\nimport AppContext from \"./AppContext.js\";\nimport ProfileDialog from \"./ProfileDialog\";\nimport ServersDialog from \"./ServersDialog\";\nimport AddServerDialog from \"./AddServerDialog\";\nimport UsersList from \"./UsersList\";\n\n\n\nclass MainMenu extends React.Component{\n    static contextType = AppContext;\n    constructor(props) {\n        super(props);\n        this.state = {\n            profileDialogOpen:false,\n            serversDialogOpen:false,\n            addServerDialogOpen:false,\n\n        };\n\n        this.handleServerCreate = this.handleServerCreate.bind(this);\n\n    }\n\n    handleServerCreate(id){\n        this.props.onServerConnect();\n        this.props.onChangeServer(id);\n    }\n\n\n    render() {\n        const {classes} = this.props;\n        return (<div><List><ListItem><Fab onClick={() => this.setState({profileDialogOpen:true})} aria-label=\"add\">\n            <Settings />\n        </Fab></ListItem>\n                <ListItem><Fab onClick={this.props.onToChatClick} aria-label=\"add\">\n                    <Forum />\n                </Fab></ListItem>\n                <Divider className={classes.divider}/>\n            {this.props.servers.map((item)=>(\n                <ListItem key={item.id}>\n                    <Avatar className={classes.avatar + (this.props.currentServer===item.id ? \" \" + classes.current : \"\")} onClick={() => this.props.onChangeServer(item.id)} src={\"https://rp-ruler.ru/upload/\"+item.avatar}>\n                        <Fab className={classes.serverElem + (this.props.currentServer===item.id ? \" \"+classes.current : \"\")}>{item.name.substr(0,2)}</Fab>\n                    </Avatar></ListItem>\n            ))}\n                {this.context.user_type == 1 ? <ListItem><Fab color=\"primary\" className={classes.serverElem} onClick={() => this.setState({addServerDialogOpen:true})}>\n                    <Add/></Fab></ListItem> : \"\"}\n\n                <ListItem><Fab color=\"primary\" onClick={() =>this.setState({serversDialogOpen:true})} className={classes.serverElem}>\n                    <Explore/></Fab></ListItem>\n\n            </List><ProfileDialog open={this.state.profileDialogOpen} onClose={() =>this.setState({profileDialogOpen:false})}/>\n                    <ServersDialog open={this.state.serversDialogOpen}\n                                   connectedServers={this.props.servers}\n                                   onServerConnect={this.props.onServerConnect}\n                                   onClose={() => this.setState({serversDialogOpen:false})}/>\n                    <AddServerDialog open={this.state.addServerDialogOpen}\n                                     onCreate={this.handleServerCreate}\n                                     onClose={() => this.setState({addServerDialogOpen:false})}/>\n\n        </div>\n        );\n    }\n\n}\nconst styles = {\n    divider: {\n\n        padding:\"1px\"\n    },\n    current:{\n        \"border-radius\":\"30%\"\n    },\n    avatar:{\n        width:\"56px\",\n        height:\"56px\",\n        \"background-color\":\"#e0e0e0\",\n        \"cursor\":\"pointer\",\n        transition:\".1s\"\n    },\n    serverElem:{\n        \"font-size\":\"20px\",\n        transition:\".1s\"\n    }\n};\nexport default withStyles(styles)(MainMenu);","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\AppContext.js",[],"C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\RoomsList.js",["161","162","163","164","165","166"],"C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\ServerName.js",["167","168"],"C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\RoomAppBar.js",["169"],"import * as React from \"react\";\nimport {\n    Accordion,\n    AccordionDetails,\n    AccordionSummary,\n    AppBar,\n    Toolbar,\n    Typography,\n    withStyles\n} from \"@material-ui/core\";\nimport {ExpandMore} from \"@material-ui/icons\";\nimport Utils from \"./Utils\";\n\nclass RoomAppBar extends React.Component{\n    constructor(props) {\n        super(props);\n        this.state = {\n            open:false\n        };\n    }\n    render(){\n        const {classes} = this.props;\n        if(this.props.description != null && this.props.description.length > 100){\n            return(<AppBar color=\"default\" position=\"absolute\">\n                <Toolbar className={classes.root}>\n                    <Accordion className={classes.accordion} expanded={this.state.open} onChange={() => this.setState((state) => {return {open:!state.open}} )}>\n                        <AccordionSummary\n                            expandIcon={<ExpandMore />}\n                            id=\"panel1bh-header\"\n                        >\n                            <Typography className={classes.divider} variant=\"h6\" noWrap>\n                                {this.props.name}\n                            </Typography>\n                            {!this.state.open ? <Typography className={classes.description} variant=\"body2\">\n                                {Utils.truncateString(this.props.description,100)}\n                            </Typography> : \"\"}\n                        </AccordionSummary>\n                        <AccordionDetails>\n                            <Typography variant=\"body2\">\n                                {this.props.description}\n                            </Typography>\n                        </AccordionDetails>\n                    </Accordion>\n\n\n                </Toolbar>\n            </AppBar>);\n        }else{\n            return(<AppBar color=\"default\" position=\"absolute\">\n                <Toolbar>\n                    <Typography className={this.props.description != \"\" ? classes.divider : \"\"} variant=\"h6\" noWrap>\n                        {this.props.name}\n                    </Typography>\n                    <Typography className={classes.description} variant=\"body2\" noWrap>\n                        {Utils.truncateString(this.props.description,100)}\n                    </Typography>\n\n                </Toolbar>\n            </AppBar>);\n        }\n\n    }\n\n\n}\n\nconst styles = {\n    root:{\n        overflow:\"hidden\"\n    },\n    accordion:{\n        background:\"transparent\",\n        boxShadow:\"none\"\n    },\n    divider:{\n        borderRight:\"1px solid #888\",\n        paddingRight:\"10px\"\n    },\n    description:{\n        marginTop:\"5px\",\n        marginLeft:\"10px\",\n\n    }\n\n};\nexport default withStyles(styles)(RoomAppBar);","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\Messages.js",["170","171","172","173","174","175","176","177","178","179","180","181","182"],"import * as React from \"react\";\nimport {\n\n    Avatar, IconButton, LinearProgress, List,\n    ListItem,\n    ListItemAvatar, ListItemIcon,\n    ListItemText, Menu, MenuItem, Typography,\n\n    withStyles\n} from \"@material-ui/core\";\nimport {Delete, Reply} from \"@material-ui/icons\";\nimport TokenContext from \"./AppContext\";\nimport InputReplyMessage from \"./InputReplyMessage\";\nimport StyledBadge from \"./StyledBadge\";\nimport {blue, cyan, green, lime, orange, pink, purple, red, yellow} from \"@material-ui/core/colors\";\nimport Utils from \"./Utils\";\n\n\nclass Messages extends React.Component{\n    static contextType = TokenContext;\n    constructor(props) {\n        super(props);\n        this.state =\n            {mouseX: null,\n            mouseY: null,\n            menuMessageId:null,\n            };\n        this.handleCloseMenu = this.handleCloseMenu.bind(this);\n        this.getMessageById = this.getMessageById.bind(this);\n        this.handleDeleteMsg = this.handleDeleteMsg.bind(this);\n        this.handleReply = this.handleReply.bind(this);\n        this.handleContextClick = this.handleContextClick.bind(this);\n        this.handleScroll = this.handleScroll.bind(this);\n    }\n\n    handleContextClick(event,message_id){\n        event.preventDefault();\n        this.setState({\n            mouseX: event.clientX - 2,\n            mouseY: event.clientY - 4,\n            menuMessageId:message_id\n        });\n    }\n    componentDidUpdate(prevProps){\n        if(this.props.messages !== prevProps.messages) {\n            this.scrollToBottom();\n        }\n    }\n    scrollToBottom(){\n        this.messagesEnd.scrollIntoView();\n    }\n\n    componentDidMount() {\n        this.scrollToBottom();\n    }\n\n\n    handleCloseMenu(event){\n        event.preventDefault();\n        this.setState({\n            mouseX: null,\n            mouseY: null\n        });\n    }\n\n    getMessageById(id){\n        if(this.props.messages === undefined)return null;\n        for(let i=0;i<this.props.messages.length;i++){\n            if(this.props.messages[i].id === id)return this.props.messages[i];\n        }\n        return null;\n\n    }\n\n    handleReply(event){\n        this.props.onReplyChoose(this.state.menuMessageId);\n        this.handleCloseMenu(event);\n    }\n\n    handleDeleteMsg(event){\n        this.props.onRemoveMessage(this.state.menuMessageId);\n        this.handleCloseMenu(event);\n    }\n    handleScroll(event){\n        if(event.target.scrollTop < 400 && this.props.messages.length % 60 === 0){\n            this.props.loadMoreMessages();\n        }\n\n    }\n\n    render(){\n        const {classes} = this.props;\n        return(<div><div className={classes.roomBg} style={{\"background-image\":this.props.bg}}/><List onScroll={this.handleScroll} className={classes.messagesWrap}>\n\n            {this.props.messages.map((item,i,msgs)=>(\n            <ListItem button key={item.id}\n                      className={(item.id > this.props.lastRead ? classes.unreadMessage : \"\")+\" \"+\n                      (item.id == this.props.replyTo ? classes.replyTo : \"\") + \" \"+\n                      ((i != 0 && msgs[i - 1].sender_id == item.sender_id) ? classes.noAvatar : \"\")\n                      }\n                      onContextMenu={(event) => this.handleContextClick(event,item.id)}>\n                {(i != 0 && msgs[i - 1].sender_id == item.sender_id) ? \"\" :\n                    <ListItemAvatar>\n                        <StyledBadge variant=\"dot\"\n                                     anchorOrigin={{\n                                         vertical: 'bottom',\n                                         horizontal: 'right',\n                                     }}\n                                     overlap=\"circle\"\n                                     invisible={Utils.getElById(this.props.online, item.sender_id) == null}>\n                            <Avatar alt={item.login} src={\"https://rp-ruler.ru/upload/\" + item.avatar}/>\n                        </StyledBadge>\n\n                    </ListItemAvatar>\n                }\n                <ListItemText\n                    secondary={<div>{item.text}\n                    {item.reply_message != null ? <InputReplyMessage replyLogin={item.reply_message.login}\n                                                                replyText={item.reply_message.text}/> : null}</div>}>\n                    {(i != 0 && msgs[i - 1].sender_id == item.sender_id) ? \"\" :<span className={classes.login + \" \" + item.color != null ? classes[item.color+\"Text\"] : \"\"}>{item.login}</span>}\n                    {(i != 0 && msgs[i - 1].sender_id == item.sender_id) ? \"\" :<l className={classes.messageTime}> {item.datetime}</l>}\n\n\n                </ListItemText>\n            </ListItem>\n            ))}\n            <Menu\n                keepMounted\n                onContextMenu={this.handleCloseMenu}\n                open={this.state.mouseY !== null}\n                onClose={this.handleCloseMenu}\n                anchorReference=\"anchorPosition\"\n                anchorPosition={\n                    this.state.mouseY !== null && this.state.mouseX !== null\n                        ? { top: this.state.mouseY, left: this.state.mouseX }\n                        : undefined\n                }\n            >\n                {this.getMessageById(this.state.menuMessageId) != null && (\n                this.getMessageById(this.state.menuMessageId).sender_id == this.context.user_id ||\n                    (this.props.role.msg_delete && this.props.role.role_order < this.getMessageById(this.state.menuMessageId).role_order) )?\n                    <MenuItem onClick={this.handleDeleteMsg}>\n                    <ListItemIcon>\n                        <Delete fontSize=\"small\" />\n                    </ListItemIcon>\n                    Удалить\n                </MenuItem> : \"\"}\n\n                <MenuItem onClick={this.handleReply}>\n                    <ListItemIcon>\n                        <Reply fontSize=\"small\" />\n                    </ListItemIcon>\n                    Ответить\n                </MenuItem>\n            </Menu>\n            <div style={{ float:\"left\", clear: \"both\" }}\n                 ref={(el) => { this.messagesEnd = el; }}>\n            </div>\n        </List></div>);\n    }\n}\n\n\nconst styles = {\n    roomBg:{\n        position:\"absolute\",\n        top:0,\n        \"background-position\":\"center\",\n        \"background-size\":\"cover\",\n        left:0,\n        width:\"100%\",\n        height:\"100%\",\n        opacity: 0.2\n    },\n    messagesWrap:{\n        height:\"calc(100vh - 147px)\",\n        \"overflow\":\"auto\",\n        marginTop:\"67px\"\n    },\n    messageTime:{\n        \"font-size\":\"13px\",\n        opacity:\"0.6\"\n    },\n    unreadMessage:{\n        \"background-color\":\"rgba(255, 255, 255, 0.04)\"\n    },\n    replyTo:{\n        \"border-left\":\"2px solid #ff5722\",\n        \"background-color\":\"#ff572209\"\n    },\n    login:{\n        \"font-weight\":\"400\"\n    },\n    noAvatar:{\n        paddingLeft:\"72px\",\n        paddingTop:\"0px\",\n        paddingBlock:\"0px\"\n    },\n        redText:{\n            color:red[400]\n        },\n        pinkText:{\n            color:pink[400],\n        },\n        purpleText:{\n            color:purple[400],\n        },\n        limeText:{\n            color:lime[400],\n        },\n        blueText:{\n            color:blue[400],\n        },\n        cyanText:{\n            color:cyan[400],\n        },\n        greenText:{\n            color:green[400],\n        },\n        yellowText:{\n            color:yellow[400],\n        },\n        orangeText:{\n            color:orange[400],\n        }\n}\n\n\n;\nexport default withStyles(styles)(Messages);","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\InputReplyMessage.js",["183"],"import * as React from \"react\";\nimport {Paper, withStyles} from \"@material-ui/core\";\nimport {Close} from \"@material-ui/icons\";\n\nclass InputReplyMessage extends React.Component{\n    render(){\n        const {classes} = this.props;\n        if(this.props.replyLogin === null)return(<div/>);\n        return( <div className={this.props.onCancel != null ? classes.messageReplyWrap : null }>\n                                <div className={classes.messageReply}>\n                                    <h5 className={classes.login}>{this.props.replyLogin}</h5>\n                                    <span className={classes.text}>{this.props.replyText}</span>\n                                    {this.props.onCancel != null ? <Close onClick={this.props.onCancel} className={classes.close}/> : null }\n                                </div>\n        </div>);\n    }\n}\n\nconst styles = {\n    messageReplyWrap:{\n        padding:\"10px 20px\"\n    },\n    messageReply:{\n        \"border-left\":\"2px solid #ff5722\",\n        \"padding-left\":\"10px\"\n    },\n    login:{\n        margin:\"0\",\n        \"font-size\":\"1.15em\",\n        \"font-weight\":400,\n        color:\"#ff5722\"\n    },\n    text:{\n        opacity:0.7\n    },\n    close:{\n        position:\"absolute\",\n        cursor:\"pointer\",\n        right:\"10px\",\n        top:\"10px\"\n    },\n\n\n};\nexport default withStyles(styles)(InputReplyMessage);","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\ProfileDialog.js",["184"],"import * as React from \"react\";\nimport {\n    Accordion, AccordionDetails, AccordionSummary,\n    AppBar, Avatar,\n    Button,\n    Dialog, DialogActions, DialogTitle, Divider, FormControlLabel,\n    IconButton,\n    List,\n    ListItem, ListItemAvatar,\n    ListItemText, Slide, Snackbar, Switch,\n    Toolbar,\n    Typography,\n    withStyles\n} from \"@material-ui/core\";\nimport {Close, ExpandMore} from \"@material-ui/icons\";\nimport TokenContext from \"./AppContext\";\nimport FormDialog from \"./FormDialog\";\nimport {Alert} from \"@material-ui/lab\";\n\n\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n    return <Slide direction=\"right\" ref={ref} {...props} />;\n});\n\nclass ProfileDialog extends React.Component {\n    static contextType = TokenContext;\n    constructor(props) {\n        super(props);\n        this.handleClose = this.handleClose.bind(this);\n        this.handleDarkThemeChange = this.handleDarkThemeChange.bind(this);\n        this.state = {expanded:false,\n            login:null,\n            email:null,\n            status:null,\n            avatar:null,\n            loginFormOpen:false,\n            statusFormOpen:false,\n            passFormOpen:false,\n            snackBarText:null,\n            snackBarOpen:false,\n            snackBarStatus:\"success\",\n            isConfirmDeleteOpen:false\n        };\n        this.handleAccordionChange = this.handleAccordionChange.bind(this);\n        this.handleSaveLogin = this.handleSaveLogin.bind(this);\n        this.handleSnackBarClose = this.handleSnackBarClose.bind(this);\n        this.handleSaveStatus = this.handleSaveStatus.bind(this);\n        this.handleSavePassword = this.handleSavePassword.bind(this);\n        this.handleFileUploaded = this.handleFileUploaded.bind(this);\n    }\n\n    componentDidMount() {\n        const requestOptions = {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: \"token=\"+this.context.token+\"&server_id=\"+this.state.serverId\n        };\n        fetch(\"https://rp-ruler.ru/api/get_profile.php\",requestOptions).then(response => response.json())\n            .then((data)=>{\n                if(data.error === undefined){\n                    this.setState({...data.user})\n                }\n            });\n    }\n\n    handleClose(){\n        this.props.onClose();\n    }\n    handleDarkThemeChange(){\n        this.context.toggleTheme();\n    }\n\n    handleSnackBarClose(){\n        this.setState({snackBarOpen:false});\n    }\n\n    handleSaveLogin(data){\n        if(data==null)return;\n        let newLogin = data.login;\n        const requestOptions = {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: \"token=\"+this.context.token+\"&login=\"+newLogin\n        };\n        fetch(\"https://rp-ruler.ru/api/save_profile.php\",requestOptions).then(response => response.json())\n            .then((data)=>{\n                if(data.error === undefined){\n                    this.setState({snackBarOpen:true,\n                        snackBarText:\"Логин успешно изменен.\",\n                        login:newLogin,\n                        snackBarStatus:\"success\"\n                    });\n                }else{\n                    this.setState({snackBarOpen:true,\n                        snackBarText:data.error,\n                        snackBarStatus:\"error\"\n                    });\n                }\n            });\n        this.setState({loginFormOpen:false});\n    }\n\n\n\n    handleSaveStatus(data){\n        let newStatus = data == null ? \" \" : data.status;\n        this.setState({statusFormOpen:false});\n        const requestOptions = {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: \"token=\"+this.context.token+\"&status=\"+newStatus\n        };\n        fetch(\"https://rp-ruler.ru/api/save_profile.php\",requestOptions).then(response => response.json())\n            .then((data)=>{\n                if(data.error === undefined){\n                    this.setState({snackBarOpen:true,\n                        snackBarText:\"Статус успешно изменен.\",\n                        status:newStatus,\n                        snackBarStatus:\"success\"\n                    });\n                }else{\n                    this.setState({snackBarOpen:true,\n                        snackBarText:data.error,\n                        snackBarStatus:\"error\"\n                    });\n                }\n            });\n    }\n\n    handleSavePassword(data){\n        if(data == null)return;\n        this.setState({passFormOpen:false});\n        let prevPass = data.prev_password;\n        let newPass = data.new_password;\n        const requestOptions = {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: \"token=\"+this.context.token+\"&prev_pass=\"+prevPass+\"&new_pass=\"+newPass\n        };\n        fetch(\"https://rp-ruler.ru/api/save_profile.php\",requestOptions).then(response => response.json())\n            .then((data)=>{\n                if(data.error === undefined){\n                    this.setState({snackBarOpen:true,\n                        snackBarText:\"Пароль успешно изменен.\",\n                        snackBarStatus:\"success\"\n                    });\n                }else{\n                    this.setState({snackBarOpen:true,\n                        snackBarText:data.error,\n                        snackBarStatus:\"error\"\n                    });\n                }\n            });\n    }\n\n    handleAccordionChange = (panel) => (event, isExpanded) => {\n        this.setState({expanded:isExpanded ? panel : false});\n    };\n    handleFileUploaded(event){\n        if(event.target.files != null && event.target.files.length != 0){\n            let file = event.target.files[0];\n            const formData = new FormData();\n            formData.append('avatar', file);\n            formData.append(\"token\",this.context.token);\n            const requestOptions = {\n                method: 'POST',\n                body: formData\n            };\n            fetch(\"https://rp-ruler.ru/api/upload_avatar.php\",requestOptions).then(response => response.json())\n                .then((data)=>{\n                    this.setState({avatar:data.avatar});\n                });\n\n        }\n\n    }\n\n    handleAccountDelete(){\n        const requestOptions = {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: \"token=\"+this.context.token\n        };\n        fetch(\"https://rp-ruler.ru/api/delete_account.php\",requestOptions).then(response => response.json())\n            .then((data)=>{\n                if(data.error === undefined){\n                    this.context.logout();\n                }\n            });\n    }\n\n    render(){\n        const {classes} = this.props;\n        return(<Dialog fullScreen open={this.props.open} onClose={this.handleClose} TransitionComponent={Transition}>\n            <AppBar className={classes.appBar}>\n                <Toolbar>\n                    <IconButton edge=\"start\" color=\"inherit\" onClick={this.handleClose} aria-label=\"close\">\n                        <Close />\n                    </IconButton>\n                    <Typography variant=\"h6\" className={classes.title}>\n                        Настройки\n                    </Typography>\n                </Toolbar>\n            </AppBar>\n            <br/><br/><br/><br/>\n            <Accordion expanded={this.state.expanded === 'general'} onChange={this.handleAccordionChange(\"general\")}>\n                <AccordionSummary\n                    expandIcon={<ExpandMore />}\n                    aria-controls=\"generalbh-content\"\n                    id=\"generalbh-header\"\n                >\n                    <Typography>Основные настройки</Typography>\n                </AccordionSummary>\n                <AccordionDetails>\n                    <List className={classes.list}>\n                        <ListItem button>\n                            <FormControlLabel\n                                control={<Switch checked={this.context.isDarkTheme} onChange={this.handleDarkThemeChange} />}\n                                label=\"Темная тема\"\n                            />\n                        </ListItem>\n                        <Divider />\n                        <ListItem button>\n                            <FormControlLabel\n                                control={<Switch checked={this.context.isAnimationEnable} onChange={this.context.toggleAnimation} />}\n                                label=\"Анимация фона\"\n                            />\n                        </ListItem>\n                        <Divider />\n                    </List>\n                </AccordionDetails>\n            </Accordion>\n            <Accordion expanded={this.state.expanded === 'user'} onChange={this.handleAccordionChange(\"user\")}>\n                <AccordionSummary\n                    expandIcon={<ExpandMore />}\n                    aria-controls=\"userbh-content\"\n                    id=\"userbh-header\"\n                >\n                    <Typography>Пользователь</Typography>\n                </AccordionSummary>\n                <AccordionDetails>\n                    <List className={classes.list}>\n                        <ListItem button>\n                            <ListItemAvatar>\n                                <Avatar alt={this.state.login} src={\"https://rp-ruler.ru/upload/\"+this.state.avatar}/>\n                            </ListItemAvatar>\n                            <input onChange={this.handleFileUploaded} name=\"avatar\" accept=\"image/*\" className={classes.inputFile} id=\"button-file\" type=\"file\"/>\n                            <label htmlFor=\"button-file\">\n                                <Button variant=\"contained\" color=\"primary\" component=\"span\">\n                                    Загрузить аватар.\n                                </Button>\n                            </label>\n                        </ListItem>\n                        <ListItem button>\n                            <ListItemText primary=\"Логин\" secondary={this.state.login} />\n                            <Button onClick={() => this.setState({loginFormOpen:true})} variant=\"contained\" color=\"primary\" component=\"span\">\n                                Изменить\n                            </Button>\n                        </ListItem>\n                        <Divider />\n                        <ListItem button>\n                            <ListItemText primary=\"Почта\" secondary={this.state.email} />\n                        </ListItem>\n                        <Divider />\n                        <ListItem button>\n                            <ListItemText primary=\"Статус\" secondary={this.state.status} />\n                            <Button variant=\"contained\" onClick={() => this.setState({statusFormOpen:true})} color=\"primary\" component=\"span\">\n                                Изменить\n                            </Button>\n                        </ListItem>\n                        <Divider />\n                        <ListItem button>\n                            <ListItemText primary=\"Пароль\" />\n                            <Button variant=\"contained\" color=\"primary\" onClick={() => this.setState({passFormOpen:true})} component=\"span\">\n                                Изменить\n                            </Button>\n                        </ListItem>\n\n                        <ListItem>\n                            <Button variant=\"contained\" color=\"primary\" onClick={() => this.setState({isConfirmDeleteOpen:true})} component=\"span\">\n                                Удалить аккаунт\n                            </Button>\n                        </ListItem>\n\n\n                        <ListItem>\n                            <Button variant=\"contained\" color=\"primary\" onClick={this.context.logout} component=\"span\">\n                                Выйти\n                            </Button>\n                        </ListItem>\n                    </List>\n                </AccordionDetails>\n            </Accordion>\n            <FormDialog open={this.state.loginFormOpen} onSave={this.handleSaveLogin} types={[\"text\"]} names={[\"login\"]}\n                        onClose={() => this.setState({loginFormOpen:false})} text=\"Введите логин\" labels={[\"Логин\"]}/>\n            <FormDialog open={this.state.statusFormOpen} onSave={this.handleSaveStatus} types={[\"text\"]} names={[\"status\"]}\n                        onClose={() => this.setState({statusFormOpen:false})} text=\"Введите статус\" labels={[\"Статус\"]}/>\n            <FormDialog open={this.state.passFormOpen} onSave={this.handleSavePassword} types={[\"password\",\"password\"]}\n                        names={[\"prev_password\",\"new_password\"]}\n                        onClose={() => this.setState({passFormOpen:false})} text=\"Введите текущий и новый пароли\"\n                        labels={[\"Текущий пароль\",\"Новый пароль\"]}/>\n            <Snackbar open={this.state.snackBarOpen} autoHideDuration={3000} onClose={this.handleSnackBarClose}>\n                <Alert severity={this.state.snackBarStatus} variant=\"filled\" elevation={6}>\n                    {this.state.snackBarText}\n                </Alert>\n            </Snackbar>\n            <Dialog open={this.state.isConfirmDeleteOpen} onClose={() => this.setState({isConfirmDeleteOpen:false})}>\n                <DialogTitle>Вы уверены?</DialogTitle>\n                <DialogActions>\n                    <Button onClick={() => this.setState({isConfirmDeleteOpen:false})} color=\"primary\">\n                        Отменить\n                    </Button>\n                    <Button onClick={() => this.handleAccountDelete()} color=\"primary\" autoFocus>\n                        Удалить аккаунт\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </Dialog>)\n    }\n\n}\nconst styles = {\n    appBar:{\n        appBar: {\n            position: 'relative',\n        },\n        title: {\n            marginLeft: \"20px\",\n            flex: 1,\n        },\n\n    },\n    inputFile:{\n        display: 'none',\n    },\n    list:{\n        width:\"100% !important\"\n    }\n\n\n};\nexport default withStyles(styles)(ProfileDialog);","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\UsersList.js",["185","186","187"],"import * as React from \"react\";\nimport TokenContext from \"./AppContext\";\nimport {Avatar, Badge, List, ListItem, ListItemAvatar, ListItemText, withStyles} from \"@material-ui/core\";\nimport UserPopover from \"./UserPopover\";\nimport StyledBadge from \"./StyledBadge\";\nimport {blue, cyan, green, lime, orange, pink, purple, red, yellow} from \"@material-ui/core/colors\";\nimport Utils from \"./Utils\";\n\n\n\nclass UsersList extends React.Component{\n    static contextType = TokenContext;\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            popoverOpen:false,\n            anchorEl:null,\n            clickedUser:null\n        }\n        this.handleClose = this.handleClose.bind(this);\n        this.handleWriteClick = this.handleWriteClick.bind(this);\n    }\n\n    handleWriteClick(event,id){\n        this.handleClose();\n        this.props.onWriteToUser(event,id);\n\n    }\n\n    handleClose(){\n        this.setState({popoverOpen:false})\n    }\n\n    handleClick(event,id){\n        this.setState({anchorEl:event.currentTarget,\n            clickedUser:Utils.getElById(this.props.users,id),\n            popoverOpen:true\n        });\n    }\n\n    render() {\n        const {classes} = this.props;\n        if(this.props.users == null)return(<List/>);\n        return(<div><List>\n            {this.props.users.map((user)=>(\n            <ListItem button key={user.id} onClick={(event)=>this.handleClick(event,user.id)}\n                      onContextMenu={(event)=>this.handleClick(event,user.id)}>\n                <ListItemAvatar>\n                    <StyledBadge variant=\"dot\"\n                                 anchorOrigin={{\n                                    vertical: 'bottom',\n                                    horizontal: 'right',\n                                 }}\n                                 overlap=\"circle\"\n                                 invisible={user.online == 0}>\n                        <Avatar alt={user.login} src={\"https://rp-ruler.ru/upload/\"+user.avatar} />\n                    </StyledBadge>\n                </ListItemAvatar>\n                <ListItemText className={user.color != null ? classes[user.color+\"Text\"] : \"\"} primary={user.login}/>\n            </ListItem>\n            ))}\n        </List>\n        <UserPopover open={this.state.popoverOpen}\n                     onClose={this.handleClose}\n                     onWriteToUser={(event)=>this.handleWriteClick(event,this.state.clickedUser.id)}\n                     anchorEl={this.state.anchorEl}\n                     user={this.state.clickedUser}\n                     server={this.props.server}\n                     role={this.props.role}\n                     onUsersUpdate={this.props.onUsersUpdate}\n                     onMessagesUpdate={this.props.onMessagesUpdate}\n                     doWrite={this.state.clickedUser != null && this.context.user_id != this.state.clickedUser.id}\n        />\n        </div>)\n    }\n}\n\nconst styles = {\n    redText:{\n        color:red[400]\n    },\n    pinkText:{\n        color:pink[400],\n    },\n    purpleText:{\n        color:purple[400],\n    },\n    limeText:{\n        color:lime[400],\n    },\n    blueText:{\n        color:blue[400],\n    },\n    cyanText:{\n        color:cyan[400],\n    },\n    greenText:{\n        color:green[400],\n    },\n    yellowText:{\n        color:yellow[400],\n    },\n    orangeText:{\n        color:orange[400],\n    }\n};\nexport default withStyles(styles)(UsersList);","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\FormDialog.js",["188","189"],"import * as React from \"react\";\nimport TokenContext from \"./AppContext\";\nimport {\n    Button,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogTitle,\n    List,\n    TextField,\n    withStyles\n} from \"@material-ui/core\";\n\nclass FormDialog extends React.Component {\n    static contextType = TokenContext;\n    constructor(props) {\n        super(props);\n        this.handleChange = this.handleChange.bind(this);\n    }\n    handleChange(event,key){\n        this.setState({[key]:event.target.value});\n    }\n    componentDidUpdate(prevProps) {\n        if(!prevProps.open && this.props.open){\n            this.props.names.map((item)=>{\n                this.setState({[item]:\"\"});\n            })\n        }\n    }\n\n    render() {\n\n        return (<Dialog maxWidth=\"sm\" fullWidth open={this.props.open} onClose={this.props.onClose} aria-labelledby=\"form-dialog-title\">\n            <DialogTitle id=\"form-dialog-title\">{this.props.text}</DialogTitle>\n\n            <DialogContent>\n                {this.props.names.map((item,i)=>(\n                    <TextField\n                        autoFocus\n                        margin=\"dense\"\n                        id=\"name\"\n                        onChange={(event) => this.handleChange(event,item)}\n                        label={this.props.labels[i]}\n                        type={this.props.types[i]}\n                        fullWidth\n                    />\n                ))}\n\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={() => this.props.onSave(this.state)} color=\"primary\">\n                    Сохранить\n                </Button>\n            </DialogActions>\n        </Dialog>);\n    }\n\n}\nconst styles = {\n\n};\nexport default withStyles(styles)(FormDialog);","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\ServersDialog.js",["190","191","192","193","194"],"import * as React from \"react\";\nimport {\n    AppBar,\n    Dialog, fade, Grid,\n    IconButton,\n    InputBase, makeStyles, OutlinedInput,\n    Slide,\n    TextField,\n    Toolbar,\n    Typography,\n    withStyles\n} from \"@material-ui/core\";\nimport {Close, Search} from \"@material-ui/icons\";\nimport clsx from \"clsx\";\nimport ServerCard from \"./ServerCard\";\nimport TokenContext from \"./AppContext\";\nimport Masonry from 'react-masonry-css'\nimport Utils from \"./Utils\";\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n    return <Slide direction=\"right\" ref={ref} {...props} />;\n});\n\n\n\nclass ServersDialog extends React.Component {\n    static contextType = TokenContext;\n    constructor(props) {\n        super(props);\n        this.handleConnect = this.handleConnect.bind(this);\n        this.handleSearchChange = this.handleSearchChange.bind(this);\n        this.findTag = this.findTag.bind(this);\n\n        this.state = {\n            servers:[],\n            search:\"\"\n        };\n\n    }\n\n\n    componentDidUpdate(prevProps) {\n        if(!prevProps.open && this.props.open){\n            this.setState({search:\"\"})\n            fetch(\"https://rp-ruler.ru/api/get_servers.php\").then(response => response.json())\n                .then((data)=>{\n                    if(data.error === undefined){\n                        this.setState({...data})\n                    }\n                });\n        }\n    }\n\n\n    handleConnect(id){\n        const requestOptions = {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: \"token=\"+this.context.token+\"&server_id=\"+id\n        };\n        fetch(\"https://rp-ruler.ru/api/connect_to_server.php\",requestOptions).then(response => response.json())\n            .then((data)=>{\n                if(data.error === undefined){\n                    this.handleClose();\n                    this.props.onServerConnect();\n                }\n            });\n    }\n\n    handleSearchChange(event){\n        const search = event.target.value;\n        this.setState({search:search});\n        const requestOptions = {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: \"s=\"+search\n        };\n        fetch(\"https://rp-ruler.ru/api/get_servers.php\",requestOptions).then(response => response.json())\n            .then((data)=>{\n                if(data.error === undefined){\n                    this.setState({...data})\n                }\n            });\n    }\n\n    findTag(tag){\n        this.setState({search:\"#\"+tag});\n        const requestOptions = {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: \"s=#\"+tag\n        };\n        fetch(\"https://rp-ruler.ru/api/get_servers.php\",requestOptions).then(response => response.json())\n            .then((data)=>{\n                if(data.error === undefined){\n                    this.setState({...data})\n                }\n            });\n    }\n\n    render() {\n        const {classes} = this.props;\n\n        return (\n            <Dialog fullScreen open={this.props.open} onClose={this.props.onClose} TransitionComponent={Transition}>\n                <AppBar className={classes.root}>\n                    <Toolbar>\n                        <IconButton edge=\"start\" color=\"inherit\" onClick={this.props.onClose} aria-label=\"close\">\n                            <Close />\n                        </IconButton>\n                        <Typography className={classes.title} variant=\"h6\" >\n                            Доступные сервера\n                        </Typography>\n                        <div className={classes.search}>\n                            <div className={classes.searchIcon}>\n                                <Search />\n                            </div>\n                            <InputBase\n                                onChange={this.handleSearchChange}\n                                value={this.state.search}\n                                placeholder=\"Поиск серверов…\"\n                                classes={{\n                                    root: classes.inputRoot,\n                                    input: classes.inputInput,\n                                }}\n                                inputProps={{ 'aria-label': 'Поиск серверов' }}\n                            />\n                        </div>\n                    </Toolbar>\n                </AppBar>\n                <br/><br/><br/>\n                <div style={{ padding: 20 }}>\n                <Masonry breakpointCols={{\n                    default: 5,\n                    1650: 4,\n                    1200: 3,\n                    900: 2\n                }}\n                         className=\"my-masonry-grid\"\n                         columnClassName=\"my-masonry-grid_column\"\n                >\n                    {this.state.servers.map((item)=>(\n                        <ServerCard\n                            name={item.name}\n                            avatar={item.avatar}\n                            bg={item.card_bg}\n                            tags={item.tags}\n                            age={item.age}\n                            isConnected={Utils.getElById(this.props.connectedServers,item.id)}\n                            description={item.description}\n                            players={item.count}\n                            onFindTag={this.findTag}\n                            className={classes.serverCard}\n                            onConnect={() => this.handleConnect(item.id)}\n                        />\n                    ))}\n\n                </Masonry>\n                </div>\n            </Dialog>\n        );\n    }\n}\n\nconst useStyles = (theme) => ({\n    serverCard:{\n        \"width\":\"400px\"\n    },\n    root: {\n        flexGrow: 1,\n    },\n    menuButton: {\n        marginRight: theme.spacing(2),\n    },\n    title: {\n        flexGrow: 1,\n        display: 'none',\n        [theme.breakpoints.up('sm')]: {\n            display: 'block',\n        },\n    },\n    search: {\n        position: 'relative',\n        borderRadius: theme.shape.borderRadius,\n        backgroundColor: fade(theme.palette.common.white, 0.15),\n        '&:hover': {\n            backgroundColor: fade(theme.palette.common.white, 0.25),\n        },\n        marginLeft: 0,\n        width: '100%',\n        [theme.breakpoints.up('sm')]: {\n            marginLeft: theme.spacing(1),\n            width: 'auto',\n        },\n    },\n    searchIcon: {\n        padding: theme.spacing(0, 2),\n        height: '100%',\n        position: 'absolute',\n        pointerEvents: 'none',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    inputRoot: {\n        color: 'inherit',\n    },\n    inputInput: {\n        padding: theme.spacing(1, 1, 1, 0),\n        // vertical padding + font size from searchIcon\n        paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\n        transition: theme.transitions.create('width'),\n        width: '100%',\n        [theme.breakpoints.up('sm')]: {\n            width: '22ch',\n            '&:focus': {\n                width: '40ch',\n            },\n        },\n    },\n});\n\n\n\nexport default withStyles(useStyles)(ServersDialog);","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\ServerCard.js",[],"C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\UserPopover.js",[],"C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\Emoji.js",["195"],"import * as React from \"react\";\nimport {Button, Fade, Popover, withStyles} from \"@material-ui/core\";\nimport {Picker} from \"emoji-mart\";\nimport {Mood} from \"@material-ui/icons\";\n\nclass Emoji extends React.Component {\n\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            open:false,\n            anchorEl:null,\n        }\n        this.handleButtonClick = this.handleButtonClick.bind(this);\n        this.handleClose = this.handleClose.bind(this);\n    }\n\n    handleButtonClick(event){\n        this.setState({\n            anchorEl:event.currentTarget,\n            open:true\n        });\n    }\n    handleClose(){\n        this.setState({open:false});\n    }\n\n\n    render() {\n        const {classes} = this.props;\n        return (<div><Button onClick={this.handleButtonClick} className={classes.emojiButton}><Mood/></Button>\n            <Popover\n            open={this.state.open}\n            anchorEl={this.state.anchorEl}\n            onClose={this.handleClose}\n            anchorOrigin={{\n                vertical: 'top',\n                horizontal: 'right',\n            }}\n            transformOrigin={{\n                vertical: 'bottom',\n                horizontal: 'right',\n            }}\n        >\n            <Picker\n                native={true}\n\n                theme={this.props.isDarkTheme ? \"dark\" : \"light\"}\n                color=\"#ff5722\"\n                defaultSkin={6}\n                title=\"\"\n                onSelect={this.props.onSelect}\n                emoji='point_up'\n                showPreview={false}\n                i18n={{search: 'Поиск',\n                    clear: 'Очистить',\n                    notfound: 'Не найдено',\n                    skintext: 'Нигер?',\n                    categories: {\n                        search: 'Результаты',\n                        recent: 'Любимые смайлики',\n                        smileys: 'Эмоции',\n                        people: 'Люди',\n                        nature: 'Не люди',\n                        foods: 'Хавчик',\n                        activity: 'Спорт',\n                        places: 'Путешествия',\n                        objects: 'Предметы',\n                        symbols: 'Символы',\n                        flags: 'Флаги',\n                        custom: 'Кастом',\n                    },\n                    categorieslabel: 'Категории', // Accessible title for the list of categories\n                    skintones: {\n                        1: 'Китаец',\n                        2: 'Ариец',\n                        3: 'Не совсем ариец',\n                        4: 'Полу нигер',\n                        5: 'Нигер',\n                        6: 'Самый нигерный нигер',\n                    }}}\n            />\n\n        </Popover></div>);\n    }\n}\nconst styles = {\n    emojiButton:{\n        position:\"absolute\",\n        bottom:\"10px\",\n        right:\"69px\",\n        opacity:0.7\n    },\n};\nexport default withStyles(styles)(Emoji);","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\Restore.js",["196","197","198","199","200"],"C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\AddServerDialog.js",["201","202","203","204","205","206","207","208","209","210","211"],"import * as React from \"react\";\nimport {\n    Avatar,\n    Box,\n    Button,\n    Chip,\n    Dialog,\n    DialogContent, Divider,\n    Fab,\n    FormControlLabel,\n    FormLabel,\n    Grid,\n    IconButton,\n    List,\n    ListItem,\n    ListItemSecondaryAction, ListItemText,\n    Paper,\n    Radio,\n    RadioGroup,\n    Switch,\n    TextField,\n    Typography,\n    withStyles\n} from \"@material-ui/core\";\nimport DialogTitleWithClose from \"./DialogTitleWithClose\";\nimport {Autocomplete} from \"@material-ui/lab\";\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport TokenContext from \"./AppContext\";\n\nimport * as PropTypes from \"prop-types\";\nimport Reorder, {\n    reorder,\n    reorderImmutable,\n    reorderFromTo,\n    reorderFromToImmutable\n\n} from 'react-reorder';\nimport {Check, DeleteOutline} from \"@material-ui/icons\";\nimport {blue, cyan, deepPurple, green, lime, orange, pink, purple, red, yellow} from \"@material-ui/core/colors\";\n\n\nfunction TabPanel(props) {\n    const { children, value, index, ...other } = props;\n\n    return (\n        <div\n            role=\"tabpanel\"\n            hidden={value !== index}\n            id={`simple-tabpanel-${index}`}\n            aria-labelledby={`simple-tab-${index}`}\n            {...other}\n        >\n            {value === index && (\n                <Box p={3}>\n                    <Typography>{children}</Typography>\n                </Box>\n            )}\n        </div>\n    );\n}\n\nTabPanel.propTypes = {\n    children: PropTypes.node,\n    index: PropTypes.any.isRequired,\n    value: PropTypes.any.isRequired,\n};\n\n\nclass AddServerDialog extends React.Component {\n    static contextType = TokenContext;\n    constructor(props) {\n        super(props);\n        this.tags = [\"Аниме\",\"Хентай\",\"Фури\",\"Ужасы\",\"Детектив\",\"Приключения\",\"Эротика\",\"Криминал\",\"Мистика\",\"Комедия\",\"Фантастика\"];\n        let tagsArr = [];\n        if(this.props.tags != null){\n            tagsArr = this.props.tags.split(\",\");\n            if(tagsArr == null || tagsArr[0] == \"\")tagsArr = [];\n            if(!(tagsArr instanceof Array))tagsArr = [tagsArr];\n        }\n\n\n        this.state = {\n            tags:tagsArr,\n            roles:this.props.roles ?? [],\n            name:this.props.name ?? \"\",\n            avatar:this.props.avatar,\n            description:this.props.description,\n            isPrivate:this.props.isPrivate,\n            age:this.props.age ?? \"0\",\n            bg:this.props.bg == null || this.props.bg === \"null\" ? null : this.props.bg,\n            isNameError:\"\",\n            tab:0,\n            currentRole:0\n        };\n\n        this.handleDeleteRole = this.handleDeleteRole.bind(this);\n        this.handleReorder = this.handleReorder.bind(this);\n        this.handleRoleSwitchChange = this.handleRoleSwitchChange.bind(this);\n        this.handleAddRole = this.handleAddRole.bind(this);\n        this.handleFileUploaded = this.handleFileUploaded.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleColorChange = this.handleColorChange.bind(this);\n        this.handleRoleNameChange = this.handleRoleNameChange.bind(this);\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.name !== this.props.name) {\n            this.setState({name:this.props.name});\n        }\n        if (prevProps.description !== this.props.description) {\n            this.setState({description:this.props.description});\n        }\n        if (prevProps.tags !== this.props.tags) {\n            let tagsArr = this.props.tags.split(\",\");\n            if(tagsArr == null || tagsArr[0] == \"\")tagsArr = [];\n            if(!(tagsArr instanceof Array))tagsArr = [tagsArr];\n\n\n            this.setState({tags:tagsArr});\n        }\n        if (prevProps.isPrivate !== this.props.isPrivate) {\n            this.setState({isPrivate:this.props.isPrivate});\n        }\n        if (prevProps.age !== this.props.age) {\n            this.setState({age:this.props.age});\n        }\n        if (prevProps.avatar !== this.props.avatar) {\n            this.setState({avatar:this.props.avatar});\n        }\n        if (prevProps.bg !== this.props.bg) {\n            this.setState({bg:this.props.bg == null || this.props.bg === \"null\" ? null : this.props.bg});\n        }\n        if (prevProps.roles !== this.props.roles) {\n            this.setState({roles:this.props.roles ?? []});\n        }\n\n    }\n\n    handleFileUploaded(event){\n        if(event.target.files != null && event.target.files.length != 0){\n            let file = event.target.files[0];\n            const formData = new FormData();\n            formData.append('avatar', file);\n            formData.append(\"token\",this.context.token);\n            const requestOptions = {\n                method: 'POST',\n                body: formData\n            };\n            fetch(\"https://rp-ruler.ru/api/upload_file.php\",requestOptions).then(response => response.json())\n                .then((data)=>{\n                    if(event.target.name==\"bg\"){\n                        this.setState({bg:data.filename});\n                    }else{\n                        this.setState({avatar:data.filename});\n                    }\n\n                });\n\n        }\n\n    }\n\n    handleReorder (event, previousIndex, nextIndex, fromId, toId) {\n        this.setState({\n            roles: reorder(this.state.roles, previousIndex, nextIndex),\n            //currentRole:nextIndex\n        },() => this.setState({currentRole:nextIndex}));\n    }\n\n    handleSubmit(){\n\n        if(this.state.name.length == 0){\n            this.setState({isNameError:\"Введите название\"});\n            return;\n        }\n        if(this.state.name.length > 20){\n            this.setState({isNameError:\"Максимальная длина - 20 символов\"});\n            return;\n        }\n        let url = this.props.serverId == null ? \"https://rp-ruler.ru/api/create_server.php\" : \"https://rp-ruler.ru/api/edit_server.php\";\n        let serverId = this.props.serverId == null ? \"\" : \"&server_id=\"+this.props.serverId;\n        const requestOptions = {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: \"token=\"+this.context.token+\"&age=\"+this.state.age+\"&name=\"+this.state.name+\"&description=\"+this.state.description+\"&avatar=\"+this.state.avatar+\n                \"&is_private=\"+this.state.isPrivate*1+\"&bg=\"+this.state.bg+\"&tags=\"+this.state.tags+serverId+\"&roles=\"+encodeURI(JSON.stringify(this.state.roles))\n        };\n        fetch(url,requestOptions)\n            .then(response => response.json())\n            .then((data)=>{\n                if(this.props.onCreate != null)this.props.onCreate(this.props.serverId ?? data.id);\n                this.props.onClose();\n            })\n    }\n\n    handleRoleSwitchChange(name,value){\n        let newRoles = [...this.state.roles];\n        newRoles[this.state.currentRole][name] = value*1;\n        this.setState({roles:newRoles});\n    }\n\n    handleAddRole(){\n        let newRoles = [...this.state.roles];\n        newRoles.push({id: 0,\n            msg_delete: 0,\n            msg_send: 0,\n            name: \"Новая роль\",\n            role_edit: 0,\n            server_edit: 0,\n            room_edit:0,\n            color:\"default\",\n            server_id:this.props.serverId });\n        this.setState({roles:newRoles});\n    }\n\n    handleDeleteRole(index){\n        let newRoles = [...this.state.roles];\n        newRoles.splice(index, 1);\n        let newCurrentRole = this.state.currentRole;\n        if(newCurrentRole === newRoles.length)newCurrentRole--;\n\n        this.setState({roles:newRoles},() => this.setState({currentRole:newCurrentRole}));\n    }\n\n    handleColorChange(color){\n        let newRoles = [...this.state.roles];\n        newRoles[this.state.currentRole].color = color;\n        this.setState({roles:newRoles});\n    }\n\n    handleRoleNameChange(e){\n        let newRoles = [...this.state.roles];\n        newRoles[this.state.currentRole].name = e.target.value;\n        this.setState({roles:newRoles});\n    }\n\n    render() {\n        const {classes} = this.props;\n        let cantEditServer = this.props.role != null && !this.props.role.server_edit;\n        let cantEditRoles = this.props.role != null && !this.props.role.role_edit;\n        let roleColor = this.state.roles.length > this.state.currentRole ? this.state.roles[this.state.currentRole].color : \"default\";\n        let btnText = this.props.serverId == null ? \"Создать сервер\" :  \"Сохранить\";\n        return (<Dialog maxWidth=\"md\" fullWidth open={this.props.open} onClose={this.props.onClose}\n                        aria-labelledby=\"form-dialog-title\">\n            <DialogTitleWithClose id=\"customized-dialog-title\" noPadding={true} onClose={this.props.onClose}>\n                <Paper square>\n                <Tabs value={this.state.tab} indicatorColor=\"primary\"\n                      textColor=\"primary\" onChange={(e,value) => this.setState({tab:value})}>\n                    <Tab value={0} label=\"Основные\" className={classes.tabs} />\n                    <Tab label=\"Роли\" value={1}  className={classes.tabs}/>\n                </Tabs>\n                </Paper>\n            </DialogTitleWithClose>\n            <DialogContent>\n                <TabPanel value={this.state.tab} index={0}>\n                <Grid container justify=\"center\">\n\n                    <Avatar item src={\"https://rp-ruler.ru/upload/\"+this.state.avatar} className={classes.avatar}>\n                        <Fab>{this.state.name.substr(0,2)}</Fab>\n                    </Avatar>\n                    <input onChange={this.handleFileUploaded} disabled={cantEditServer} name=\"avatar\" accept=\"image/*\" className={classes.inputFile} id=\"button-file\" type=\"file\"/>\n                    <label htmlFor=\"button-file\">\n                        <Button disabled={cantEditServer} variant=\"contained\" color=\"primary\" component=\"span\">\n                            Загрузить аватар.\n                        </Button>\n                    </label>\n                </Grid><br/>\n                <Grid container alignItems=\"center\" direction=\"column\">\n                    {this.state.bg != null ? <img className={classes.bg} src={\"https://rp-ruler.ru/upload/\"+this.state.bg}/> : \"\"}\n                    <br/>\n                    <input onChange={this.handleFileUploaded} name=\"bg\" accept=\"image/*\" className={classes.inputFile} id=\"bg-file\" type=\"file\"/>\n                    <label htmlFor=\"bg-file\">\n                        {this.state.bg === null ? <Button disabled={cantEditServer} variant=\"contained\" color=\"primary\" component=\"span\">\n                            Загрузить фон карточки.\n                        </Button> : \"\"}\n                    </label>\n                </Grid>\n                {this.state.bg != null ? <Grid container alignItems=\"center\" direction=\"column\">\n                    <Button disabled={cantEditServer} onClick={() => this.setState({bg:null})} variant=\"contained\" color=\"primary\" component=\"span\">\n                        Удалить фон карточки.\n                    </Button>\n                </Grid> : \"\"}\n                <TextField\n                    variant=\"outlined\"\n                    margin=\"normal\"\n                    required\n                    fullWidth\n                    disabled={cantEditServer}\n                    helperText={this.state.isNameError}\n                    onChange={(e)=>this.setState({name:e.target.value})}\n                    label=\"Название сервера\"\n                    autoFocus\n                    value={this.state.name}\n                    error={this.state.isNameError.length != 0}\n\n                />\n                <TextField\n                    variant=\"outlined\"\n                    margin=\"normal\"\n                    fullWidth\n                    disabled={cantEditServer}\n                    id=\"description\"\n                    label=\"Описание\"\n                    name=\"description\"\n                    multiline\n                    rowsMax={5}\n                    onChange={(e)=>this.setState({description:e.target.value})}\n                    value={this.state.description}\n                />\n                <br/><br/>\n                <Autocomplete\n                    multiple\n                    options={this.tags}\n                    id=\"tags\"\n                    disabled={cantEditServer}\n                    value={this.state.tags}\n                    name=\"tags\"\n                    clearText=\"Очистить\"\n                    onChange = {(e,value) => {this.setState({tags:value}) }}\n                    renderTags={(value, getTagProps) =>\n                        value.map((option, index) => (\n                            <Chip variant=\"outlined\" label={option} {...getTagProps({ index })} />\n                        ))\n                    }\n                    renderInput={(params) => (\n                        <TextField\n                            {...params}\n                            variant=\"outlined\"\n                            label=\"Тэги\"\n\n                        />\n                    )}\n                />\n                <br/>\n                <FormControlLabel\n                    control={\n                        <Switch\n                            checked={this.state.isPrivate}\n                            onChange={(e)=>this.setState({isPrivate:e.target.checked})}\n                            name=\"checkedB\"\n                            disabled={cantEditServer}\n                            color=\"primary\"\n                        />\n                    }\n                    label=\"Приватный\"\n                />\n                <br/><br/>\n                <FormLabel component=\"legend\">Возрастное ограничение</FormLabel><br/>\n                <RadioGroup row name=\"age\" value={this.state.age} onChange={(e)=>this.setState({age:e.target.value})} defaultValue=\"top\">\n                    <FormControlLabel\n                        value=\"0\"\n                        control={<Radio color=\"primary\" />}\n                        label=\"+0\"\n                        disabled={cantEditServer}\n                        labelPlacement=\"end\"\n                    />\n                    <FormControlLabel\n                        value=\"6\"\n                        control={<Radio color=\"primary\" />}\n                        label=\"+6\"\n                        disabled={cantEditServer}\n                        labelPlacement=\"end\"\n                    />\n                    <FormControlLabel\n                        value=\"12\"\n                        control={<Radio color=\"primary\" />}\n                        label=\"+12\"\n                        disabled={cantEditServer}\n                        labelPlacement=\"end\"\n                    />\n                    <FormControlLabel\n                        value=\"16\"\n                        control={<Radio color=\"primary\" />}\n                        label=\"+16\"\n                        disabled={cantEditServer}\n                        labelPlacement=\"end\"\n                    />\n                    <FormControlLabel\n                        value=\"18\"\n                        control={<Radio color=\"primary\" />}\n                        label=\"+18\"\n                        disabled={cantEditServer}\n                        labelPlacement=\"end\"\n                    />\n                </RadioGroup><br/>\n                </TabPanel>\n\n                <TabPanel value={this.state.tab} index={1}>\n                    <Grid container spacing={4}>\n                        <Grid item xs={4}>\n                            {this.props.roles != null ?\n                                <List >\n\n                        <Reorder\n                            reorderId=\"my-list\" // Unique ID that is used internally to track this list (required)                            placeholderClassName=\"placeholder\" // Class name to be applied to placeholder elements (optional), defaults to 'placeholder'\n                            draggedClassName=\"dragged\" // Class name to be applied to dragged elements (optional), defaults to 'dragged'\n                            lock=\"horizontal\" // Lock the dragging direction (optional): vertical, horizontal (do not use with groups)\n                            holdTime={300} // Default hold time before dragging begins (mouse & touch) (optional), defaults to 0\n                            touchHoldTime={500} // Hold time before dragging begins on touch devices (optional), defaults to holdTime\n                            mouseHoldTime={200} // Hold time before dragging begins with mouse (optional), defaults to holdTime\n                            autoScroll={true} // Enable auto-scrolling when the pointer is close to the edge of the Reorder component (optional), defaults to true\n                            disabled={cantEditRoles} // Disable reordering (optional), defaults to false\n                            disableContextMenus={true} // Disable context menus when holding on touch devices (optional), defaults to true\n                            onReorder={this.handleReorder}\n                            placeholder={\n                                <ListItem button className={classes.listItem+\" \"+classes.dragPlaceholder}/>\n                            }\n                        >\n                            {this.state.roles.map((item,i)=>(\n                                <ListItem  key={i} selected={i===this.state.currentRole} onClick={() => this.setState({currentRole:i})} button className={classes.listItem+\" \"+classes[item.color+\"Text\"]}>\n                                    {item.name}\n\n                                    <IconButton disabled={cantEditRoles} onClick={() => this.handleDeleteRole(i)} className={classes.listIcon}  edge=\"end\" aria-label=\"comments\">\n                                        <DeleteOutline />\n                                    </IconButton>\n\n                                </ListItem>\n                            ))}\n\n\n                        </Reorder>\n\n                    </List>:\"\"}<br/>\n                            <Button variant=\"contained\" disabled={cantEditRoles} fullWidth color=\"primary\" onClick={this.handleAddRole} component=\"span\">\n                                Добавить роль\n                            </Button>\n                        </Grid>\n                        <Grid className={classes.rightsList} item xs={8}>\n                            <List>\n                                <ListItem>\n                                    <TextField\n                                        variant=\"outlined\"\n                                        margin=\"normal\"\n                                        required\n                                        fullWidth\n                                        onChange={this.handleRoleNameChange}\n                                        label=\"Имя роли\"\n                                        autoFocus\n                                        value={this.state.roles.length > this.state.currentRole ? this.state.roles[this.state.currentRole].name : \"\"}\n                                        disabled={cantEditRoles}\n                                    />\n                                </ListItem>\n                                <Divider/>\n                                <ListItem>\n                                    <ListItemText\n                                        primary=\"Цвет роли\"\n                                        secondary={<div><br/><br/><br/></div>}/>\n                                    <ListItemSecondaryAction>\n                                        <br/>\n                                        <Button disabled={cantEditRoles} variant=\"contained\" onClick={() => this.handleColorChange(\"default\")} className={classes.colorBtn} color=\"default\">{\"default\" === roleColor ? <Check/> : \"\"}</Button>\n                                        <Button disabled={cantEditRoles} variant=\"contained\" onClick={() => this.handleColorChange(\"red\")} className={classes.colorBtn+\" \"+classes.red} color=\"primary\">{\"red\" === roleColor ? <Check/> : \"\"}</Button>\n                                        <Button disabled={cantEditRoles} variant=\"contained\" onClick={() => this.handleColorChange(\"pink\")} className={classes.colorBtn+\" \"+classes.pink} color=\"primary\">{\"pink\" === roleColor ? <Check/> : \"\"}</Button>\n                                        <Button disabled={cantEditRoles} variant=\"contained\" onClick={() => this.handleColorChange(\"purple\")} className={classes.colorBtn+\" \"+classes.purple} color=\"primary\">{\"purple\" === roleColor ? <Check/> : \"\"}</Button>\n                                        <Button disabled={cantEditRoles} variant=\"contained\" onClick={() => this.handleColorChange(\"lime\")} className={classes.colorBtn+\" \"+classes.lime} color=\"primary\">{\"lime\" === roleColor ? <Check/> : \"\"}</Button>\n                                        <Button disabled={cantEditRoles} variant=\"contained\" onClick={() => this.handleColorChange(\"blue\")} className={classes.colorBtn+\" \"+classes.blue} color=\"primary\">{\"blue\" === roleColor ? <Check/> : \"\"}</Button>\n                                        <Button disabled={cantEditRoles} variant=\"contained\" onClick={() => this.handleColorChange(\"cyan\")} className={classes.colorBtn+\" \"+classes.cyan} color=\"primary\">{\"cyan\" === roleColor ? <Check/> : \"\"}</Button>\n                                        <Button disabled={cantEditRoles} variant=\"contained\" onClick={() => this.handleColorChange(\"green\")} className={classes.colorBtn+\" \"+classes.green} color=\"primary\">{\"green\" === roleColor ? <Check/> : \"\"}</Button>\n                                        <Button disabled={cantEditRoles} variant=\"contained\" onClick={() => this.handleColorChange(\"yellow\")} className={classes.colorBtn+\" \"+classes.yellow} color=\"primary\">{\"yellow\" === roleColor ? <Check/> : \"\"}</Button>\n                                        <Button disabled={cantEditRoles} variant=\"contained\" onClick={() => this.handleColorChange(\"orange\")} className={classes.colorBtn+\" \"+classes.orange} color=\"primary\">{\"orange\" === roleColor ? <Check/> : \"\"}</Button>\n\n                                    </ListItemSecondaryAction>\n                                </ListItem>\n                                <Divider/>\n                                <ListItem>\n                                    <ListItemText\n                                        primary=\"Управление сервером\"\n                                        secondary=\"Дает право редактировать сервер\"/>\n                                    <ListItemSecondaryAction>\n                                        <Switch\n                                            onChange={(e,value) => this.handleRoleSwitchChange(\"server_edit\",value)}\n                                            edge=\"end\"\n                                            disabled={cantEditRoles}\n                                            checked={this.state.roles.length > this.state.currentRole ? this.state.roles[this.state.currentRole].server_edit === 1 : false}\n                                        />\n                                    </ListItemSecondaryAction>\n                                </ListItem>\n                                <Divider/>\n                                <ListItem>\n                                    <ListItemText\n                                        primary=\"Управление правами\"\n                                        secondary=\"Дает право менять настройки ролей\"/>\n                                    <ListItemSecondaryAction>\n                                        <Switch\n                                            edge=\"end\"\n                                            disabled={cantEditRoles}\n                                            onChange={(e,value) => this.handleRoleSwitchChange(\"role_edit\",value)}\n                                            checked={this.state.roles.length > this.state.currentRole ? this.state.roles[this.state.currentRole].role_edit === 1 : false}\n                                        />\n                                    </ListItemSecondaryAction>\n                                </ListItem>\n                                <Divider/>\n                                <ListItem>\n                                    <ListItemText\n                                        primary=\"Отправка сообщений\"\n                                        secondary=\"Дает право писать в комнаты\"/>\n                                    <ListItemSecondaryAction>\n                                        <Switch\n                                            edge=\"end\"\n                                            disabled={cantEditRoles}\n                                            onChange={(e,value) => this.handleRoleSwitchChange(\"msg_send\",value)}\n                                            checked={ this.state.roles.length > this.state.currentRole ? this.state.roles[this.state.currentRole].msg_send === 1 : false}\n                                        />\n                                    </ListItemSecondaryAction>\n                                </ListItem>\n                                <Divider/>\n                                <ListItem>\n                                    <ListItemText\n                                        primary=\"Удаление сообщений\"\n                                        secondary=\"Дает право удалять сообщения пользователей с низшими ролями\"/>\n                                    <ListItemSecondaryAction>\n                                        <Switch\n                                            edge=\"end\"\n                                            disabled={cantEditRoles}\n                                            onChange={(e,value) => this.handleRoleSwitchChange(\"msg_delete\",value)}\n                                            checked={this.state.roles.length > this.state.currentRole ? this.state.roles[this.state.currentRole].msg_delete === 1 : false}\n                                        />\n                                    </ListItemSecondaryAction>\n                                </ListItem>\n                                <Divider/>\n                                <ListItem>\n                                    <ListItemText\n                                        primary=\"Управление комнатами\"\n                                        secondary=\"Дает право создавать, удалять и редактировать комнаты\"/>\n                                    <ListItemSecondaryAction>\n                                        <Switch\n                                            edge=\"end\"\n                                            disabled={cantEditRoles}\n                                            onChange={(e,value) => this.handleRoleSwitchChange(\"room_edit\",value)}\n                                            checked={this.state.roles.length > this.state.currentRole ? this.state.roles[this.state.currentRole].room_edit === 1 : false}\n                                        />\n                                    </ListItemSecondaryAction>\n                                </ListItem>\n                            </List>\n                        </Grid>\n                    </Grid>\n                </TabPanel>\n                <Grid container justify=\"center\">\n                    <Button variant=\"contained\" color=\"primary\" onClick={this.handleSubmit} component=\"span\">\n                        {btnText}\n                    </Button>\n                </Grid>\n            </DialogContent>\n        </Dialog>);\n    }\n}\nconst styles = {\n    inputFile:{\n        display: 'none',\n    },\n    listIcon:{\n        position:\"absolute\",\n        right:\"15px\"\n\n    },\n    dragPlaceholder:{\n        height:\"56px\",\n        border:\"2px dashed #999\"\n    },\n    rightsList:{\n        borderLeft:\"1px solid #999\"\n    },\n    listItem:{\n        lineHeight:\"40px\"\n    },\n    bg:{\n      \"max-width\":\"200px\"\n    },\n    tabs:{\n        paddingTop:\"16px\",\n        paddingBottom:\"16px\",\n    },\n    avatar:{\n        \"margin-right\":\"30px\"\n    },\n    colorBtn:{\n        height:\"35px\",\n        minWidth:\"35px\",\n        width:\"35px\",\n        marginRight:\"10px\"\n    },\n    red:{\n        background:\"#e53935\"\n    },\n    pink:{\n        background:pink[600],\n        '&:hover':{\n            background:pink[800],\n        }\n    },\n    purple:{\n        background:purple[600],\n        '&:hover':{\n            background:purple[800],\n        }\n    },\n    lime:{\n        background:lime[600],\n        '&:hover':{\n            background:lime[800],\n        }\n    },\n    blue:{\n        background:blue[600],\n        '&:hover':{\n            background:blue[800],\n        }\n    },\n    cyan:{\n        background:cyan[600],\n        '&:hover':{\n            background:cyan[800],\n        }\n    },\n    green:{\n        background:green[600],\n        '&:hover':{\n            background:green[800],\n        }\n    },\n    yellow:{\n        background:yellow[600],\n        '&:hover':{\n            background:yellow[800],\n        }\n    },\n    orange:{\n        background:orange[600],\n        '&:hover':{\n            background:orange[800],\n        }\n    },\n    redText:{\n        color:red[400]\n    },\n    pinkText:{\n        color:pink[400],\n    },\n    purpleText:{\n        color:purple[400],\n    },\n    limeText:{\n        color:lime[400],\n    },\n    blueText:{\n        color:blue[400],\n    },\n    cyanText:{\n        color:cyan[400],\n    },\n    greenText:{\n        color:green[400],\n    },\n    yellowText:{\n        color:yellow[400],\n    },\n    orangeText:{\n        color:orange[400],\n    }\n};\nexport default withStyles(styles)(AddServerDialog);","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\DialogTitleWithClose.js",[],"C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\AddRoomDialog.js",["212","213","214","215"],"import * as React from \"react\";\nimport TokenContext from \"./AppContext\";\nimport {Button, Dialog, DialogContent, FormControlLabel, Grid, Switch, TextField, withStyles} from \"@material-ui/core\";\nimport DialogTitleWithClose from \"./DialogTitleWithClose\";\n\nclass AddRoomDialog extends React.Component {\n    static contextType = TokenContext;\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            name: this.props.name,\n            isGlobal:this.props.isGlobal == null ? false : this.props.isGlobal,\n            bg:this.props.bg == null ? null : this.props.bg,\n            isNameError:\"\",\n            description:this.props.description\n        }\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleFileUploaded = this.handleFileUploaded.bind(this);\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.bg !== this.props.bg) {\n            this.setState({bg:this.props.bg})\n        }\n        if (prevProps.name !== this.props.name) {\n            this.setState({name:this.props.name});\n        }\n        if (prevProps.description !== this.props.description) {\n            this.setState({description:this.props.description});\n        }\n        if (prevProps.isGlobal !== this.props.isGlobal) {\n            this.setState({isGlobal:this.props.isGlobal});\n        }\n    }\n    handleSubmit(){\n        if(this.state.name == null || this.state.name.length == 0){\n            this.setState({isNameError:\"Введите название\"});\n            return;\n        }\n        if(this.state.name.length > 35){\n            this.setState({isNameError:\"Максимальная длина - 35 символов\"});\n            return;\n        }\n        let roomId = this.props.roomId == null ? \"\" : \"&room_id=\"+this.props.roomId;\n        let desc = this.state.description == null ? \"\" : this.state.description;\n        let url = this.props.roomId == null ? \"https://rp-ruler.ru/api/add_room.php\" : \"https://rp-ruler.ru/api/edit_room.php\";\n        const requestOptions = {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: \"token=\"+this.context.token+\"&name=\"+this.state.name+\"&server_id=\"+this.props.serverId+\"&is_global=\"+this.state.isGlobal+\"&bg=\"+this.state.bg+\n                \"&desc=\"+desc+roomId\n        };\n        fetch(url,requestOptions)\n            .then(response => response.json())\n            .then((data)=>{\n                this.props.onCreate();\n                this.props.onClose();\n            })\n    }\n    handleFileUploaded(event){\n\n        if(event.target.files != null && event.target.files.length != 0){\n            let file = event.target.files[0];\n            const formData = new FormData();\n            formData.append('avatar', file);\n            formData.append(\"token\",this.context.token);\n            const requestOptions = {\n                method: 'POST',\n                body: formData\n            };\n            fetch(\"https://rp-ruler.ru/api/upload_file.php\",requestOptions).then(response => response.json())\n                .then((data)=>{\n                        this.setState({bg:data.filename});\n\n                });\n\n        }\n\n    }\n\n    render() {\n        const {classes} = this.props;\n        let title = this.props.roomId == null ? \"Добавление комнаты\" :  \"Редактирование комнаты\";\n        let btnText = this.props.roomId == null ? \"Добавить комнату\" :  \"Сохранить\";\n        return (<Dialog maxWidth=\"sm\" fullWidth open={this.props.open} onClose={this.props.onClose}\n                        aria-labelledby=\"form-dialog-title\">\n            <DialogTitleWithClose id=\"customized-dialog-title\" onClose={this.props.onClose}>\n                {title}\n            </DialogTitleWithClose>\n            <DialogContent dividers>\n                <Grid container alignItems=\"center\" direction=\"column\">\n                    <img className={classes.bg} src={this.state.bg === null ? null : \"https://rp-ruler.ru/upload/\"+this.state.bg}/>\n                    <br/>\n                    <input onChange={this.handleFileUploaded} name=\"bg\" accept=\"image/*\" className={classes.inputFile} id=\"bg-file\" type=\"file\"/>\n                    <label htmlFor=\"bg-file\">\n                        {this.state.bg == null ?\n                        <Button variant=\"contained\" color=\"primary\" component=\"span\">\n                            Загрузить фон комнаты.\n                        </Button> : \"\"}\n                    </label>\n                </Grid>\n                {this.state.bg != null ? <Grid container alignItems=\"center\" direction=\"column\">\n                    <Button onClick={() => this.setState({bg:null})} variant=\"contained\" color=\"primary\" component=\"span\">\n                        Удалить фон комнаты.\n                    </Button>\n                </Grid> : \"\"}\n\n                <TextField\n                    variant=\"outlined\"\n                    margin=\"normal\"\n                    required\n                    fullWidth\n                    helperText={this.state.isNameError}\n                    error={this.state.isNameError.length != 0}\n                    onChange={(e)=>this.setState({name:e.target.value})}\n                    label=\"Название комнаты\"\n                    autoFocus\n                    value={this.state.name}\n                />\n\n                <TextField\n                    variant=\"outlined\"\n                    margin=\"normal\"\n                    fullWidth\n                    multiline\n                    rows={3}\n                    onChange={(e)=>this.setState({description:e.target.value})}\n                    label=\"Описание комнаты\"\n                    autoFocus\n                    value={this.state.description}\n                />\n\n                <FormControlLabel\n                    control={\n                        <Switch\n                            checked={this.state.isGlobal}\n                            onChange={(e)=>this.setState({isGlobal:e.target.checked})}\n                            name=\"checkedB\"\n                            color=\"primary\"\n                        />\n                    }\n                    label=\"Глобальная\"\n                />\n\n                <Grid container justify=\"center\">\n                    <Button variant=\"contained\" color=\"primary\" onClick={this.handleSubmit} component=\"span\">\n                        {btnText}\n                    </Button>\n                </Grid>\n            </DialogContent>\n        </Dialog>)\n    }\n}\nconst styles = {\n    inputFile:{\n        display: 'none',\n    },\n    bg:{\n        \"max-width\":\"200px\"\n    },\n\n};\n\nexport default withStyles(styles)(AddRoomDialog);","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\StyledBadge.js",[],"C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\AddCategoryDialog.js",["216","217","218","219","220"],"import * as React from \"react\";\r\nimport TokenContext from \"./AppContext\";\r\nimport {Button, Dialog, DialogContent, FormControlLabel, Grid, Switch, TextField, withStyles} from \"@material-ui/core\";\r\nimport DialogTitleWithClose from \"./DialogTitleWithClose\";\r\n\r\nclass AddRoomDialog extends React.Component {\r\n    static contextType = TokenContext;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            name: this.props.name,\r\n            isNameError:\"\",\r\n        }\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.name !== this.props.name) {\r\n            this.setState({name:this.props.name});\r\n        }\r\n    }\r\n    handleSubmit(){\r\n        if(this.state.name == null || this.state.name.length == 0){\r\n            this.setState({isNameError:\"Введите название\"});\r\n            return;\r\n        }\r\n        if(this.state.name.length > 35){\r\n            this.setState({isNameError:\"Максимальная длина - 35 символов\"});\r\n            return;\r\n        }\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/x-www-form-urlencoded',\r\n            },\r\n            body: \"token=\"+this.context.token+\"&name=\"+this.state.name+\"&server_id=\"+this.props.serverId\r\n        };\r\n        fetch(\"https://rp-ruler.ru/api/add_category.php\",requestOptions)\r\n            .then(response => response.json())\r\n            .then((data)=>{\r\n                this.props.onCreate();\r\n                this.props.onClose();\r\n            })\r\n    }\r\n\r\n\r\n    render() {\r\n        const {classes} = this.props;\r\n        return (<Dialog maxWidth=\"sm\" fullWidth open={this.props.open} onClose={this.props.onClose}\r\n                        aria-labelledby=\"form-dialog-title\">\r\n            <DialogTitleWithClose id=\"customized-dialog-title\" onClose={this.props.onClose}>\r\n                Добавление категории\r\n            </DialogTitleWithClose>\r\n            <DialogContent dividers>\r\n\r\n                <TextField\r\n                    variant=\"outlined\"\r\n                    margin=\"normal\"\r\n                    required\r\n                    fullWidth\r\n                    helperText={this.state.isNameError}\r\n                    error={this.state.isNameError.length != 0}\r\n                    onChange={(e)=>this.setState({name:e.target.value})}\r\n                    label=\"Название категории\"\r\n                    autoFocus\r\n                    value={this.state.name}\r\n                />\r\n\r\n                <Grid container justify=\"center\">\r\n                    <Button variant=\"contained\" color=\"primary\" onClick={this.handleSubmit} component=\"span\">\r\n                        Создать категорию\r\n                    </Button>\r\n                </Grid>\r\n            </DialogContent>\r\n        </Dialog>)\r\n    }\r\n}\r\nconst styles = {\r\n    inputFile:{\r\n        display: 'none',\r\n    },\r\n    bg:{\r\n        \"max-width\":\"200px\"\r\n    },\r\n\r\n};\r\n\r\nexport default withStyles(styles)(AddRoomDialog);","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\Utils.js",[],{"ruleId":"221","replacedBy":"222"},{"ruleId":"223","replacedBy":"224"},{"ruleId":"225","severity":1,"message":"226","line":52,"column":58,"nodeType":"227","messageId":"228","endLine":52,"endColumn":60},{"ruleId":"225","severity":1,"message":"226","line":80,"column":40,"nodeType":"227","messageId":"228","endLine":80,"endColumn":42},{"ruleId":"229","severity":1,"message":"230","line":189,"column":9,"nodeType":"231","messageId":"232","endLine":189,"endColumn":20},{"ruleId":"229","severity":1,"message":"233","line":5,"column":5,"nodeType":"231","messageId":"232","endLine":5,"endColumn":14},{"ruleId":"229","severity":1,"message":"233","line":5,"column":5,"nodeType":"231","messageId":"232","endLine":5,"endColumn":14},{"ruleId":"229","severity":1,"message":"234","line":7,"column":5,"nodeType":"231","messageId":"232","endLine":7,"endColumn":21},{"ruleId":"229","severity":1,"message":"235","line":15,"column":8,"nodeType":"231","messageId":"232","endLine":15,"endColumn":19},{"ruleId":"225","severity":1,"message":"226","line":50,"column":29,"nodeType":"227","messageId":"228","endLine":50,"endColumn":31},{"ruleId":"225","severity":1,"message":"226","line":54,"column":29,"nodeType":"227","messageId":"228","endLine":54,"endColumn":31},{"ruleId":"225","severity":1,"message":"236","line":108,"column":64,"nodeType":"227","messageId":"228","endLine":108,"endColumn":66},{"ruleId":"225","severity":1,"message":"236","line":122,"column":63,"nodeType":"227","messageId":"228","endLine":122,"endColumn":65},{"ruleId":"225","severity":1,"message":"236","line":136,"column":67,"nodeType":"227","messageId":"228","endLine":136,"endColumn":69},{"ruleId":"229","severity":1,"message":"237","line":3,"column":5,"nodeType":"231","messageId":"232","endLine":3,"endColumn":11},{"ruleId":"229","severity":1,"message":"238","line":5,"column":27,"nodeType":"231","messageId":"232","endLine":5,"endColumn":31},{"ruleId":"229","severity":1,"message":"239","line":5,"column":33,"nodeType":"231","messageId":"232","endLine":5,"endColumn":41},{"ruleId":"229","severity":1,"message":"240","line":5,"column":43,"nodeType":"231","messageId":"232","endLine":5,"endColumn":57},{"ruleId":"229","severity":1,"message":"241","line":5,"column":59,"nodeType":"231","messageId":"232","endLine":5,"endColumn":71},{"ruleId":"229","severity":1,"message":"242","line":11,"column":10,"nodeType":"231","messageId":"232","endLine":11,"endColumn":16},{"ruleId":"243","severity":1,"message":"244","line":85,"column":21,"nodeType":"245","endLine":85,"endColumn":31},{"ruleId":"243","severity":1,"message":"244","line":86,"column":21,"nodeType":"245","endLine":86,"endColumn":31},{"ruleId":"225","severity":1,"message":"236","line":239,"column":31,"nodeType":"227","messageId":"228","endLine":239,"endColumn":33},{"ruleId":"225","severity":1,"message":"236","line":292,"column":39,"nodeType":"227","messageId":"228","endLine":292,"endColumn":41},{"ruleId":"225","severity":1,"message":"236","line":372,"column":29,"nodeType":"227","messageId":"228","endLine":372,"endColumn":31},{"ruleId":"225","severity":1,"message":"226","line":499,"column":52,"nodeType":"227","messageId":"228","endLine":499,"endColumn":54},{"ruleId":"225","severity":1,"message":"226","line":503,"column":55,"nodeType":"227","messageId":"228","endLine":503,"endColumn":57},{"ruleId":"229","severity":1,"message":"246","line":2,"column":17,"nodeType":"231","messageId":"232","endLine":2,"endColumn":23},{"ruleId":"229","severity":1,"message":"247","line":3,"column":9,"nodeType":"231","messageId":"232","endLine":3,"endColumn":22},{"ruleId":"229","severity":1,"message":"248","line":10,"column":8,"nodeType":"231","messageId":"232","endLine":10,"endColumn":17},{"ruleId":"225","severity":1,"message":"226","line":50,"column":41,"nodeType":"227","messageId":"228","endLine":50,"endColumn":43},{"ruleId":"229","severity":1,"message":"249","line":19,"column":5,"nodeType":"231","messageId":"232","endLine":19,"endColumn":14},{"ruleId":"229","severity":1,"message":"250","line":21,"column":5,"nodeType":"231","messageId":"232","endLine":21,"endColumn":9},{"ruleId":"229","severity":1,"message":"251","line":26,"column":9,"nodeType":"231","messageId":"232","endLine":26,"endColumn":14},{"ruleId":"229","severity":1,"message":"252","line":27,"column":9,"nodeType":"231","messageId":"232","endLine":27,"endColumn":21},{"ruleId":"229","severity":1,"message":"253","line":28,"column":18,"nodeType":"231","messageId":"232","endLine":28,"endColumn":25},{"ruleId":"225","severity":1,"message":"226","line":127,"column":71,"nodeType":"227","messageId":"228","endLine":127,"endColumn":73},{"ruleId":"229","severity":1,"message":"254","line":9,"column":5,"nodeType":"231","messageId":"232","endLine":9,"endColumn":10},{"ruleId":"229","severity":1,"message":"255","line":13,"column":60,"nodeType":"231","messageId":"232","endLine":13,"endColumn":66},{"ruleId":"225","severity":1,"message":"236","line":51,"column":67,"nodeType":"227","messageId":"228","endLine":51,"endColumn":69},{"ruleId":"229","severity":1,"message":"256","line":4,"column":13,"nodeType":"231","messageId":"232","endLine":4,"endColumn":23},{"ruleId":"229","severity":1,"message":"257","line":4,"column":25,"nodeType":"231","messageId":"232","endLine":4,"endColumn":39},{"ruleId":"229","severity":1,"message":"258","line":7,"column":35,"nodeType":"231","messageId":"232","endLine":7,"endColumn":45},{"ruleId":"225","severity":1,"message":"226","line":98,"column":32,"nodeType":"227","messageId":"228","endLine":98,"endColumn":34},{"ruleId":"225","severity":1,"message":"236","line":99,"column":27,"nodeType":"227","messageId":"228","endLine":99,"endColumn":29},{"ruleId":"225","severity":1,"message":"226","line":99,"column":57,"nodeType":"227","messageId":"228","endLine":99,"endColumn":59},{"ruleId":"225","severity":1,"message":"236","line":102,"column":21,"nodeType":"227","messageId":"228","endLine":102,"endColumn":23},{"ruleId":"225","severity":1,"message":"226","line":102,"column":51,"nodeType":"227","messageId":"228","endLine":102,"endColumn":53},{"ruleId":"225","severity":1,"message":"236","line":120,"column":25,"nodeType":"227","messageId":"228","endLine":120,"endColumn":27},{"ruleId":"225","severity":1,"message":"226","line":120,"column":55,"nodeType":"227","messageId":"228","endLine":120,"endColumn":57},{"ruleId":"225","severity":1,"message":"236","line":121,"column":25,"nodeType":"227","messageId":"228","endLine":121,"endColumn":27},{"ruleId":"225","severity":1,"message":"226","line":121,"column":55,"nodeType":"227","messageId":"228","endLine":121,"endColumn":57},{"ruleId":"225","severity":1,"message":"226","line":140,"column":73,"nodeType":"227","messageId":"228","endLine":140,"endColumn":75},{"ruleId":"229","severity":1,"message":"254","line":2,"column":9,"nodeType":"231","messageId":"232","endLine":2,"endColumn":14},{"ruleId":"225","severity":1,"message":"236","line":169,"column":68,"nodeType":"227","messageId":"228","endLine":169,"endColumn":70},{"ruleId":"229","severity":1,"message":"259","line":3,"column":17,"nodeType":"231","messageId":"232","endLine":3,"endColumn":22},{"ruleId":"225","severity":1,"message":"226","line":62,"column":57,"nodeType":"227","messageId":"228","endLine":62,"endColumn":59},{"ruleId":"225","severity":1,"message":"236","line":79,"column":86,"nodeType":"227","messageId":"228","endLine":79,"endColumn":88},{"ruleId":"229","severity":1,"message":"238","line":9,"column":5,"nodeType":"231","messageId":"232","endLine":9,"endColumn":9},{"ruleId":"260","severity":1,"message":"261","line":25,"column":40,"nodeType":"262","messageId":"263","endLine":25,"endColumn":42},{"ruleId":"229","severity":1,"message":"264","line":4,"column":19,"nodeType":"231","messageId":"232","endLine":4,"endColumn":23},{"ruleId":"229","severity":1,"message":"265","line":6,"column":16,"nodeType":"231","messageId":"232","endLine":6,"endColumn":26},{"ruleId":"229","severity":1,"message":"266","line":6,"column":28,"nodeType":"231","messageId":"232","endLine":6,"endColumn":41},{"ruleId":"229","severity":1,"message":"267","line":8,"column":5,"nodeType":"231","messageId":"232","endLine":8,"endColumn":14},{"ruleId":"229","severity":1,"message":"268","line":14,"column":8,"nodeType":"231","messageId":"232","endLine":14,"endColumn":12},{"ruleId":"229","severity":1,"message":"269","line":2,"column":17,"nodeType":"231","messageId":"232","endLine":2,"endColumn":21},{"ruleId":"229","severity":1,"message":"233","line":5,"column":5,"nodeType":"231","messageId":"232","endLine":5,"endColumn":14},{"ruleId":"225","severity":1,"message":"226","line":68,"column":36,"nodeType":"227","messageId":"228","endLine":68,"endColumn":38},{"ruleId":"225","severity":1,"message":"226","line":87,"column":36,"nodeType":"227","messageId":"228","endLine":87,"endColumn":38},{"ruleId":"225","severity":1,"message":"236","line":100,"column":32,"nodeType":"227","messageId":"228","endLine":100,"endColumn":34},{"ruleId":"225","severity":1,"message":"226","line":114,"column":36,"nodeType":"227","messageId":"228","endLine":114,"endColumn":38},{"ruleId":"229","severity":1,"message":"270","line":34,"column":5,"nodeType":"231","messageId":"232","endLine":34,"endColumn":21},{"ruleId":"229","severity":1,"message":"271","line":35,"column":5,"nodeType":"231","messageId":"232","endLine":35,"endColumn":18},{"ruleId":"229","severity":1,"message":"272","line":36,"column":5,"nodeType":"231","messageId":"232","endLine":36,"endColumn":27},{"ruleId":"229","severity":1,"message":"273","line":40,"column":21,"nodeType":"231","messageId":"232","endLine":40,"endColumn":31},{"ruleId":"225","severity":1,"message":"226","line":78,"column":46,"nodeType":"227","messageId":"228","endLine":78,"endColumn":48},{"ruleId":"225","severity":1,"message":"226","line":116,"column":46,"nodeType":"227","messageId":"228","endLine":116,"endColumn":48},{"ruleId":"225","severity":1,"message":"236","line":141,"column":68,"nodeType":"227","messageId":"228","endLine":141,"endColumn":70},{"ruleId":"225","severity":1,"message":"226","line":152,"column":41,"nodeType":"227","messageId":"228","endLine":152,"endColumn":43},{"ruleId":"225","severity":1,"message":"226","line":173,"column":35,"nodeType":"227","messageId":"228","endLine":173,"endColumn":37},{"ruleId":"274","severity":1,"message":"275","line":272,"column":46,"nodeType":"276","endLine":272,"endColumn":125},{"ruleId":"225","severity":1,"message":"236","line":297,"column":58,"nodeType":"227","messageId":"228","endLine":297,"endColumn":60},{"ruleId":"225","severity":1,"message":"226","line":36,"column":62,"nodeType":"227","messageId":"228","endLine":36,"endColumn":64},{"ruleId":"225","severity":1,"message":"236","line":64,"column":68,"nodeType":"227","messageId":"228","endLine":64,"endColumn":70},{"ruleId":"274","severity":1,"message":"275","line":94,"column":21,"nodeType":"276","endLine":94,"endColumn":132},{"ruleId":"225","severity":1,"message":"236","line":116,"column":58,"nodeType":"227","messageId":"228","endLine":116,"endColumn":60},{"ruleId":"229","severity":1,"message":"234","line":3,"column":40,"nodeType":"231","messageId":"232","endLine":3,"endColumn":56},{"ruleId":"229","severity":1,"message":"277","line":3,"column":64,"nodeType":"231","messageId":"232","endLine":3,"endColumn":70},{"ruleId":"225","severity":1,"message":"226","line":23,"column":62,"nodeType":"227","messageId":"228","endLine":23,"endColumn":64},{"ruleId":"229","severity":1,"message":"278","line":48,"column":16,"nodeType":"231","messageId":"232","endLine":48,"endColumn":23},{"ruleId":"225","severity":1,"message":"236","line":62,"column":58,"nodeType":"227","messageId":"228","endLine":62,"endColumn":60},"no-native-reassign",["279"],"no-negated-in-lhs",["280"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-unused-vars","'contextType' is assigned a value but never used.","Identifier","unusedVar","'Container' is defined but never used.","'FormControlLabel' is defined but never used.","'ParticlesBg' is defined but never used.","Expected '!==' and instead saw '!='.","'Avatar' is defined but never used.","'List' is defined but never used.","'ListItem' is defined but never used.","'ListItemAvatar' is defined but never used.","'ListItemText' is defined but never used.","'Picker' is defined but never used.","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","'Dialog' is defined but never used.","'AssignmentInd' is defined but never used.","'UsersList' is defined but never used.","'ExitToApp' is defined but never used.","'More' is defined but never used.","'Alert' is defined but never used.","'AlertWarning' is defined but never used.","'reorder' is defined but never used.","'Paper' is defined but never used.","'Remove' is defined but never used.","'IconButton' is defined but never used.","'LinearProgress' is defined but never used.","'Typography' is defined but never used.","'Badge' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'Grid' is defined but never used.","'makeStyles' is defined but never used.","'OutlinedInput' is defined but never used.","'TextField' is defined but never used.","'clsx' is defined but never used.","'Fade' is defined but never used.","'reorderImmutable' is defined but never used.","'reorderFromTo' is defined but never used.","'reorderFromToImmutable' is defined but never used.","'deepPurple' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Switch' is defined but never used.","'classes' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]