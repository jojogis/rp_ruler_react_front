[{"C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\index.js":"1","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\App.js":"2","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\reportWebVitals.js":"3","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\Auth.js":"4","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\Copyright.js":"5","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\Reg.js":"6","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\Chat.js":"7","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\MainMenu.js":"8","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\AppContext.js":"9","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\RoomsList.js":"10","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\ServerName.js":"11","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\RoomAppBar.js":"12","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\Messages.js":"13","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\InputReplyMessage.js":"14","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\ProfileDialog.js":"15","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\UsersList.js":"16","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\FormDialog.js":"17","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\ServersDialog.js":"18","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\ServerCard.js":"19","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\UserPopover.js":"20","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\Emoji.js":"21","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\Restore.js":"22","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\AddServerDialog.js":"23","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\DialogTitleWithClose.js":"24","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\AddRoomDialog.js":"25"},{"size":503,"mtime":1609784667425,"results":"26","hashOfConfig":"27"},{"size":6154,"mtime":1613502957259,"results":"28","hashOfConfig":"27"},{"size":362,"mtime":499162500000,"results":"29","hashOfConfig":"27"},{"size":5215,"mtime":1613603380417,"results":"30","hashOfConfig":"27"},{"size":420,"mtime":1609796221422,"results":"31","hashOfConfig":"27"},{"size":6286,"mtime":1613065727481,"results":"32","hashOfConfig":"27"},{"size":22038,"mtime":1614206239892,"results":"33","hashOfConfig":"27"},{"size":3287,"mtime":1613782564187,"results":"34","hashOfConfig":"27"},{"size":275,"mtime":1613046066746,"results":"35","hashOfConfig":"27"},{"size":5328,"mtime":1613786451071,"results":"36","hashOfConfig":"27"},{"size":5445,"mtime":1613675928248,"results":"37","hashOfConfig":"27"},{"size":576,"mtime":1609880521176,"results":"38","hashOfConfig":"27"},{"size":5831,"mtime":1613679491530,"results":"39","hashOfConfig":"27"},{"size":1402,"mtime":1610393308212,"results":"40","hashOfConfig":"27"},{"size":15017,"mtime":1614197500610,"results":"41","hashOfConfig":"27"},{"size":3513,"mtime":1613226682106,"results":"42","hashOfConfig":"27"},{"size":1604,"mtime":1610432673966,"results":"43","hashOfConfig":"27"},{"size":7824,"mtime":1613783861100,"results":"44","hashOfConfig":"27"},{"size":2707,"mtime":1613783707788,"results":"45","hashOfConfig":"27"},{"size":1551,"mtime":1612828591413,"results":"46","hashOfConfig":"27"},{"size":3200,"mtime":1613669270667,"results":"47","hashOfConfig":"27"},{"size":12174,"mtime":1613065787688,"results":"48","hashOfConfig":"27"},{"size":9610,"mtime":1614206075785,"results":"49","hashOfConfig":"27"},{"size":1001,"mtime":1613250418288,"results":"50","hashOfConfig":"27"},{"size":6206,"mtime":1614206537940,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"kco36v",{"filePath":"55","messages":"56","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"54"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"54"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"54"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"54"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"54"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"54"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"54"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"54"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"54"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"54"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"54"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"54"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"54"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"54"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\index.js",[],["117","118"],"C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\App.js",["119","120","121","122","123","124"],"import Cookies from 'universal-cookie';\nimport './App.css';\nimport * as React from \"react\";\nimport Auth from \"./Auth\";\nimport Reg from \"./Reg\";\nimport Chat from \"./Chat\";\nimport {createMuiTheme} from \"@material-ui/core\";\nimport {ThemeProvider} from \"@material-ui/core\";\nimport {Route, Switch, Redirect, useHistory, useLocation} from \"react-router\";\nimport {BrowserRouter as Router} from \"react-router-dom\";\nimport TokenContext from \"./AppContext\";\nimport Restore from \"./Restore\";\nimport ParticlesBg from \"particles-bg\";\nimport {useEffect} from \"react\";\n\n\nexport class App extends React.Component{\n\n    constructor(props) {\n        super(props);\n        let darkTheme = createMuiTheme({\n            palette: {\n                type: 'dark',\n                primary: {\n                    main: \"#ff5722\",\n                },\n                secondary: {\n                    main: \"#ff5722\",\n                },\n            },\n        });\n        let lightTheme = createMuiTheme({\n            palette: {\n                type: 'light',\n                primary: {\n                    main: \"#ff5722\",\n                },\n                secondary: {\n                    main: \"#ff5722\",\n                },\n            },\n        });\n\n\n\n\n\n        const cookies = new Cookies();\n        const token = cookies.get(\"token\");\n        const user_id = cookies.get(\"user_id\");\n        const isDarkTheme = cookies.get(\"is_dark_theme\") == \"1\";\n        this.handleLogin = this.handleLogin.bind(this);\n        this.toggleTheme = this.toggleTheme.bind(this);\n        this.logout = this.logout.bind(this);\n        this.state = {\n            token:token,\n            user_id:user_id,\n            isDarkTheme:isDarkTheme,\n            toggleTheme:this.toggleTheme,\n            logout:this.logout,\n            isAnimationEnable:true,\n            toggleAnimation: () => {this.setState(\n                (state)=>{return {isAnimationEnable:!state.isAnimationEnable}\n                })},\n            theme:isDarkTheme ? darkTheme : lightTheme\n        };\n        if(this.state.token != null){\n            const requestOptions = {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/x-www-form-urlencoded',\n                },\n                body: \"token=\"+this.state.token\n            };\n            fetch(\"https://rp-ruler.ru/api/check_token.php\",requestOptions)\n                .then(response => response.json())\n                .then((data)=>{\n                    if(data[\"correct\"] == 0){\n                        this.logout();\n                    }\n                })\n        }\n\n\n\n    }\n\n    logout(){\n        const cookies = new Cookies();\n        cookies.set(\"token\",null);\n        cookies.set(\"user_id\",null);\n        this.setState({token:null,user_id:null});\n    }\n\n    handleLogin(token,id){\n        const cookies = new Cookies();\n        cookies.set(\"token\",token);\n        cookies.set(\"user_id\",id);\n        this.setState({token:token,user_id:id});\n    }\n\n\n\n    toggleTheme () {\n        let darkTheme = createMuiTheme({\n            palette: {\n                type: 'dark',\n                primary: {\n                    main: \"#ff5722\",\n                },\n                secondary: {\n                    main: \"#ff5722\",\n                },\n            },\n        });\n        let lightTheme = createMuiTheme({\n            palette: {\n                type: 'light',\n                primary: {\n                    main: \"#ff5722\",\n                },\n                secondary: {\n                    main: \"#ff5722\",\n                },\n            },\n        });\n        this.setState(state => ({\n            theme:state.isDarkTheme ? lightTheme : darkTheme,\n            isDarkTheme: !state.isDarkTheme\n            }),() => {\n                this.forceUpdate();\n                const cookies = new Cookies();\n                cookies.set(\"is_dark_theme\",this.state.isDarkTheme ? \"1\" : \"0\");\n        }\n        );\n\n    }\n\n\n\n    render() {\n        /*\n        let randIndex = Math.floor(Math.random()*4);\n        let effect = null;\n        switch(randIndex){\n            case 0:\n                effect = <ParticlesBg color=\"#ff5722\" num={200} type=\"cobweb\"  bg={true} />;\n                break;\n            case 1:\n                effect = <ParticlesBg color=\"#303030\" num={200} type=\"lines\"  bg={true} />;\n                break;\n            case 2:\n                effect = <ParticlesBg color=\"#ff5722\" num={20} type=\"fountain\"  bg={true} />;\n                break;\n            case 3:\n                effect = <ParticlesBg color=\"#ff5722\" num={20} type=\"polygon\"  bg={true} />;\n                break;\n        }*/\n        return(\n            <TokenContext.Provider value={this.state}>\n                <ThemeProvider theme={this.state.theme}>\n            <Router>\n                {this.state.isAnimationEnable ? <ParticlesBg color=\"#ff5722\" num={200} type=\"cobweb\"  bg={true} /> : \"\"}\n                <Switch>\n                    <Route path=\"/login\">\n                        <Auth onLogin={this.handleLogin}/>\n                    </Route>\n                    <Route path=\"/registration\">\n                        <Reg onReg={this.handleLogin}/>\n                    </Route>\n                    <Route path=\"/restore\">\n                        <Restore/>\n                    </Route>\n                    <PrivateRoute token={this.state.token} path=\"/\">\n                        <Chat isDarkTheme={this.state.isDarkTheme}/>\n                    </PrivateRoute>\n                </Switch>\n            </Router>\n                </ThemeProvider>\n            </TokenContext.Provider>\n                );\n    }\n}\nfunction PrivateRoute({ children, ...rest }) {\n    let contextType = TokenContext;\n    return (\n        <Route\n            {...rest}\n            render={({ location }) =>\n                rest.token != null ? (\n                    children\n                ) : (\n                    <Redirect\n                        to={{\n                            pathname: \"/login\",\n                            state: { from: location }\n                        }}\n                    />\n                )\n            }\n        />\n    );\n}","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\reportWebVitals.js",[],"C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\Auth.js",["125"],"import * as React from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n    Box, Button,\r\n    Container,\r\n    CssBaseline,\r\n    Grid,\r\n    Link,\r\n    TextField,\r\n    Typography, withStyles,Paper\r\n} from \"@material-ui/core\";\r\nimport { Link as RouterLink } from 'react-router-dom';\r\nimport {Copyright} from \"./Copyright\";\r\nimport {withRouter} from \"react-router-dom\";\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass Auth extends React.Component{\r\n\r\n    routingFunction = () => {\r\n        this.props.history.push(\"/\");\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            login:\"\",\r\n            pass:\"\",\r\n            wrongLoginPass:false\r\n        };\r\n        this.handleInputChange = this.handleInputChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleInputChange(event) {\r\n        const target = event.target;\r\n        const value = target.value;\r\n        const name = target.name;\r\n\r\n        this.setState({\r\n            [name]: value,\r\n            wrongLoginPass:false\r\n        });\r\n    }\r\n\r\n    handleSubmit(e){\r\n        e.preventDefault();\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/x-www-form-urlencoded',\r\n            },\r\n            body: \"login=\"+this.state.login+\"&pass=\"+this.state.pass\r\n        };\r\n        fetch(\"https://rp-ruler.ru/api/login.php\",requestOptions)\r\n            .then(response => response.json())\r\n            .then((data)=>{\r\n                if(data[\"token\"] !== undefined){\r\n                    this.props.onLogin(data[\"token\"],data[\"user_id\"]);\r\n                    this.routingFunction();\r\n                }else if( data[\"error\"] === 1){\r\n                    this.setState({wrongLoginPass:true});\r\n                }\r\n            })\r\n    }\r\n\r\n    render() {\r\n        const {classes} = this.props;\r\n\r\n\r\n        return(<Grid container justify=\"center\">\r\n            <CssBaseline />\r\n\r\n            <Paper elevation={6} className={classes.paper} item>\r\n                <Typography component=\"h1\" variant=\"h5\">\r\n                    Добро пожаловать. Снова.\r\n                </Typography>\r\n                <form className={classes.form} noValidate\r\n                      onSubmit={this.handleSubmit} >\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        error={this.state.wrongLoginPass}\r\n                        required\r\n                        fullWidth\r\n                        id=\"login\"\r\n                        label=\"Логин или E-mail\"\r\n                        name=\"login\"\r\n                        helperText={this.state.wrongLoginPass ? \"Неверный логин или пароль\" : \"\"}\r\n                        autoComplete=\"login\"\r\n                        onChange = {this.handleInputChange}\r\n                        value={this.state.login}\r\n                        autoFocus\r\n                    />\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        required\r\n                        error={this.state.wrongLoginPass}\r\n                        fullWidth\r\n                        onChange = {this.handleInputChange}\r\n                        name=\"pass\"\r\n                        label=\"Пароль\"\r\n                        type=\"password\"\r\n                        value={this.state.password}\r\n                        id=\"pass\"\r\n                        autoComplete=\"current-password\"\r\n                    />\r\n                    <Button\r\n                        type=\"submit\"\r\n                        fullWidth\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className={classes.submit}\r\n                    >\r\n                        Войти\r\n                    </Button>\r\n\r\n                    <Grid container>\r\n                        <Grid item xs>\r\n                            <Link href=\"#\" variant=\"body2\" to=\"/restore\" component={RouterLink}>\r\n                                Забыли пароль?\r\n                            </Link>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Link to=\"/registration\" component={RouterLink} variant=\"body2\">\r\n                                Зарегистрироваться\r\n                            </Link>\r\n                        </Grid>\r\n                    </Grid>\r\n                </form>\r\n                <Box mt={8}>\r\n                    <Copyright />\r\n                </Box>\r\n            </Paper>\r\n\r\n        </Grid>);\r\n    }\r\n}\r\n\r\n\r\n\r\nAuth.propTypes = {\r\n    classes: PropTypes.object.isRequired,\r\n};\r\n\r\nconst styles = {\r\n    paper: {\r\n        marginTop: \"160px\",\r\n        padding:\"60px\",\r\n        width:\"500px\",\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: \"10px\",\r\n    },\r\n    submit: {\r\n        margin: \"30px 0 20px\",\r\n    },\r\n};\r\n\r\n\r\nexport default withStyles(styles)(withRouter(Auth));","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\Copyright.js",[],"C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\Reg.js",["126","127","128"],"import * as React from \"react\";\r\nimport {\r\n    Box,\r\n    Button,\r\n    Container,\r\n    CssBaseline,\r\n    FormControlLabel,\r\n    Grid,\r\n    Link, Paper,\r\n    TextField,\r\n    Typography, withStyles\r\n} from \"@material-ui/core\";\r\nimport {Copyright} from \"./Copyright\";\r\nimport {Link as RouterLink, withRouter} from 'react-router-dom';\r\nimport ParticlesBg from \"particles-bg\";\r\n\r\n\r\n\r\nclass Reg extends React.Component{\r\n    routingFunction = () => {\r\n        this.props.history.push(\"/\");\r\n    }\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            login:\"\",\r\n            pass:\"\",\r\n            mail:\"\",\r\n            isWrongLogin:false,\r\n            isWrongMail:false\r\n        };\r\n        this.handleInputChange = this.handleInputChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n    handleInputChange(event) {\r\n        const target = event.target;\r\n        const value = target.value;\r\n        const name = target.name;\r\n        this.setState({\r\n            [name]: value,\r\n            isWrongLogin:false,\r\n            isWrongMail:false\r\n        });\r\n    }\r\n\r\n    handleSubmit(e){\r\n        e.preventDefault();\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/x-www-form-urlencoded',\r\n            },\r\n            body: \"login=\"+this.state.login+\"&pass=\"+this.state.pass+\"&email=\"+this.state.email\r\n        };\r\n        fetch(\"https://rp-ruler.ru/api/registration.php\",requestOptions)\r\n            .then(response => response.json())\r\n            .then((data)=>{\r\n                if(data[\"token\"] !== undefined){\r\n                    this.props.onReg(data[\"token\"],data[\"user_id\"]);\r\n                    this.routingFunction();\r\n                }else if( data[\"error\"] === 1){\r\n                    this.setState({isWrongLogin:true});\r\n                }else if( data[\"error\"] === 2) {\r\n                    this.setState({isWrongMail:true});\r\n                }\r\n            })\r\n    }\r\n\r\n    render() {\r\n        const {classes} = this.props;\r\n        return ( <Grid container justify=\"center\">\r\n            <CssBaseline />\r\n\r\n            <Paper elevation={6} className={classes.paper} item>\r\n                <Typography component=\"h1\" variant=\"h5\">\r\n                    Добро пожаловать.\r\n                </Typography>\r\n                <form className={classes.form} onSubmit={this.handleSubmit} noValidate>\r\n                    <Grid container spacing={2}>\r\n                        <Grid item xs={12} sm={12}>\r\n                            <TextField\r\n                                autoComplete=\"login\"\r\n                                name=\"login\"\r\n                                variant=\"outlined\"\r\n                                required\r\n                                fullWidth\r\n                                id=\"login\"\r\n                                error={this.state.isWrongLogin}\r\n                                helperText={this.state.isWrongLogin ? \"Логин занят\" : \"\"}\r\n                                onChange={this.handleInputChange}\r\n                                label=\"Логин\"\r\n                                autoFocus\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <TextField\r\n                                variant=\"outlined\"\r\n                                required\r\n                                fullWidth\r\n                                id=\"email\"\r\n                                label=\"Email\"\r\n                                error={this.state.isWrongMail}\r\n                                helperText={this.state.isWrongMail ?\r\n                                    \"Пользователь с такой почтой уже существует \" : \"\"}\r\n                                name=\"email\"\r\n                                onChange={this.handleInputChange}\r\n                                autoComplete=\"email\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <TextField\r\n                                variant=\"outlined\"\r\n                                required\r\n                                fullWidth\r\n                                name=\"pass\"\r\n                                label=\"Пароль\"\r\n                                type=\"password\"\r\n                                onChange={this.handleInputChange}\r\n                                id=\"pass\"\r\n                                autoComplete=\"current-password\"\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Button\r\n                        type=\"submit\"\r\n                        fullWidth\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className={classes.submit}\r\n                    >\r\n                        зарегистрироваться\r\n                    </Button>\r\n                    <Grid container justify=\"flex-end\">\r\n                        <Grid item xs>\r\n                            <Link href=\"#\" variant=\"body2\" component={RouterLink} to=\"/restore\" >\r\n                                Забыли пароль?\r\n                            </Link>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Link href=\"#\" component={RouterLink} to=\"/login\" variant=\"body2\">\r\n                                Уже есть аккаунт?\r\n                            </Link>\r\n                        </Grid>\r\n                    </Grid>\r\n                </form>\r\n                <Box mt={5}>\r\n                    <Copyright />\r\n                </Box>\r\n            </Paper>\r\n\r\n        </Grid>);\r\n    }\r\n}\r\n\r\nconst styles = {\r\n    paper: {\r\n        marginTop: \"160px\",\r\n        padding:\"60px\",\r\n        width:\"500px\",\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: \"10px\",\r\n    },\r\n    submit: {\r\n        margin: \"30px 0 20px\",\r\n    },\r\n};\r\nexport default withStyles(styles)(withRouter(Reg));","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\Chat.js",["129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145"],"C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\MainMenu.js",["146"],"import * as React from \"react\";\r\nimport {Avatar, Fab, List, ListItem, withStyles} from \"@material-ui/core\";\r\nimport {AssignmentInd, Add, Settings, Explore, Forum} from \"@material-ui/icons\";\r\n\r\nimport {Divider} from \"@material-ui/core\";\r\nimport AppContext from \"./AppContext.js\";\r\nimport ProfileDialog from \"./ProfileDialog\";\r\nimport ServersDialog from \"./ServersDialog\";\r\nimport AddServerDialog from \"./AddServerDialog\";\r\n\r\n\r\n\r\nclass MainMenu extends React.Component{\r\n    static contextType = AppContext;\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            profileDialogOpen:false,\r\n            serversDialogOpen:false,\r\n            addServerDialogOpen:false\r\n        };\r\n\r\n        this.handleServerCreate = this.handleServerCreate.bind(this);\r\n    }\r\n    handleServerClick(id,name){\r\n        this.props.onChangeServer(id,name);\r\n    }\r\n\r\n    handleServerCreate(id,name){\r\n        this.props.onServerConnect();\r\n        this.props.onChangeServer(id,name);\r\n    }\r\n\r\n    render() {\r\n        const {classes} = this.props;\r\n        return (<div><List><ListItem><Fab onClick={() => this.setState({profileDialogOpen:true})} aria-label=\"add\">\r\n            <Settings />\r\n        </Fab></ListItem>\r\n                <ListItem><Fab onClick={this.props.onToChatClick} aria-label=\"add\">\r\n                    <Forum />\r\n                </Fab></ListItem>\r\n                <Divider className={classes.divider}/>\r\n            {this.props.servers.map((item)=>(\r\n                <ListItem key={item.id}>\r\n                    <Avatar className={classes.avatar + (this.props.currentServer===item.id ? \" \" + classes.current : \"\")} onClick={() => this.handleServerClick(item.id)} src={\"https://rp-ruler.ru/upload/\"+item.avatar}>\r\n                        <Fab className={classes.serverElem + (this.props.currentServer===item.id ? \" \"+classes.current : \"\")}>{item.name.substr(0,2)}</Fab>\r\n                    </Avatar></ListItem>\r\n            ))}\r\n            <ListItem><Fab color=\"primary\" className={classes.serverElem} onClick={() => this.setState({addServerDialogOpen:true})}>\r\n                <Add/></Fab></ListItem>\r\n                <ListItem><Fab color=\"primary\" onClick={() =>this.setState({serversDialogOpen:true})} className={classes.serverElem}>\r\n                    <Explore/></Fab></ListItem>\r\n\r\n            </List><ProfileDialog open={this.state.profileDialogOpen} onClose={() =>this.setState({profileDialogOpen:false})}/>\r\n                    <ServersDialog open={this.state.serversDialogOpen} connectedServers={this.props.servers} onServerConnect={this.props.onServerConnect} onClose={() => this.setState({serversDialogOpen:false})}/>\r\n                    <AddServerDialog open={this.state.addServerDialogOpen} onCreate={this.handleServerCreate} onClose={() => this.setState({addServerDialogOpen:false})}/>\r\n        </div>\r\n        );\r\n    }\r\n\r\n}\r\nconst styles = {\r\n    divider: {\r\n\r\n        padding:\"1px\"\r\n    },\r\n    current:{\r\n        \"border-radius\":\"30%\"\r\n    },\r\n    avatar:{\r\n        width:\"56px\",\r\n        height:\"56px\",\r\n        \"background-color\":\"#e0e0e0\",\r\n        \"cursor\":\"pointer\",\r\n        transition:\".1s\"\r\n    },\r\n    serverElem:{\r\n        \"font-size\":\"20px\",\r\n        transition:\".1s\"\r\n    }\r\n};\r\nexport default withStyles(styles)(MainMenu);","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\AppContext.js",[],"C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\RoomsList.js",["147"],"import * as React from \"react\";\r\nimport AppContext from \"./AppContext\";\r\nimport {\r\n    Badge,\r\n    List,\r\n    ListItem,\r\n    ListItemIcon,\r\n    ListItemText,\r\n    Menu,\r\n    MenuItem,\r\n    Typography,\r\n    withStyles\r\n} from \"@material-ui/core\";\r\nimport {AlternateEmail, Delete, Edit, ExitToApp, Language} from \"@material-ui/icons\";\r\nimport AddRoomDialog from \"./AddRoomDialog\";\r\n\r\n\r\nclass RoomsList extends React.Component{\r\n    static contextType = AppContext;\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            anchorEl:null,\r\n            clickedRoomId:null,\r\n            isEditOpen:false,\r\n            clickedRoom:null\r\n        };\r\n        this.handleRoomContext = this.handleRoomContext.bind(this);\r\n        this.deleteRoom = this.deleteRoom.bind(this);\r\n    }\r\n    handleRoomClick(roomId){\r\n        this.props.onChangeRoom(roomId);\r\n    }\r\n    deleteRoom(){\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/x-www-form-urlencoded',\r\n            },\r\n            body: \"token=\"+this.context.token+\"&room_id=\"+this.state.clickedRoomId\r\n        };\r\n        fetch(\"https://rp-ruler.ru/api/delete_room.php\",requestOptions)\r\n            .then(response => response.json())\r\n            .then((data)=>{\r\n                this.setState({anchorEl:null,clickedRoomId:null});\r\n                this.props.onRoomsUpdate();\r\n            })\r\n    }\r\n\r\n    handleRoomContext(event,id){\r\n        if(this.props.admin){\r\n            let clickedRoom = this.getElById(this.props.rooms,id);\r\n            this.setState({\r\n                anchorEl:event.currentTarget,\r\n                clickedRoomId:id,\r\n                clickedRoom:clickedRoom\r\n            });\r\n\r\n        }\r\n\r\n    }\r\n    getElById(arr,id){\r\n        if(arr === undefined)return null;\r\n        for(let i=0;i<arr.length;i++){\r\n            if(arr[i].id === id)return arr[i];\r\n        }\r\n        return null;\r\n    }\r\n    render() {\r\n        const {classes} = this.props;\r\n        if(this.props.rooms == null || this.props.rooms.length === 0){\r\n            return(<Typography variant=\"subtitle2\" align=\"center\">Комнат пока нет...</Typography>);\r\n        }else {\r\n            return (<List>\r\n                {this.props.rooms.map((item) => (\r\n                    <ListItem onContextMenu={(event) =>  this.handleRoomContext(event,item.id)}\r\n                              selected={this.props.currentRoom === item.id} onClick={() => this.handleRoomClick(item.id)} key={item.id} button>\r\n                        <ListItemIcon>\r\n                            <Badge anchorOrigin={{\r\n                                vertical: 'top',\r\n                                horizontal: 'left',\r\n                            }} color=\"primary\" variant=\"dot\" invisible={!item.is_unread}>\r\n                            {item.is_global === 1 ? <Language/> : <AlternateEmail/>}\r\n                            </Badge>\r\n                        </ListItemIcon>\r\n                        <ListItemText>\r\n                            <span className={classes.room}>{item.login != null ? item.login : item.name}</span>\r\n                        </ListItemText>\r\n\r\n                    </ListItem>\r\n                ))}\r\n                {this.props.admin ? <Menu\r\n                    transformOrigin={{\r\n                        vertical: 'top',\r\n                        horizontal: 'center',\r\n                    }}\r\n                    anchorOrigin={{\r\n                        vertical: \"bottom\",\r\n                        horizontal: 'center',\r\n                    }}\r\n                    getContentAnchorEl={null}\r\n                    anchorEl={this.state.anchorEl}\r\n                    keepMounted\r\n                    open={Boolean(this.state.anchorEl)}\r\n                    onClose={() => this.setState({anchorEl:null})}\r\n                ><MenuItem className={classes.delete} onClick={this.deleteRoom}>\r\n                    Удалить комнату<Delete className={classes.icon}/></MenuItem>\r\n                    <MenuItem className={classes.edit} onClick={() => this.setState({isEditOpen:true,anchorEl:null})}>\r\n                        Редактировать <Edit className={classes.icon}/></MenuItem>\r\n                </Menu> : \"\"}\r\n                {this.state.clickedRoom != null ? <AddRoomDialog\r\n                    open={this.state.isEditOpen}\r\n                    serverId={this.props.serverId}\r\n                    onCreate={this.props.onRoomsUpdate}\r\n                    roomId={this.state.clickedRoomId}\r\n                    name={this.state.clickedRoom.name}\r\n                    bg={this.state.clickedRoom.bg}\r\n                    isGlobal={this.state.clickedRoom.is_global === 1}\r\n                    onClose={() => this.setState({isEditOpen:false})}\r\n                /> : \"\"}\r\n\r\n            </List>);\r\n        }\r\n    }\r\n\r\n}\r\n\r\nconst styles = {\r\n    room:{\r\n        \"text-overflow\":\"ellipsis\",\r\n        \"white-space\":\"nowrap\",\r\n        \"display\":\"block\",\r\n        \"width\":\"100%\",\r\n        \"overflow\":\"hidden\"\r\n    },\r\n    edit:{\r\n        color:\"#ffc107\"\r\n    },\r\n    delete:{\r\n        color:\"#f50057\",\r\n        \"padding-right\":\"50px\"\r\n    },\r\n    icon:{\r\n        position:\"absolute\",\r\n        right:\"10px\"\r\n    }\r\n};\r\nexport default withStyles(styles)(RoomsList);","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\ServerName.js",["148","149"],"import * as React from \"react\";\r\nimport {Button, Dialog, DialogActions, DialogTitle, Menu, MenuItem, Paper, withStyles} from \"@material-ui/core\";\r\nimport {Add, Delete, Edit, ExitToApp, ExpandMore, Remove} from \"@material-ui/icons\";\r\nimport AddRoomDialog from \"./AddRoomDialog\";\r\nimport TokenContext from \"./AppContext\";\r\n\r\nclass ServerName extends React.Component{\r\n    static contextType = TokenContext;\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            anchorEl:null,\r\n            isAddRoomOpen:false,\r\n            isConfirmDeleteOpen:false\r\n        };\r\n        this.handleServerMenuClick       = this.handleServerMenuClick.bind(this);\r\n        this.handleServerMenuClose       = this.handleServerMenuClose.bind(this);\r\n        this.handleServerDisconnectClick = this.handleServerDisconnectClick.bind(this);\r\n    }\r\n    handleServerMenuClick(event){\r\n        event.preventDefault();\r\n        this.setState({anchorEl:event.currentTarget});\r\n    }\r\n\r\n    handleServerMenuClose(){\r\n        this.setState({anchorEl:null});\r\n\r\n    }\r\n\r\n    handleServerDisconnectClick(){\r\n        this.handleServerMenuClose();\r\n        this.props.onServerDisconnect();\r\n    }\r\n    deleteServer(){\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/x-www-form-urlencoded',\r\n            },\r\n            body: \"token=\"+this.context.token+\"&server_id=\"+this.props.serverId\r\n        };\r\n        fetch(\"https://rp-ruler.ru/api/delete_server.php\",requestOptions)\r\n            .then(response => response.json())\r\n            .then((data)=>{\r\n                this.setState({isConfirmDeleteOpen:false});\r\n                this.props.onServerDelete();\r\n            })\r\n    }\r\n\r\n    render() {\r\n        const {classes} = this.props;\r\n        if(this.props.isChat){\r\n            return(<div><Button fullWidth onContextMenu={this.handleServerMenuClick} onClick={this.handleServerMenuClick}\r\n                                aria-controls=\"fade-menu\" aria-haspopup=\"true\">\r\n                личка\r\n            </Button></div>);\r\n        }else {\r\n            return (\r\n                <div><Button fullWidth onContextMenu={this.handleServerMenuClick} onClick={this.handleServerMenuClick}\r\n                             aria-controls=\"fade-menu\" aria-haspopup=\"true\">\r\n                    {this.props.name}<ExpandMore/>\r\n                </Button><Menu\r\n                    transformOrigin={{\r\n                        vertical: 'top',\r\n                        horizontal: 'center',\r\n                    }}\r\n                    anchorOrigin={{\r\n                        vertical: \"bottom\",\r\n                        horizontal: 'center',\r\n                    }}\r\n                    getContentAnchorEl={null}\r\n                    anchorEl={this.state.anchorEl}\r\n                    keepMounted\r\n                    className={classes.paperWrap}\r\n                    open={Boolean(this.state.anchorEl)}\r\n                    onClose={this.handleServerMenuClose}\r\n                >\r\n                    <MenuItem className={classes.exitServer} onClick={this.handleServerDisconnectClick}>\r\n                        Покинуть сервер <ExitToApp className={classes.icon}/></MenuItem>\r\n                    {this.props.admin ? <MenuItem className={classes.edit} onClick={this.handleServerDisconnectClick}>\r\n                        Редактировать <Edit className={classes.icon}/></MenuItem> : \"\"}\r\n                    {this.props.admin ? <MenuItem className={classes.add} onClick={() => this.setState({isAddRoomOpen:true,anchorEl:false})}>\r\n                        Добавить комнату <Add className={classes.icon}/></MenuItem> : \"\"}\r\n                    {this.props.admin ? <MenuItem className={classes.exitServer} onClick={() => this.setState({isConfirmDeleteOpen:true,anchorEl:false})}>\r\n                        Удалить сервер <Delete className={classes.icon}/></MenuItem> : \"\"}\r\n                </Menu>\r\n                <AddRoomDialog\r\n                    open={this.state.isAddRoomOpen}\r\n                    serverId={this.props.serverId}\r\n                    onCreate={this.props.onRoomCreate}\r\n                    onClose={() => this.setState({isAddRoomOpen:false})}\r\n                />\r\n                    <Dialog open={this.state.isConfirmDeleteOpen} onClose={() => this.setState({isConfirmDeleteOpen:false})}>\r\n                        <DialogTitle>Вы уверены?</DialogTitle>\r\n                        <DialogActions>\r\n                            <Button onClick={() => this.setState({isConfirmDeleteOpen:false})} color=\"primary\">\r\n                                Отменить\r\n                            </Button>\r\n                            <Button onClick={() => this.deleteServer()} color=\"primary\" autoFocus>\r\n                                Удалить сервер\r\n                            </Button>\r\n                        </DialogActions>\r\n                    </Dialog>\r\n                </div>);\r\n        }\r\n    }\r\n}\r\n\r\nconst styles = {\r\n    add:{\r\n        color:\"#00e676\"\r\n    },\r\n    paperWrap:{\r\n        width:\"100%\",\r\n\r\n    },\r\n    exitServer:{\r\n        color:\"#f50057\",\r\n        \"padding-right\":\"50px\"\r\n    },\r\n    edit:{\r\n        color:\"#ffc107\"\r\n    },\r\n    icon:{\r\n        position:\"absolute\",\r\n        right:\"10px\"\r\n    }\r\n\r\n\r\n};\r\n\r\nexport default withStyles(styles)(ServerName);","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\RoomAppBar.js",["150"],"import * as React from \"react\";\r\nimport {AppBar, Toolbar, Typography, withStyles} from \"@material-ui/core\";\r\n\r\nclass RoomAppBar extends React.Component{\r\n    render(){\r\n        const {classes} = this.props;\r\n        return(<AppBar color=\"default\" position=\"static\">\r\n                    <Toolbar>\r\n                        <Typography  variant=\"h6\" noWrap>\r\n                            {this.props.name}\r\n                    </Typography>\r\n                </Toolbar>\r\n            </AppBar>);\r\n    }\r\n}\r\n\r\nconst styles = {\r\n\r\n\r\n};\r\nexport default withStyles(styles)(RoomAppBar);","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\Messages.js",["151","152","153","154","155"],"import * as React from \"react\";\r\nimport {\r\n\r\n    Avatar, IconButton, LinearProgress, List,\r\n    ListItem,\r\n    ListItemAvatar, ListItemIcon,\r\n    ListItemText, Menu, MenuItem, Typography,\r\n\r\n    withStyles\r\n} from \"@material-ui/core\";\r\nimport {Delete, Reply} from \"@material-ui/icons\";\r\nimport TokenContext from \"./AppContext\";\r\nimport InputReplyMessage from \"./InputReplyMessage\";\r\n\r\n\r\nclass Messages extends React.Component{\r\n    static contextType = TokenContext;\r\n    constructor(props) {\r\n        super(props);\r\n        this.state =\r\n            {mouseX: null,\r\n            mouseY: null,\r\n            menuMessageId:null,\r\n            };\r\n        this.handleCloseMenu = this.handleCloseMenu.bind(this);\r\n        this.getMessageById = this.getMessageById.bind(this);\r\n        this.handleDeleteMsg = this.handleDeleteMsg.bind(this);\r\n        this.handleReply = this.handleReply.bind(this);\r\n        this.handleContextClick = this.handleContextClick.bind(this);\r\n        this.handleScroll = this.handleScroll.bind(this);\r\n    }\r\n\r\n    handleContextClick(event,message_id){\r\n        event.preventDefault();\r\n        this.setState({\r\n            mouseX: event.clientX - 2,\r\n            mouseY: event.clientY - 4,\r\n            menuMessageId:message_id\r\n        });\r\n    }\r\n    componentDidUpdate(prevProps){\r\n        if(this.props.messages !== prevProps.messages) {\r\n            this.scrollToBottom();\r\n        }\r\n    }\r\n    scrollToBottom(){\r\n        this.messagesEnd.scrollIntoView();\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.scrollToBottom();\r\n    }\r\n\r\n\r\n    handleCloseMenu(event){\r\n        event.preventDefault();\r\n        this.setState({\r\n            mouseX: null,\r\n            mouseY: null\r\n        });\r\n    }\r\n\r\n    getMessageById(id){\r\n        if(this.props.messages === undefined)return null;\r\n        for(let i=0;i<this.props.messages.length;i++){\r\n            if(this.props.messages[i].id === id)return this.props.messages[i];\r\n        }\r\n        return null;\r\n\r\n    }\r\n\r\n    handleReply(event){\r\n        this.props.onReplyChoose(this.state.menuMessageId);\r\n        this.handleCloseMenu(event);\r\n    }\r\n\r\n    handleDeleteMsg(event){\r\n        this.props.onRemoveMessage(this.state.menuMessageId);\r\n        this.handleCloseMenu(event);\r\n    }\r\n    handleScroll(event){\r\n        if(event.target.scrollTop < 400 && this.props.messages.length % 60 === 0){\r\n            this.props.loadMoreMessages();\r\n        }\r\n\r\n    }\r\n\r\n    render(){\r\n        const {classes} = this.props;\r\n        return(<List onScroll={this.handleScroll} className={classes.messagesWrap}>\r\n            <div className={classes.roomBg} style={{\"background-image\":this.props.bg}}/>\r\n            {this.props.messages.map((item)=>(\r\n            <ListItem button key={item.id}\r\n                      className={(item.id > this.props.lastRead ? classes.unreadMessage : \"\")+\" \"+\r\n                      (item.id == this.props.replyTo ? classes.replyTo : \"\")}\r\n                      onContextMenu={(event) => this.handleContextClick(event,item.id)}>\r\n                <ListItemAvatar>\r\n                    <Avatar alt={item.login} src={\"https://rp-ruler.ru/upload/\"+item.avatar}/>\r\n                </ListItemAvatar>\r\n                <ListItemText\r\n                    secondary={<div>{item.text}\r\n                    {item.reply_message != null ? <InputReplyMessage replyLogin={item.reply_message.login}\r\n                                                                replyText={item.reply_message.text}/> : null}</div>}>\r\n                    <span className={classes.login}>{item.login}</span> <l className={classes.messageTime}>{item.datetime}</l>\r\n\r\n                </ListItemText>\r\n            </ListItem>\r\n            ))}\r\n            <Menu\r\n                keepMounted\r\n                onContextMenu={this.handleCloseMenu}\r\n                open={this.state.mouseY !== null}\r\n                onClose={this.handleCloseMenu}\r\n                anchorReference=\"anchorPosition\"\r\n                anchorPosition={\r\n                    this.state.mouseY !== null && this.state.mouseX !== null\r\n                        ? { top: this.state.mouseY, left: this.state.mouseX }\r\n                        : undefined\r\n                }\r\n            >\r\n                {this.getMessageById(this.state.menuMessageId) != null &&\r\n                this.getMessageById(this.state.menuMessageId).sender_id == this.context.user_id ?\r\n                    <MenuItem onClick={this.handleDeleteMsg}>\r\n                    <ListItemIcon>\r\n                        <Delete fontSize=\"small\" />\r\n                    </ListItemIcon>\r\n                    Удалить\r\n                </MenuItem> : \"\"}\r\n\r\n                <MenuItem onClick={this.handleReply}>\r\n                    <ListItemIcon>\r\n                        <Reply fontSize=\"small\" />\r\n                    </ListItemIcon>\r\n                    Ответить\r\n                </MenuItem>\r\n            </Menu>\r\n            <div style={{ float:\"left\", clear: \"both\" }}\r\n                 ref={(el) => { this.messagesEnd = el; }}>\r\n            </div>\r\n        </List>);\r\n    }\r\n}\r\n\r\n\r\nconst styles = {\r\n    roomBg:{\r\n        position:\"absolute\",\r\n        top:0,\r\n        \"background-position\":\"center\",\r\n        \"background-size\":\"cover\",\r\n        left:0,\r\n        width:\"100%\",\r\n        height:\"100%\",\r\n        opacity: 0.3\r\n    },\r\n    messagesWrap:{\r\n        height:\"calc(100vh - 147px)\",\r\n        \"overflow\":\"auto\"\r\n    },\r\n    messageTime:{\r\n        \"font-size\":\"13px\",\r\n        opacity:\"0.6\"\r\n    },\r\n    unreadMessage:{\r\n        \"background-color\":\"rgba(255, 255, 255, 0.04)\"\r\n    },\r\n    replyTo:{\r\n        \"border-left\":\"2px solid #ff5722\",\r\n        \"background-color\":\"#ff572209\"\r\n    },\r\n    login:{\r\n        color:\"#ff5722\",\r\n        \"font-weight\":\"400\"\r\n    }}\r\n\r\n;\r\nexport default withStyles(styles)(Messages);","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\InputReplyMessage.js",["156"],"import * as React from \"react\";\r\nimport {Paper, withStyles} from \"@material-ui/core\";\r\nimport {Close} from \"@material-ui/icons\";\r\n\r\nclass InputReplyMessage extends React.Component{\r\n    render(){\r\n        const {classes} = this.props;\r\n        if(this.props.replyLogin === null)return(<div/>);\r\n        return( <div className={this.props.onCancel != null ? classes.messageReplyWrap : null }>\r\n                                <div className={classes.messageReply}>\r\n                                    <h5 className={classes.login}>{this.props.replyLogin}</h5>\r\n                                    <span className={classes.text}>{this.props.replyText}</span>\r\n                                    {this.props.onCancel != null ? <Close onClick={this.props.onCancel} className={classes.close}/> : null }\r\n                                </div>\r\n        </div>);\r\n    }\r\n}\r\n\r\nconst styles = {\r\n    messageReplyWrap:{\r\n        padding:\"10px 20px\"\r\n    },\r\n    messageReply:{\r\n        \"border-left\":\"2px solid #ff5722\",\r\n        \"padding-left\":\"10px\"\r\n    },\r\n    login:{\r\n        margin:\"0\",\r\n        \"font-size\":\"1.15em\",\r\n        \"font-weight\":400,\r\n        color:\"#ff5722\"\r\n    },\r\n    text:{\r\n        opacity:0.7\r\n    },\r\n    close:{\r\n        position:\"absolute\",\r\n        cursor:\"pointer\",\r\n        right:\"10px\",\r\n        top:\"10px\"\r\n    },\r\n\r\n\r\n};\r\nexport default withStyles(styles)(InputReplyMessage);","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\ProfileDialog.js",["157"],"C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\UsersList.js",["158"],"import * as React from \"react\";\r\nimport TokenContext from \"./AppContext\";\r\nimport {Avatar, Badge, List, ListItem, ListItemAvatar, ListItemText, withStyles} from \"@material-ui/core\";\r\nimport UserPopover from \"./UserPopover\";\r\n\r\nconst StyledBadge = withStyles((theme) => ({\r\n    badge: {\r\n        backgroundColor: '#44b700',\r\n        color: '#44b700',\r\n        boxShadow: `0 0 0 2px ${theme.palette.background.paper}`,\r\n        '&::after': {\r\n            position: 'absolute',\r\n            top: 0,\r\n            left: 0,\r\n            width: '100%',\r\n            height: '100%',\r\n            borderRadius: '50%',\r\n            animation: '$ripple 1.2s infinite ease-in-out',\r\n            border: '1px solid currentColor',\r\n            content: '\"\"',\r\n        },\r\n    },\r\n    '@keyframes ripple': {\r\n        '0%': {\r\n            transform: 'scale(.8)',\r\n            opacity: 1,\r\n        },\r\n        '100%': {\r\n            transform: 'scale(2.4)',\r\n            opacity: 0,\r\n        },\r\n    },\r\n}))(Badge);\r\n\r\nclass UsersList extends React.Component{\r\n    static contextType = TokenContext;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            popoverOpen:false,\r\n            anchorEl:null,\r\n            clickedUser:null\r\n        }\r\n        this.handleClose = this.handleClose.bind(this);\r\n        this.handleWriteClick = this.handleWriteClick.bind(this);\r\n    }\r\n\r\n    handleWriteClick(event,id){\r\n        this.handleClose();\r\n        this.props.onWriteToUser(event,id);\r\n\r\n    }\r\n    getElById(arr,id){\r\n        if(arr === undefined)return null;\r\n        for(let i=0;i<arr.length;i++){\r\n            if(arr[i].id === id)return arr[i];\r\n        }\r\n        return null;\r\n    }\r\n\r\n    handleClose(){\r\n        this.setState({popoverOpen:false})\r\n    }\r\n\r\n    handleClick(event,id){\r\n        this.setState({anchorEl:event.currentTarget,\r\n            clickedUser:this.getElById(this.props.users,id),\r\n            popoverOpen:true\r\n        });\r\n    }\r\n\r\n    render() {\r\n        if(this.props.users == null)return(<List/>);\r\n        return(<div><List>\r\n            {this.props.users.map((user)=>(\r\n            <ListItem button key={user.id} onClick={(event)=>this.handleClick(event,user.id)}\r\n                      onContextMenu={(event)=>this.handleClick(event,user.id)}>\r\n                <ListItemAvatar>\r\n                    <StyledBadge variant=\"dot\"\r\n                                 anchorOrigin={{\r\n                                    vertical: 'bottom',\r\n                                    horizontal: 'right',\r\n                                 }}\r\n                                 overlap=\"circle\"\r\n                                 invisible={user.online !== 1}>\r\n                        <Avatar alt={user.login} src={\"https://rp-ruler.ru/upload/\"+user.avatar} />\r\n                    </StyledBadge>\r\n                </ListItemAvatar>\r\n                <ListItemText primary={user.login}/>\r\n            </ListItem>\r\n            ))}\r\n        </List>\r\n        <UserPopover open={this.state.popoverOpen}\r\n                     onClose={this.handleClose}\r\n                     onWriteToUser={(event)=>this.handleWriteClick(event,this.state.clickedUser.id)}\r\n                     anchorEl={this.state.anchorEl}\r\n                     user={this.state.clickedUser}\r\n                     doWrite={this.state.clickedUser != null && this.context.user_id != this.state.clickedUser.id}\r\n        />\r\n        </div>)\r\n    }\r\n}\r\n\r\nconst styles = {\r\n\r\n};\r\nexport default withStyles(styles)(UsersList);","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\FormDialog.js",["159"],"import * as React from \"react\";\r\nimport TokenContext from \"./AppContext\";\r\nimport {\r\n    Button,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogTitle,\r\n    List,\r\n    TextField,\r\n    withStyles\r\n} from \"@material-ui/core\";\r\n\r\nclass FormDialog extends React.Component {\r\n    static contextType = TokenContext;\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n    handleChange(event,key){\r\n        this.setState({[key]:event.target.value});\r\n    }\r\n    render() {\r\n\r\n        return (<Dialog maxWidth=\"sm\" fullWidth open={this.props.open} onClose={this.props.onClose} aria-labelledby=\"form-dialog-title\">\r\n            <DialogTitle id=\"form-dialog-title\">{this.props.text}</DialogTitle>\r\n\r\n            <DialogContent>\r\n                {this.props.names.map((item,i)=>(\r\n                    <TextField\r\n                        autoFocus\r\n                        margin=\"dense\"\r\n                        id=\"name\"\r\n                        onChange={(event) => this.handleChange(event,item)}\r\n                        label={this.props.labels[i]}\r\n                        type={this.props.types[i]}\r\n                        fullWidth\r\n                    />\r\n                ))}\r\n\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={() => this.props.onSave(this.state)} color=\"primary\">\r\n                    Сохранить\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>);\r\n    }\r\n\r\n}\r\nconst styles = {\r\n\r\n};\r\nexport default withStyles(styles)(FormDialog);","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\ServersDialog.js",["160","161","162","163","164"],"import * as React from \"react\";\r\nimport {\r\n    AppBar,\r\n    Dialog, fade, Grid,\r\n    IconButton,\r\n    InputBase, makeStyles, OutlinedInput,\r\n    Slide,\r\n    TextField,\r\n    Toolbar,\r\n    Typography,\r\n    withStyles\r\n} from \"@material-ui/core\";\r\nimport {Close, Search} from \"@material-ui/icons\";\r\nimport clsx from \"clsx\";\r\nimport ServerCard from \"./ServerCard\";\r\nimport TokenContext from \"./AppContext\";\r\nimport Masonry from 'react-masonry-css'\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n    return <Slide direction=\"right\" ref={ref} {...props} />;\r\n});\r\n\r\n\r\n\r\nclass ServersDialog extends React.Component {\r\n    static contextType = TokenContext;\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleClose = this.handleClose.bind(this);\r\n        this.handleConnect = this.handleConnect.bind(this);\r\n        this.handleSearchChange = this.handleSearchChange.bind(this);\r\n        this.findTag = this.findTag.bind(this);\r\n\r\n        this.state = {\r\n            servers:[],\r\n            search:\"\"\r\n        };\r\n\r\n    }\r\n\r\n\r\n    getElById(arr,id){\r\n        if(arr === undefined)return null;\r\n        for(let i=0;i<arr.length;i++){\r\n            if(arr[i].id === id)return arr[i];\r\n        }\r\n        return null;\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if(!prevProps.open && this.props.open){\r\n            this.setState({search:\"\"})\r\n            fetch(\"https://rp-ruler.ru/api/get_servers.php\").then(response => response.json())\r\n                .then((data)=>{\r\n                    if(data.error === undefined){\r\n                        this.setState({...data})\r\n                    }\r\n                });\r\n        }\r\n    }\r\n\r\n    handleClose(){\r\n        this.props.onClose();\r\n    }\r\n\r\n    handleConnect(id){\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/x-www-form-urlencoded',\r\n            },\r\n            body: \"token=\"+this.context.token+\"&server_id=\"+id\r\n        };\r\n        fetch(\"https://rp-ruler.ru/api/connect_to_server.php\",requestOptions).then(response => response.json())\r\n            .then((data)=>{\r\n                if(data.error === undefined){\r\n                    this.handleClose();\r\n                    this.props.onServerConnect();\r\n                }\r\n            });\r\n    }\r\n\r\n    handleSearchChange(event){\r\n        const search = event.target.value;\r\n        this.setState({search:search});\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/x-www-form-urlencoded',\r\n            },\r\n            body: \"s=\"+search\r\n        };\r\n        fetch(\"https://rp-ruler.ru/api/get_servers.php\",requestOptions).then(response => response.json())\r\n            .then((data)=>{\r\n                if(data.error === undefined){\r\n                    this.setState({...data})\r\n                }\r\n            });\r\n    }\r\n\r\n    findTag(tag){\r\n        this.setState({search:\"#\"+tag});\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/x-www-form-urlencoded',\r\n            },\r\n            body: \"s=#\"+tag\r\n        };\r\n        fetch(\"https://rp-ruler.ru/api/get_servers.php\",requestOptions).then(response => response.json())\r\n            .then((data)=>{\r\n                if(data.error === undefined){\r\n                    this.setState({...data})\r\n                }\r\n            });\r\n    }\r\n\r\n    render() {\r\n        const {classes} = this.props;\r\n\r\n        return (\r\n            <Dialog fullScreen open={this.props.open} onClose={this.handleClose} TransitionComponent={Transition}>\r\n                <AppBar className={classes.root}>\r\n                    <Toolbar>\r\n                        <IconButton edge=\"start\" color=\"inherit\" onClick={this.handleClose} aria-label=\"close\">\r\n                            <Close />\r\n                        </IconButton>\r\n                        <Typography className={classes.title} variant=\"h6\" >\r\n                            Доступные сервера\r\n                        </Typography>\r\n                        <div className={classes.search}>\r\n                            <div className={classes.searchIcon}>\r\n                                <Search />\r\n                            </div>\r\n                            <InputBase\r\n                                onChange={this.handleSearchChange}\r\n                                value={this.state.search}\r\n                                placeholder=\"Поиск серверов…\"\r\n                                classes={{\r\n                                    root: classes.inputRoot,\r\n                                    input: classes.inputInput,\r\n                                }}\r\n                                inputProps={{ 'aria-label': 'Поиск серверов' }}\r\n                            />\r\n                        </div>\r\n                    </Toolbar>\r\n                </AppBar>\r\n                <br/><br/><br/>\r\n                <div style={{ padding: 20 }}>\r\n                <Masonry breakpointCols={{\r\n                    default: 5,\r\n                    1650: 4,\r\n                    1200: 3,\r\n                    900: 2\r\n                }}\r\n                         className=\"my-masonry-grid\"\r\n                         columnClassName=\"my-masonry-grid_column\"\r\n                >\r\n                    {this.state.servers.map((item)=>(\r\n                        <ServerCard\r\n                            name={item.name}\r\n                            avatar={item.avatar}\r\n                            bg={item.card_bg}\r\n                            tags={item.tags}\r\n                            isConnected={this.getElById(this.props.connectedServers,item.id)}\r\n                            description={item.description}\r\n                            players={item.count}\r\n                            onFindTag={this.findTag}\r\n                            className={classes.serverCard}\r\n                            onConnect={() => this.handleConnect(item.id)}\r\n                        />\r\n                    ))}\r\n\r\n                </Masonry>\r\n                </div>\r\n            </Dialog>\r\n        );\r\n    }\r\n}\r\n\r\nconst useStyles = (theme) => ({\r\n    serverCard:{\r\n        \"width\":\"400px\"\r\n    },\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n        display: 'none',\r\n        [theme.breakpoints.up('sm')]: {\r\n            display: 'block',\r\n        },\r\n    },\r\n    search: {\r\n        position: 'relative',\r\n        borderRadius: theme.shape.borderRadius,\r\n        backgroundColor: fade(theme.palette.common.white, 0.15),\r\n        '&:hover': {\r\n            backgroundColor: fade(theme.palette.common.white, 0.25),\r\n        },\r\n        marginLeft: 0,\r\n        width: '100%',\r\n        [theme.breakpoints.up('sm')]: {\r\n            marginLeft: theme.spacing(1),\r\n            width: 'auto',\r\n        },\r\n    },\r\n    searchIcon: {\r\n        padding: theme.spacing(0, 2),\r\n        height: '100%',\r\n        position: 'absolute',\r\n        pointerEvents: 'none',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n    },\r\n    inputRoot: {\r\n        color: 'inherit',\r\n    },\r\n    inputInput: {\r\n        padding: theme.spacing(1, 1, 1, 0),\r\n        // vertical padding + font size from searchIcon\r\n        paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\r\n        transition: theme.transitions.create('width'),\r\n        width: '100%',\r\n        [theme.breakpoints.up('sm')]: {\r\n            width: '22ch',\r\n            '&:focus': {\r\n                width: '40ch',\r\n            },\r\n        },\r\n    },\r\n});\r\n\r\n\r\n\r\nexport default withStyles(useStyles)(ServersDialog);","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\ServerCard.js",[],"C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\UserPopover.js",[],"C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\Emoji.js",["165"],"import * as React from \"react\";\r\nimport {Button, Fade, Popover, withStyles} from \"@material-ui/core\";\r\nimport {Picker} from \"emoji-mart\";\r\nimport {Mood} from \"@material-ui/icons\";\r\n\r\nclass Emoji extends React.Component {\r\n\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            open:false,\r\n            anchorEl:null,\r\n        }\r\n        this.handleButtonClick = this.handleButtonClick.bind(this);\r\n        this.handleClose = this.handleClose.bind(this);\r\n    }\r\n\r\n    handleButtonClick(event){\r\n        this.setState({\r\n            anchorEl:event.currentTarget,\r\n            open:true\r\n        });\r\n    }\r\n    handleClose(){\r\n        this.setState({open:false});\r\n    }\r\n\r\n\r\n    render() {\r\n        const {classes} = this.props;\r\n        return (<div><Button onClick={this.handleButtonClick} className={classes.emojiButton}><Mood/></Button>\r\n            <Popover\r\n            open={this.state.open}\r\n            anchorEl={this.state.anchorEl}\r\n            onClose={this.handleClose}\r\n            anchorOrigin={{\r\n                vertical: 'top',\r\n                horizontal: 'right',\r\n            }}\r\n            transformOrigin={{\r\n                vertical: 'bottom',\r\n                horizontal: 'right',\r\n            }}\r\n        >\r\n            <Picker\r\n                native={true}\r\n\r\n                theme={this.props.isDarkTheme ? \"dark\" : \"light\"}\r\n                color=\"#ff5722\"\r\n                defaultSkin={6}\r\n                title=\"\"\r\n                onSelect={this.props.onSelect}\r\n                emoji='point_up'\r\n                showPreview={false}\r\n                i18n={{search: 'Поиск',\r\n                    clear: 'Очистить',\r\n                    notfound: 'Не найдено',\r\n                    skintext: 'Нигер?',\r\n                    categories: {\r\n                        search: 'Результаты',\r\n                        recent: 'Любимые смайлики',\r\n                        smileys: 'Эмоции',\r\n                        people: 'Люди',\r\n                        nature: 'Не люди',\r\n                        foods: 'Хавчик',\r\n                        activity: 'Спорт',\r\n                        places: 'Путешествия',\r\n                        objects: 'Предметы',\r\n                        symbols: 'Символы',\r\n                        flags: 'Флаги',\r\n                        custom: 'Кастом',\r\n                    },\r\n                    categorieslabel: 'Категории', // Accessible title for the list of categories\r\n                    skintones: {\r\n                        1: 'Китаец',\r\n                        2: 'Ариец',\r\n                        3: 'Не совсем ариец',\r\n                        4: 'Полу нигер',\r\n                        5: 'Нигер',\r\n                        6: 'Самый нигерный нигер',\r\n                    }}}\r\n            />\r\n\r\n        </Popover></div>);\r\n    }\r\n}\r\nconst styles = {\r\n    emojiButton:{\r\n        position:\"absolute\",\r\n        bottom:\"10px\",\r\n        right:\"69px\",\r\n        opacity:0.7\r\n    },\r\n};\r\nexport default withStyles(styles)(Emoji);","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\Restore.js",["166","167","168","169","170"],"import * as React from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n    Box, Button,\r\n    Container,\r\n    CssBaseline,\r\n    Grid,\r\n    Link, Paper,\r\n    TextField,\r\n    Typography, withStyles\r\n} from \"@material-ui/core\";\r\nimport { Link as RouterLink } from 'react-router-dom';\r\nimport {Copyright} from \"./Copyright\";\r\nimport {withRouter} from \"react-router-dom\";\r\n\r\n\r\n\r\nclass Restore extends React.Component{\r\n\r\n    routingFunction = () => {\r\n        this.props.history.push(\"/login\");\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            login:\"\",\r\n            wrongLogin:false,\r\n            wrongCode:false,\r\n            codeSend:false,\r\n            code:\"\",\r\n            codeConfirm:false,\r\n            password:\"\",\r\n            passwordRepeat:\"\",\r\n            wrongPass:false\r\n        };\r\n        this.handleInputChange = this.handleInputChange.bind(this);\r\n        this.handleSubmitLogin = this.handleSubmitLogin.bind(this);\r\n        this.handleSubmitCode = this.handleSubmitCode.bind(this);\r\n        this.handleSubmitPass = this.handleSubmitPass.bind(this);\r\n    }\r\n\r\n    handleInputChange(event) {\r\n        const target = event.target;\r\n        const value = target.value;\r\n        const name = target.name;\r\n\r\n        this.setState({\r\n            [name]: value,\r\n            wrongLogin:false\r\n        });\r\n    }\r\n\r\n    handleSubmitLogin(e){\r\n        e.preventDefault();\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/x-www-form-urlencoded',\r\n            },\r\n            body: \"login=\"+this.state.login\r\n        };\r\n        fetch(\"https://rp-ruler.ru/api/restore_send.php\",requestOptions)\r\n            .then(response => response.json())\r\n            .then((data)=>{\r\n                if(data[\"success\"] == 1){\r\n                    this.setState({codeSend:true,wrongLogin:false});\r\n                }else{\r\n                    this.setState({wrongLogin:true});\r\n                }\r\n            })\r\n    }\r\n    handleSubmitCode(e){\r\n        e.preventDefault();\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/x-www-form-urlencoded',\r\n            },\r\n            body: \"login=\"+this.state.login+\"&code=\"+this.state.code\r\n        };\r\n        fetch(\"https://rp-ruler.ru/api/restore_code_check.php\",requestOptions)\r\n            .then(response => response.json())\r\n            .then((data)=>{\r\n                if(data[\"correct\"] == 1){\r\n                    this.setState({codeConfirm:true,wrongCode:false});\r\n                }else{\r\n                    this.setState({wrongCode:true});\r\n                }\r\n            })\r\n    }\r\n    handleSubmitPass(e){\r\n        e.preventDefault();\r\n        if(this.state.password != this.state.passwordRepeat){\r\n            this.setState({wrongPass:true});\r\n            return;\r\n        }\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/x-www-form-urlencoded',\r\n            },\r\n            body: \"login=\"+this.state.login+\"&code=\"+this.state.code+\"&pass=\"+this.state.password\r\n        };\r\n        fetch(\"https://rp-ruler.ru/api/restore.php\",requestOptions)\r\n            .then(response => response.json())\r\n            .then((data)=>{\r\n                if(data[\"success\"] == 1){\r\n                    this.setState({wrongPass:false});\r\n                    this.routingFunction();\r\n                }\r\n            })\r\n    }\r\n\r\n    render() {\r\n        const {classes} = this.props;\r\n        if(!this.state.codeSend){\r\n            return(<Grid container justify=\"center\">\r\n                <CssBaseline />\r\n                <Paper elevation={6} className={classes.paper} item>\r\n                    <Typography component=\"h1\" variant=\"h5\">\r\n                        Восстановление пароля. Снова...\r\n                    </Typography>\r\n                    <form className={classes.form} noValidate\r\n                          onSubmit={this.handleSubmitLogin} >\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            margin=\"normal\"\r\n                            error={this.state.wrongLogin}\r\n                            required\r\n                            fullWidth\r\n                            id=\"login\"\r\n                            label=\"Логин или E-mail\"\r\n                            name=\"login\"\r\n                            helperText={this.state.wrongLogin ? \"Пользователь не найден\" : \"\"}\r\n                            autoComplete=\"login\"\r\n                            onChange = {this.handleInputChange}\r\n                            value={this.state.login}\r\n                            autoFocus\r\n                        />\r\n                        <Button\r\n                            type=\"submit\"\r\n                            fullWidth\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            className={classes.submit}\r\n                        >\r\n                            Отправить письмо\r\n                        </Button>\r\n                        <Grid container>\r\n                            <Grid item xs>\r\n                                <Link href=\"#\" variant=\"body2\" to=\"/login\" component={RouterLink}>\r\n                                    Войти\r\n                                </Link>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Link to=\"/registration\" component={RouterLink} variant=\"body2\">\r\n                                    Зарегистрироваться\r\n                                </Link>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </form>\r\n                    <Box mt={8}>\r\n                        <Copyright />\r\n                    </Box>\r\n                </Paper>\r\n\r\n            </Grid>);\r\n\r\n        }else if(!this.state.codeConfirm){\r\n\r\n            return(<Grid container justify=\"center\">\r\n                <CssBaseline />\r\n                <Paper elevation={6} className={classes.paper} item>\r\n                    <Typography component=\"h1\" variant=\"h5\">\r\n                        Восстановление пароля. Снова...\r\n                    </Typography>\r\n                    <form className={classes.form} noValidate\r\n                          onSubmit={this.handleSubmitCode} >\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            margin=\"normal\"\r\n                            error={this.state.wrongCode}\r\n                            required\r\n                            fullWidth\r\n                            id=\"code\"\r\n                            label=\"Код из письма\"\r\n                            name=\"code\"\r\n                            autoComplete=\"false\"\r\n                            helperText={this.state.wrongCode ? \"Неверный код\" : \"\"}\r\n                            onChange = {this.handleInputChange}\r\n                            value={this.state.code}\r\n                            autoFocus\r\n                        />\r\n                        <Button\r\n                            type=\"submit\"\r\n                            fullWidth\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            className={classes.submit}\r\n                        >\r\n                            Отправить\r\n                        </Button>\r\n                        <Grid container>\r\n                            <Grid item xs>\r\n                                <Link href=\"#\" variant=\"body2\" to=\"/login\" component={RouterLink}>\r\n                                    Войти\r\n                                </Link>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Link to=\"/registration\" component={RouterLink} variant=\"body2\">\r\n                                    Зарегистрироваться\r\n                                </Link>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </form>\r\n                    <Box mt={8}>\r\n                        <Copyright />\r\n                    </Box>\r\n                </Paper>\r\n\r\n            </Grid>);\r\n\r\n        }else{\r\n            return(<Grid container justify=\"center\">\r\n                <CssBaseline />\r\n                <Paper elevation={6} className={classes.paper} item>\r\n                    <Typography component=\"h1\" variant=\"h5\">\r\n                        Восстановление пароля. Снова...\r\n                    </Typography>\r\n                    <form className={classes.form} noValidate\r\n                          onSubmit={this.handleSubmitPass} >\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            margin=\"normal\"\r\n                            required\r\n                            fullWidth\r\n                            id=\"password\"\r\n                            label=\"Новый пароль\"\r\n                            name=\"password\"\r\n                            type=\"password\"\r\n                            autoComplete=\"password\"\r\n                            onChange = {this.handleInputChange}\r\n                            value={this.state.password}\r\n                            autoFocus\r\n                        />\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            margin=\"normal\"\r\n                            required\r\n                            fullWidth\r\n                            error={this.state.wrongPass}\r\n                            helperText={this.state.wrongPass ? \"Пароли не совпадают\" : \"\"}\r\n                            id=\"passwordRepeat\"\r\n                            label=\"Еще раз, чтобы не забыл\"\r\n                            name=\"passwordRepeat\"\r\n                            type=\"password\"\r\n                            autoComplete=\"password\"\r\n                            onChange = {this.handleInputChange}\r\n                            value={this.state.passwordRepeat}\r\n                        />\r\n                        <Button\r\n                            type=\"submit\"\r\n                            fullWidth\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            className={classes.submit}\r\n                        >\r\n                            Поменять пароль\r\n                        </Button>\r\n                        <Grid container>\r\n                            <Grid item xs>\r\n                                <Link href=\"#\" variant=\"body2\" to=\"/login\" component={RouterLink}>\r\n                                    Войти\r\n                                </Link>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Link to=\"/registration\" component={RouterLink} variant=\"body2\">\r\n                                    Зарегистрироваться\r\n                                </Link>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </form>\r\n                    <Box mt={8}>\r\n                        <Copyright />\r\n                    </Box>\r\n                </Paper>\r\n\r\n            </Grid>);\r\n        }\r\n\r\n\r\n    }\r\n}\r\n\r\n\r\n\r\nRestore.propTypes = {\r\n    classes: PropTypes.object.isRequired,\r\n};\r\n\r\nconst styles = {\r\n    paper: {\r\n        marginTop: \"160px\",\r\n        padding:\"60px\",\r\n        width:\"500px\",\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: \"10px\",\r\n    },\r\n    submit: {\r\n        margin: \"30px 0 20px\",\r\n    },\r\n};\r\n\r\n\r\nexport default withStyles(styles)(withRouter(Restore));","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\AddServerDialog.js",["171","172","173","174","175","176"],"C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\DialogTitleWithClose.js",[],"C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\AddRoomDialog.js",["177","178","179","180"],{"ruleId":"181","replacedBy":"182"},{"ruleId":"183","replacedBy":"184"},{"ruleId":"185","severity":1,"message":"186","line":9,"column":34,"nodeType":"187","messageId":"188","endLine":9,"endColumn":44},{"ruleId":"185","severity":1,"message":"189","line":9,"column":46,"nodeType":"187","messageId":"188","endLine":9,"endColumn":57},{"ruleId":"185","severity":1,"message":"190","line":14,"column":9,"nodeType":"187","messageId":"188","endLine":14,"endColumn":18},{"ruleId":"191","severity":1,"message":"192","line":51,"column":58,"nodeType":"193","messageId":"194","endLine":51,"endColumn":60},{"ruleId":"191","severity":1,"message":"192","line":78,"column":40,"nodeType":"193","messageId":"194","endLine":78,"endColumn":42},{"ruleId":"185","severity":1,"message":"195","line":185,"column":9,"nodeType":"187","messageId":"188","endLine":185,"endColumn":20},{"ruleId":"185","severity":1,"message":"196","line":5,"column":5,"nodeType":"187","messageId":"188","endLine":5,"endColumn":14},{"ruleId":"185","severity":1,"message":"196","line":5,"column":5,"nodeType":"187","messageId":"188","endLine":5,"endColumn":14},{"ruleId":"185","severity":1,"message":"197","line":7,"column":5,"nodeType":"187","messageId":"188","endLine":7,"endColumn":21},{"ruleId":"185","severity":1,"message":"198","line":15,"column":8,"nodeType":"187","messageId":"188","endLine":15,"endColumn":19},{"ruleId":"185","severity":1,"message":"199","line":3,"column":5,"nodeType":"187","messageId":"188","endLine":3,"endColumn":11},{"ruleId":"185","severity":1,"message":"200","line":5,"column":27,"nodeType":"187","messageId":"188","endLine":5,"endColumn":31},{"ruleId":"185","severity":1,"message":"201","line":5,"column":33,"nodeType":"187","messageId":"188","endLine":5,"endColumn":41},{"ruleId":"185","severity":1,"message":"202","line":5,"column":43,"nodeType":"187","messageId":"188","endLine":5,"endColumn":57},{"ruleId":"185","severity":1,"message":"203","line":5,"column":59,"nodeType":"187","messageId":"188","endLine":5,"endColumn":71},{"ruleId":"185","severity":1,"message":"204","line":11,"column":10,"nodeType":"187","messageId":"188","endLine":11,"endColumn":16},{"ruleId":"205","severity":1,"message":"206","line":80,"column":21,"nodeType":"207","endLine":80,"endColumn":31},{"ruleId":"205","severity":1,"message":"206","line":81,"column":21,"nodeType":"207","endLine":81,"endColumn":31},{"ruleId":"205","severity":1,"message":"206","line":174,"column":9,"nodeType":"207","endLine":174,"endColumn":19},{"ruleId":"205","severity":1,"message":"206","line":175,"column":9,"nodeType":"207","endLine":175,"endColumn":19},{"ruleId":"205","severity":1,"message":"206","line":180,"column":9,"nodeType":"207","endLine":180,"endColumn":19},{"ruleId":"205","severity":1,"message":"206","line":186,"column":9,"nodeType":"207","endLine":186,"endColumn":19},{"ruleId":"205","severity":1,"message":"206","line":187,"column":9,"nodeType":"207","endLine":187,"endColumn":19},{"ruleId":"191","severity":1,"message":"208","line":298,"column":31,"nodeType":"193","messageId":"194","endLine":298,"endColumn":33},{"ruleId":"191","severity":1,"message":"208","line":374,"column":29,"nodeType":"193","messageId":"194","endLine":374,"endColumn":31},{"ruleId":"191","severity":1,"message":"192","line":476,"column":52,"nodeType":"193","messageId":"194","endLine":476,"endColumn":54},{"ruleId":"191","severity":1,"message":"192","line":479,"column":55,"nodeType":"193","messageId":"194","endLine":479,"endColumn":57},{"ruleId":"185","severity":1,"message":"209","line":3,"column":9,"nodeType":"187","messageId":"188","endLine":3,"endColumn":22},{"ruleId":"185","severity":1,"message":"210","line":14,"column":39,"nodeType":"187","messageId":"188","endLine":14,"endColumn":48},{"ruleId":"185","severity":1,"message":"211","line":2,"column":69,"nodeType":"187","messageId":"188","endLine":2,"endColumn":74},{"ruleId":"185","severity":1,"message":"212","line":3,"column":51,"nodeType":"187","messageId":"188","endLine":3,"endColumn":57},{"ruleId":"185","severity":1,"message":"213","line":6,"column":16,"nodeType":"187","messageId":"188","endLine":6,"endColumn":23},{"ruleId":"185","severity":1,"message":"214","line":4,"column":13,"nodeType":"187","messageId":"188","endLine":4,"endColumn":23},{"ruleId":"185","severity":1,"message":"215","line":4,"column":25,"nodeType":"187","messageId":"188","endLine":4,"endColumn":39},{"ruleId":"185","severity":1,"message":"216","line":7,"column":35,"nodeType":"187","messageId":"188","endLine":7,"endColumn":45},{"ruleId":"191","severity":1,"message":"192","line":95,"column":32,"nodeType":"193","messageId":"194","endLine":95,"endColumn":34},{"ruleId":"191","severity":1,"message":"192","line":122,"column":73,"nodeType":"193","messageId":"194","endLine":122,"endColumn":75},{"ruleId":"185","severity":1,"message":"211","line":2,"column":9,"nodeType":"187","messageId":"188","endLine":2,"endColumn":14},{"ruleId":"191","severity":1,"message":"208","line":170,"column":68,"nodeType":"193","messageId":"194","endLine":170,"endColumn":70},{"ruleId":"191","severity":1,"message":"208","line":99,"column":86,"nodeType":"193","messageId":"194","endLine":99,"endColumn":88},{"ruleId":"185","severity":1,"message":"200","line":9,"column":5,"nodeType":"187","messageId":"188","endLine":9,"endColumn":9},{"ruleId":"185","severity":1,"message":"217","line":4,"column":19,"nodeType":"187","messageId":"188","endLine":4,"endColumn":23},{"ruleId":"185","severity":1,"message":"218","line":6,"column":16,"nodeType":"187","messageId":"188","endLine":6,"endColumn":26},{"ruleId":"185","severity":1,"message":"219","line":6,"column":28,"nodeType":"187","messageId":"188","endLine":6,"endColumn":41},{"ruleId":"185","severity":1,"message":"220","line":8,"column":5,"nodeType":"187","messageId":"188","endLine":8,"endColumn":14},{"ruleId":"185","severity":1,"message":"221","line":14,"column":8,"nodeType":"187","messageId":"188","endLine":14,"endColumn":12},{"ruleId":"185","severity":1,"message":"222","line":2,"column":17,"nodeType":"187","messageId":"188","endLine":2,"endColumn":21},{"ruleId":"185","severity":1,"message":"196","line":5,"column":5,"nodeType":"187","messageId":"188","endLine":5,"endColumn":14},{"ruleId":"191","severity":1,"message":"192","line":67,"column":36,"nodeType":"193","messageId":"194","endLine":67,"endColumn":38},{"ruleId":"191","severity":1,"message":"192","line":86,"column":36,"nodeType":"193","messageId":"194","endLine":86,"endColumn":38},{"ruleId":"191","severity":1,"message":"208","line":95,"column":32,"nodeType":"193","messageId":"194","endLine":95,"endColumn":34},{"ruleId":"191","severity":1,"message":"192","line":109,"column":36,"nodeType":"193","messageId":"194","endLine":109,"endColumn":38},{"ruleId":"185","severity":1,"message":"201","line":6,"column":60,"nodeType":"187","messageId":"188","endLine":6,"endColumn":68},{"ruleId":"191","severity":1,"message":"208","line":39,"column":68,"nodeType":"193","messageId":"194","endLine":39,"endColumn":70},{"ruleId":"191","severity":1,"message":"192","line":50,"column":41,"nodeType":"193","messageId":"194","endLine":50,"endColumn":43},{"ruleId":"191","severity":1,"message":"192","line":63,"column":35,"nodeType":"193","messageId":"194","endLine":63,"endColumn":37},{"ruleId":"223","severity":1,"message":"224","line":107,"column":21,"nodeType":"225","endLine":107,"endColumn":132},{"ruleId":"191","severity":1,"message":"208","line":130,"column":58,"nodeType":"193","messageId":"194","endLine":130,"endColumn":60},{"ruleId":"191","severity":1,"message":"192","line":32,"column":62,"nodeType":"193","messageId":"194","endLine":32,"endColumn":64},{"ruleId":"191","severity":1,"message":"208","line":58,"column":68,"nodeType":"193","messageId":"194","endLine":58,"endColumn":70},{"ruleId":"223","severity":1,"message":"224","line":88,"column":21,"nodeType":"225","endLine":88,"endColumn":132},{"ruleId":"191","severity":1,"message":"208","line":110,"column":58,"nodeType":"193","messageId":"194","endLine":110,"endColumn":60},"no-native-reassign",["226"],"no-negated-in-lhs",["227"],"no-unused-vars","'useHistory' is defined but never used.","Identifier","unusedVar","'useLocation' is defined but never used.","'useEffect' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'contextType' is assigned a value but never used.","'Container' is defined but never used.","'FormControlLabel' is defined but never used.","'ParticlesBg' is defined but never used.","'Avatar' is defined but never used.","'List' is defined but never used.","'ListItem' is defined but never used.","'ListItemAvatar' is defined but never used.","'ListItemText' is defined but never used.","'Picker' is defined but never used.","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","Expected '!==' and instead saw '!='.","'AssignmentInd' is defined but never used.","'ExitToApp' is defined but never used.","'Paper' is defined but never used.","'Remove' is defined but never used.","'classes' is assigned a value but never used.","'IconButton' is defined but never used.","'LinearProgress' is defined but never used.","'Typography' is defined but never used.","'Grid' is defined but never used.","'makeStyles' is defined but never used.","'OutlinedInput' is defined but never used.","'TextField' is defined but never used.","'clsx' is defined but never used.","'Fade' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]