[{"C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\index.js":"1","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\App.js":"2","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\reportWebVitals.js":"3","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\Auth.js":"4","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\Copyright.js":"5","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\Reg.js":"6","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\Chat.js":"7","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\MainMenu.js":"8","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\AppContext.js":"9","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\RoomsList.js":"10","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\ServerName.js":"11","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\RoomAppBar.js":"12","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\Messages.js":"13","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\InputReplyMessage.js":"14","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\ProfileDialog.js":"15","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\UsersList.js":"16","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\FormDialog.js":"17","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\ServersDialog.js":"18","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\ServerCard.js":"19","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\UserPopover.js":"20","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\Emoji.js":"21","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\Restore.js":"22"},{"size":503,"mtime":1609784667425,"results":"23","hashOfConfig":"24"},{"size":5531,"mtime":1613047532622,"results":"25","hashOfConfig":"24"},{"size":362,"mtime":499162500000,"results":"26","hashOfConfig":"24"},{"size":5253,"mtime":1613065405303,"results":"27","hashOfConfig":"24"},{"size":420,"mtime":1609796221422,"results":"28","hashOfConfig":"24"},{"size":6286,"mtime":1613065727481,"results":"29","hashOfConfig":"24"},{"size":20397,"mtime":1613230868786,"results":"30","hashOfConfig":"24"},{"size":2876,"mtime":1610535915615,"results":"31","hashOfConfig":"24"},{"size":275,"mtime":1613046066746,"results":"32","hashOfConfig":"24"},{"size":1590,"mtime":1612831073531,"results":"33","hashOfConfig":"24"},{"size":3020,"mtime":1613048523198,"results":"34","hashOfConfig":"24"},{"size":576,"mtime":1609880521176,"results":"35","hashOfConfig":"24"},{"size":5512,"mtime":1612851732896,"results":"36","hashOfConfig":"24"},{"size":1402,"mtime":1610393308212,"results":"37","hashOfConfig":"24"},{"size":13449,"mtime":1613046292477,"results":"38","hashOfConfig":"24"},{"size":3513,"mtime":1613226682106,"results":"39","hashOfConfig":"24"},{"size":1604,"mtime":1610432673966,"results":"40","hashOfConfig":"24"},{"size":3420,"mtime":1612795478129,"results":"41","hashOfConfig":"24"},{"size":1569,"mtime":1610433077694,"results":"42","hashOfConfig":"24"},{"size":1551,"mtime":1612828591413,"results":"43","hashOfConfig":"24"},{"size":3199,"mtime":1612902663095,"results":"44","hashOfConfig":"24"},{"size":12174,"mtime":1613065787688,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"kco36v",{"filePath":"49","messages":"50","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"48"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"48"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"48"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"48"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"48"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"48"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"48"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"48"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"48"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"48"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"48"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"48"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"48"},"C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\index.js",[],["104","105"],"C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\App.js",["106","107","108","109"],"import Cookies from 'universal-cookie';\nimport './App.css';\nimport * as React from \"react\";\nimport Auth from \"./Auth\";\nimport Reg from \"./Reg\";\nimport Chat from \"./Chat\";\nimport {createMuiTheme} from \"@material-ui/core\";\nimport {ThemeProvider} from \"@material-ui/core\";\nimport {Route, Switch, Redirect, useHistory, useLocation} from \"react-router\";\nimport {BrowserRouter as Router} from \"react-router-dom\";\nimport TokenContext from \"./AppContext\";\nimport Restore from \"./Restore\";\nimport ParticlesBg from \"particles-bg\";\n\n\nexport class App extends React.Component{\n\n    constructor(props) {\n        super(props);\n        let darkTheme = createMuiTheme({\n            palette: {\n                type: 'dark',\n                primary: {\n                    main: \"#ff5722\",\n                },\n                secondary: {\n                    main: \"#ff5722\",\n                },\n            },\n        });\n        let lightTheme = createMuiTheme({\n            palette: {\n                type: 'light',\n                primary: {\n                    main: \"#ff5722\",\n                },\n                secondary: {\n                    main: \"#ff5722\",\n                },\n            },\n        });\n\n        const cookies = new Cookies();\n        const token = cookies.get(\"token\");\n        const user_id = cookies.get(\"user_id\");\n        const isDarkTheme = cookies.get(\"is_dark_theme\") == \"1\";\n        this.handleLogin = this.handleLogin.bind(this);\n        this.toggleTheme = this.toggleTheme.bind(this);\n        this.logout = this.logout.bind(this);\n        this.state = {\n            token:token,\n            user_id:user_id,\n            isDarkTheme:isDarkTheme,\n            toggleTheme:this.toggleTheme,\n            logout:this.logout,\n            isAnimationEnable:true,\n            toggleAnimation: () => {this.setState(\n                (state)=>{return {isAnimationEnable:!state.isAnimationEnable}\n                })},\n            theme:isDarkTheme ? darkTheme : lightTheme\n        };\n\n    }\n\n    logout(){\n        const cookies = new Cookies();\n        cookies.set(\"token\",null);\n        cookies.set(\"user_id\",null);\n        this.setState({token:null,user_id:null});\n    }\n\n    handleLogin(token,id){\n        const cookies = new Cookies();\n        cookies.set(\"token\",token);\n        cookies.set(\"user_id\",id);\n        this.setState({token:token,user_id:id});\n    }\n\n\n\n    toggleTheme () {\n        let darkTheme = createMuiTheme({\n            palette: {\n                type: 'dark',\n                primary: {\n                    main: \"#ff5722\",\n                },\n                secondary: {\n                    main: \"#ff5722\",\n                },\n            },\n        });\n        let lightTheme = createMuiTheme({\n            palette: {\n                type: 'light',\n                primary: {\n                    main: \"#ff5722\",\n                },\n                secondary: {\n                    main: \"#ff5722\",\n                },\n            },\n        });\n        this.setState(state => ({\n            theme:state.isDarkTheme ? lightTheme : darkTheme,\n            isDarkTheme: !state.isDarkTheme\n            }),() => {\n                this.forceUpdate();\n                const cookies = new Cookies();\n                cookies.set(\"is_dark_theme\",this.state.isDarkTheme ? \"1\" : \"0\");\n        }\n        );\n\n    }\n\n\n\n    render() {\n        /*\n        let randIndex = Math.floor(Math.random()*4);\n        let effect = null;\n        switch(randIndex){\n            case 0:\n                effect = <ParticlesBg color=\"#ff5722\" num={200} type=\"cobweb\"  bg={true} />;\n                break;\n            case 1:\n                effect = <ParticlesBg color=\"#303030\" num={200} type=\"lines\"  bg={true} />;\n                break;\n            case 2:\n                effect = <ParticlesBg color=\"#ff5722\" num={20} type=\"fountain\"  bg={true} />;\n                break;\n            case 3:\n                effect = <ParticlesBg color=\"#ff5722\" num={20} type=\"polygon\"  bg={true} />;\n                break;\n        }*/\n        return(\n            <TokenContext.Provider value={this.state}>\n                <ThemeProvider theme={this.state.theme}>\n            <Router>\n                {this.state.isAnimationEnable ? <ParticlesBg color=\"#ff5722\" num={200} type=\"cobweb\"  bg={true} /> : \"\"}\n                <Switch>\n                    <Route path=\"/login\">\n                        <Auth onLogin={this.handleLogin}/>\n                    </Route>\n                    <Route path=\"/registration\">\n                        <Reg onReg={this.handleLogin}/>\n                    </Route>\n                    <Route path=\"/restore\">\n                        <Restore/>\n                    </Route>\n                    <PrivateRoute token={this.state.token} path=\"/\">\n                        <Chat isDarkTheme={this.state.isDarkTheme}/>\n                    </PrivateRoute>\n                </Switch>\n            </Router>\n                </ThemeProvider>\n            </TokenContext.Provider>\n                );\n    }\n}\nfunction PrivateRoute({ children, ...rest }) {\n    let contextType = TokenContext;\n    return (\n        <Route\n            {...rest}\n            render={({ location }) =>\n                rest.token != null ? (\n                    children\n                ) : (\n                    <Redirect\n                        to={{\n                            pathname: \"/login\",\n                            state: { from: location }\n                        }}\n                    />\n                )\n            }\n        />\n    );\n}","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\reportWebVitals.js",[],"C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\Auth.js",["110","111"],"import * as React from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n    Box, Button,\r\n    Container,\r\n    CssBaseline,\r\n    Grid,\r\n    Link,\r\n    TextField,\r\n    Typography, withStyles,Paper\r\n} from \"@material-ui/core\";\r\nimport { Link as RouterLink } from 'react-router-dom';\r\nimport {Copyright} from \"./Copyright\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport ParticlesBg from 'particles-bg'\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass Auth extends React.Component{\r\n\r\n    routingFunction = () => {\r\n        this.props.history.push(\"/\");\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            login:\"\",\r\n            pass:\"\",\r\n            wrongLoginPass:false\r\n        };\r\n        this.handleInputChange = this.handleInputChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleInputChange(event) {\r\n        const target = event.target;\r\n        const value = target.value;\r\n        const name = target.name;\r\n\r\n        this.setState({\r\n            [name]: value,\r\n            wrongLoginPass:false\r\n        });\r\n    }\r\n\r\n    handleSubmit(e){\r\n        e.preventDefault();\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/x-www-form-urlencoded',\r\n            },\r\n            body: \"login=\"+this.state.login+\"&pass=\"+this.state.pass\r\n        };\r\n        fetch(\"https://rp-ruler.ru/api/login.php\",requestOptions)\r\n            .then(response => response.json())\r\n            .then((data)=>{\r\n                if(data[\"token\"] !== undefined){\r\n                    this.props.onLogin(data[\"token\"],data[\"user_id\"]);\r\n                    this.routingFunction();\r\n                }else if( data[\"error\"] === 1){\r\n                    this.setState({wrongLoginPass:true});\r\n                }\r\n            })\r\n    }\r\n\r\n    render() {\r\n        const {classes} = this.props;\r\n\r\n\r\n        return(<Grid container justify=\"center\">\r\n            <CssBaseline />\r\n\r\n            <Paper elevation={6} className={classes.paper} item>\r\n                <Typography component=\"h1\" variant=\"h5\">\r\n                    Добро пожаловать. Снова.\r\n                </Typography>\r\n                <form className={classes.form} noValidate\r\n                      onSubmit={this.handleSubmit} >\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        error={this.state.wrongLoginPass}\r\n                        required\r\n                        fullWidth\r\n                        id=\"login\"\r\n                        label=\"Логин или E-mail\"\r\n                        name=\"login\"\r\n                        helperText={this.state.wrongLoginPass ? \"Неверный логин или пароль\" : \"\"}\r\n                        autoComplete=\"login\"\r\n                        onChange = {this.handleInputChange}\r\n                        value={this.state.login}\r\n                        autoFocus\r\n                    />\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        required\r\n                        error={this.state.wrongLoginPass}\r\n                        fullWidth\r\n                        onChange = {this.handleInputChange}\r\n                        name=\"pass\"\r\n                        label=\"Пароль\"\r\n                        type=\"password\"\r\n                        value={this.state.password}\r\n                        id=\"pass\"\r\n                        autoComplete=\"current-password\"\r\n                    />\r\n                    <Button\r\n                        type=\"submit\"\r\n                        fullWidth\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className={classes.submit}\r\n                    >\r\n                        Войти\r\n                    </Button>\r\n                    <Grid container>\r\n                        <Grid item xs>\r\n                            <Link href=\"#\" variant=\"body2\" to=\"/restore\" component={RouterLink}>\r\n                                Забыли пароль?\r\n                            </Link>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Link to=\"/registration\" component={RouterLink} variant=\"body2\">\r\n                                Зарегистрироваться\r\n                            </Link>\r\n                        </Grid>\r\n                    </Grid>\r\n                </form>\r\n                <Box mt={8}>\r\n                    <Copyright />\r\n                </Box>\r\n            </Paper>\r\n\r\n        </Grid>);\r\n    }\r\n}\r\n\r\n\r\n\r\nAuth.propTypes = {\r\n    classes: PropTypes.object.isRequired,\r\n};\r\n\r\nconst styles = {\r\n    paper: {\r\n        marginTop: \"160px\",\r\n        padding:\"60px\",\r\n        width:\"500px\",\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: \"10px\",\r\n    },\r\n    submit: {\r\n        margin: \"30px 0 20px\",\r\n    },\r\n};\r\n\r\n\r\nexport default withStyles(styles)(withRouter(Auth));","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\Copyright.js",[],"C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\Reg.js",["112","113","114"],"import * as React from \"react\";\r\nimport {\r\n    Box,\r\n    Button,\r\n    Container,\r\n    CssBaseline,\r\n    FormControlLabel,\r\n    Grid,\r\n    Link, Paper,\r\n    TextField,\r\n    Typography, withStyles\r\n} from \"@material-ui/core\";\r\nimport {Copyright} from \"./Copyright\";\r\nimport {Link as RouterLink, withRouter} from 'react-router-dom';\r\nimport ParticlesBg from \"particles-bg\";\r\n\r\n\r\n\r\nclass Reg extends React.Component{\r\n    routingFunction = () => {\r\n        this.props.history.push(\"/\");\r\n    }\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            login:\"\",\r\n            pass:\"\",\r\n            mail:\"\",\r\n            isWrongLogin:false,\r\n            isWrongMail:false\r\n        };\r\n        this.handleInputChange = this.handleInputChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n    handleInputChange(event) {\r\n        const target = event.target;\r\n        const value = target.value;\r\n        const name = target.name;\r\n        this.setState({\r\n            [name]: value,\r\n            isWrongLogin:false,\r\n            isWrongMail:false\r\n        });\r\n    }\r\n\r\n    handleSubmit(e){\r\n        e.preventDefault();\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/x-www-form-urlencoded',\r\n            },\r\n            body: \"login=\"+this.state.login+\"&pass=\"+this.state.pass+\"&email=\"+this.state.email\r\n        };\r\n        fetch(\"https://rp-ruler.ru/api/registration.php\",requestOptions)\r\n            .then(response => response.json())\r\n            .then((data)=>{\r\n                if(data[\"token\"] !== undefined){\r\n                    this.props.onReg(data[\"token\"],data[\"user_id\"]);\r\n                    this.routingFunction();\r\n                }else if( data[\"error\"] === 1){\r\n                    this.setState({isWrongLogin:true});\r\n                }else if( data[\"error\"] === 2) {\r\n                    this.setState({isWrongMail:true});\r\n                }\r\n            })\r\n    }\r\n\r\n    render() {\r\n        const {classes} = this.props;\r\n        return ( <Grid container justify=\"center\">\r\n            <CssBaseline />\r\n\r\n            <Paper elevation={6} className={classes.paper} item>\r\n                <Typography component=\"h1\" variant=\"h5\">\r\n                    Добро пожаловать.\r\n                </Typography>\r\n                <form className={classes.form} onSubmit={this.handleSubmit} noValidate>\r\n                    <Grid container spacing={2}>\r\n                        <Grid item xs={12} sm={12}>\r\n                            <TextField\r\n                                autoComplete=\"login\"\r\n                                name=\"login\"\r\n                                variant=\"outlined\"\r\n                                required\r\n                                fullWidth\r\n                                id=\"login\"\r\n                                error={this.state.isWrongLogin}\r\n                                helperText={this.state.isWrongLogin ? \"Логин занят\" : \"\"}\r\n                                onChange={this.handleInputChange}\r\n                                label=\"Логин\"\r\n                                autoFocus\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <TextField\r\n                                variant=\"outlined\"\r\n                                required\r\n                                fullWidth\r\n                                id=\"email\"\r\n                                label=\"Email\"\r\n                                error={this.state.isWrongMail}\r\n                                helperText={this.state.isWrongMail ?\r\n                                    \"Пользователь с такой почтой уже существует \" : \"\"}\r\n                                name=\"email\"\r\n                                onChange={this.handleInputChange}\r\n                                autoComplete=\"email\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <TextField\r\n                                variant=\"outlined\"\r\n                                required\r\n                                fullWidth\r\n                                name=\"pass\"\r\n                                label=\"Пароль\"\r\n                                type=\"password\"\r\n                                onChange={this.handleInputChange}\r\n                                id=\"pass\"\r\n                                autoComplete=\"current-password\"\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Button\r\n                        type=\"submit\"\r\n                        fullWidth\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className={classes.submit}\r\n                    >\r\n                        зарегистрироваться\r\n                    </Button>\r\n                    <Grid container justify=\"flex-end\">\r\n                        <Grid item xs>\r\n                            <Link href=\"#\" variant=\"body2\" component={RouterLink} to=\"/restore\" >\r\n                                Забыли пароль?\r\n                            </Link>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Link href=\"#\" component={RouterLink} to=\"/login\" variant=\"body2\">\r\n                                Уже есть аккаунт?\r\n                            </Link>\r\n                        </Grid>\r\n                    </Grid>\r\n                </form>\r\n                <Box mt={5}>\r\n                    <Copyright />\r\n                </Box>\r\n            </Paper>\r\n\r\n        </Grid>);\r\n    }\r\n}\r\n\r\nconst styles = {\r\n    paper: {\r\n        marginTop: \"160px\",\r\n        padding:\"60px\",\r\n        width:\"500px\",\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: \"10px\",\r\n    },\r\n    submit: {\r\n        margin: \"30px 0 20px\",\r\n    },\r\n};\r\nexport default withStyles(styles)(withRouter(Reg));","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\Chat.js",["115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131"],"C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\MainMenu.js",["132"],"import * as React from \"react\";\r\nimport {Fab, List, ListItem,  withStyles} from \"@material-ui/core\";\r\nimport {AssignmentInd, Add, Settings, Explore, Forum} from \"@material-ui/icons\";\r\n\r\nimport {Divider} from \"@material-ui/core\";\r\nimport AppContext from \"./AppContext.js\";\r\nimport ProfileDialog from \"./ProfileDialog\";\r\nimport ServersDialog from \"./ServersDialog\";\r\n\r\n\r\n\r\nclass MainMenu extends React.Component{\r\n    static contextType = AppContext;\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            profileDialogOpen:false,\r\n            serversDialogOpen:false\r\n        };\r\n        this.handleProfileDialogClose = this.handleProfileDialogClose.bind(this);\r\n        this.handleProfileDialogOpen = this.handleProfileDialogOpen.bind(this);\r\n        this.handleServersDialogClose = this.handleServersDialogClose.bind(this);\r\n        this.handleServersDialogOpen = this.handleServersDialogOpen.bind(this);\r\n\r\n    }\r\n    handleServerClick(id,name){\r\n        this.props.onChangeServer(id,name);\r\n    }\r\n\r\n\r\n    handleProfileDialogClose(){\r\n        this.setState({profileDialogOpen:false})\r\n    }\r\n    handleProfileDialogOpen(){\r\n        this.setState({profileDialogOpen:true})\r\n    }\r\n    handleServersDialogClose(){\r\n        this.setState({serversDialogOpen:false})\r\n    }\r\n    handleServersDialogOpen(){\r\n        this.setState({serversDialogOpen:true})\r\n    }\r\n\r\n    render() {\r\n        const {classes} = this.props;\r\n        return (<div><List><ListItem><Fab onClick={this.handleProfileDialogOpen} aria-label=\"add\">\r\n            <Settings />\r\n        </Fab></ListItem>\r\n                <ListItem><Fab onClick={this.props.onToChatClick} aria-label=\"add\">\r\n                    <Forum />\r\n                </Fab></ListItem>\r\n                <Divider className={classes.divider}/>\r\n            {this.props.servers.map((item)=>(\r\n                <ListItem key={item.id}>\r\n                    <Fab className={classes.serverElem}\r\n                         onClick={() => this.handleServerClick(item.id)}>\r\n                    {item.name.substr(0,2)}</Fab></ListItem>\r\n            ))}\r\n            <ListItem><Fab color=\"primary\" className={classes.serverElem}>\r\n                <Add/></Fab></ListItem>\r\n                <ListItem><Fab color=\"primary\" onClick={this.handleServersDialogOpen} className={classes.serverElem}>\r\n                    <Explore/></Fab></ListItem>\r\n\r\n            </List><ProfileDialog open={this.state.profileDialogOpen} onClose={this.handleProfileDialogClose}/>\r\n                    <ServersDialog open={this.state.serversDialogOpen} onServerConnect={this.props.onServerConnect} onClose={this.handleServersDialogClose}/>\r\n        </div>\r\n        );\r\n    }\r\n\r\n}\r\nconst styles = {\r\n    divider: {\r\n\r\n        padding:\"1px\"\r\n    },\r\n    serverElem:{\r\n        \"font-size\":\"20px\"\r\n    }\r\n};\r\nexport default withStyles(styles)(MainMenu);","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\AppContext.js",[],"C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\RoomsList.js",[],"C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\ServerName.js",["133"],"import * as React from \"react\";\r\nimport {Button, Menu, MenuItem, Paper, withStyles} from \"@material-ui/core\";\r\nimport {Edit, ExitToApp, ExpandMore} from \"@material-ui/icons\";\r\n\r\nclass ServerName extends React.Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {anchorEl:null};\r\n        this.handleServerMenuClick       = this.handleServerMenuClick.bind(this);\r\n        this.handleServerMenuClose       = this.handleServerMenuClose.bind(this);\r\n        this.handleServerDisconnectClick = this.handleServerDisconnectClick.bind(this);\r\n    }\r\n    handleServerMenuClick(event){\r\n        event.preventDefault();\r\n        this.setState({anchorEl:event.currentTarget});\r\n    }\r\n\r\n    handleServerMenuClose(){\r\n        this.setState({anchorEl:null});\r\n\r\n    }\r\n\r\n    handleServerDisconnectClick(){\r\n        this.handleServerMenuClose();\r\n        this.props.onServerDisconnect();\r\n    }\r\n\r\n    render() {\r\n        const {classes} = this.props;\r\n        if(this.props.isChat){\r\n            return(<div><Button fullWidth onContextMenu={this.handleServerMenuClick} onClick={this.handleServerMenuClick}\r\n                                aria-controls=\"fade-menu\" aria-haspopup=\"true\">\r\n                личка\r\n            </Button></div>);\r\n        }else {\r\n            return (\r\n                <div><Button fullWidth onContextMenu={this.handleServerMenuClick} onClick={this.handleServerMenuClick}\r\n                             aria-controls=\"fade-menu\" aria-haspopup=\"true\">\r\n                    {this.props.name}<ExpandMore/>\r\n                </Button><Menu\r\n                    transformOrigin={{\r\n                        vertical: 'top',\r\n                        horizontal: 'center',\r\n                    }}\r\n                    anchorOrigin={{\r\n                        vertical: \"bottom\",\r\n                        horizontal: 'center',\r\n                    }}\r\n                    getContentAnchorEl={null}\r\n                    anchorEl={this.state.anchorEl}\r\n                    keepMounted\r\n                    className={classes.paperWrap}\r\n                    open={Boolean(this.state.anchorEl)}\r\n                    onClose={this.handleServerMenuClose}\r\n                >\r\n                    <MenuItem className={classes.exitServer} onClick={this.handleServerDisconnectClick}>\r\n                        Покинуть сервер <ExitToApp className={classes.icon}/></MenuItem>\r\n                    {this.props.admin ? <MenuItem className={classes.edit} onClick={this.handleServerDisconnectClick}>\r\n                        Редактировать <Edit className={classes.icon}/></MenuItem> : \"\"}\r\n\r\n                </Menu></div>);\r\n        }\r\n    }\r\n}\r\n\r\nconst styles = {\r\n    paperWrap:{\r\n        width:\"100%\",\r\n\r\n    },\r\n    exitServer:{\r\n        color:\"#f50057\",\r\n        \"padding-right\":\"50px\"\r\n    },\r\n    edit:{\r\n        color:\"#ffc107\"\r\n    },\r\n    icon:{\r\n        position:\"absolute\",\r\n        right:\"10px\"\r\n    }\r\n\r\n\r\n};\r\n\r\nexport default withStyles(styles)(ServerName);","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\RoomAppBar.js",["134"],"import * as React from \"react\";\r\nimport {AppBar, Toolbar, Typography, withStyles} from \"@material-ui/core\";\r\n\r\nclass RoomAppBar extends React.Component{\r\n    render(){\r\n        const {classes} = this.props;\r\n        return(<AppBar color=\"default\" position=\"static\">\r\n                    <Toolbar>\r\n                        <Typography  variant=\"h6\" noWrap>\r\n                            {this.props.name}\r\n                    </Typography>\r\n                </Toolbar>\r\n            </AppBar>);\r\n    }\r\n}\r\n\r\nconst styles = {\r\n\r\n\r\n};\r\nexport default withStyles(styles)(RoomAppBar);","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\Messages.js",["135","136","137","138","139"],"import * as React from \"react\";\r\nimport {\r\n\r\n    Avatar, IconButton, LinearProgress, List,\r\n    ListItem,\r\n    ListItemAvatar, ListItemIcon,\r\n    ListItemText, Menu, MenuItem, Typography,\r\n\r\n    withStyles\r\n} from \"@material-ui/core\";\r\nimport {Delete, Reply} from \"@material-ui/icons\";\r\nimport TokenContext from \"./AppContext\";\r\nimport InputReplyMessage from \"./InputReplyMessage\";\r\n\r\n\r\nclass Messages extends React.Component{\r\n    static contextType = TokenContext;\r\n    constructor(props) {\r\n        super(props);\r\n        this.state =\r\n            {mouseX: null,\r\n            mouseY: null,\r\n            menuMessageId:null,\r\n            };\r\n        this.handleCloseMenu = this.handleCloseMenu.bind(this);\r\n        this.getMessageById = this.getMessageById.bind(this);\r\n        this.handleDeleteMsg = this.handleDeleteMsg.bind(this);\r\n        this.handleReply = this.handleReply.bind(this);\r\n        this.handleContextClick = this.handleContextClick.bind(this);\r\n        this.handleScroll = this.handleScroll.bind(this);\r\n    }\r\n\r\n    handleContextClick(event,message_id){\r\n        event.preventDefault();\r\n        this.setState({\r\n            mouseX: event.clientX - 2,\r\n            mouseY: event.clientY - 4,\r\n            menuMessageId:message_id\r\n        });\r\n    }\r\n    componentDidUpdate(prevProps){\r\n        if(this.props.messages !== prevProps.messages) {\r\n            this.scrollToBottom();\r\n        }\r\n    }\r\n    scrollToBottom(){\r\n        this.messagesEnd.scrollIntoView();\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.scrollToBottom();\r\n    }\r\n\r\n\r\n    handleCloseMenu(event){\r\n        event.preventDefault();\r\n        this.setState({\r\n            mouseX: null,\r\n            mouseY: null\r\n        });\r\n    }\r\n\r\n    getMessageById(id){\r\n        if(this.props.messages === undefined)return null;\r\n        for(let i=0;i<this.props.messages.length;i++){\r\n            if(this.props.messages[i].id === id)return this.props.messages[i];\r\n        }\r\n        return null;\r\n\r\n    }\r\n\r\n    handleReply(event){\r\n        this.props.onReplyChoose(this.state.menuMessageId);\r\n        this.handleCloseMenu(event);\r\n    }\r\n\r\n    handleDeleteMsg(event){\r\n        this.props.onRemoveMessage(this.state.menuMessageId);\r\n        this.handleCloseMenu(event);\r\n    }\r\n    handleScroll(event){\r\n        if(event.target.scrollTop < 400 && this.props.messages.length % 60 === 0){\r\n            this.props.loadMoreMessages();\r\n        }\r\n\r\n    }\r\n\r\n    render(){\r\n        const {classes} = this.props;\r\n        return(<List onScroll={this.handleScroll} className={classes.messagesWrap}>\r\n\r\n            {this.props.messages.map((item)=>(\r\n            <ListItem button key={item.id}\r\n                      className={(item.id > this.props.lastRead ? classes.unreadMessage : \"\")+\" \"+\r\n                      (item.id == this.props.replyTo ? classes.replyTo : \"\")}\r\n                      onContextMenu={(event) => this.handleContextClick(event,item.id)}>\r\n                <ListItemAvatar>\r\n                    <Avatar alt={item.login} src={\"https://rp-ruler.ru/upload/\"+item.avatar}/>\r\n                </ListItemAvatar>\r\n                <ListItemText\r\n                    secondary={<div>{item.text}\r\n                    {item.reply_message != null ? <InputReplyMessage replyLogin={item.reply_message.login}\r\n                                                                replyText={item.reply_message.text}/> : null}</div>}>\r\n                    <span className={classes.login}>{item.login}</span> <l className={classes.messageTime}>{item.datetime}</l>\r\n\r\n                </ListItemText>\r\n            </ListItem>\r\n            ))}\r\n            <Menu\r\n                keepMounted\r\n                onContextMenu={this.handleCloseMenu}\r\n                open={this.state.mouseY !== null}\r\n                onClose={this.handleCloseMenu}\r\n                anchorReference=\"anchorPosition\"\r\n                anchorPosition={\r\n                    this.state.mouseY !== null && this.state.mouseX !== null\r\n                        ? { top: this.state.mouseY, left: this.state.mouseX }\r\n                        : undefined\r\n                }\r\n            >\r\n                {this.getMessageById(this.state.menuMessageId) != null &&\r\n                this.getMessageById(this.state.menuMessageId).sender_id == this.context.user_id ?\r\n                    <MenuItem onClick={this.handleDeleteMsg}>\r\n                    <ListItemIcon>\r\n                        <Delete fontSize=\"small\" />\r\n                    </ListItemIcon>\r\n                    Удалить\r\n                </MenuItem> : \"\"}\r\n\r\n                <MenuItem onClick={this.handleReply}>\r\n                    <ListItemIcon>\r\n                        <Reply fontSize=\"small\" />\r\n                    </ListItemIcon>\r\n                    Ответить\r\n                </MenuItem>\r\n            </Menu>\r\n            <div style={{ float:\"left\", clear: \"both\" }}\r\n                 ref={(el) => { this.messagesEnd = el; }}>\r\n            </div>\r\n        </List>);\r\n    }\r\n}\r\n\r\n\r\nconst styles = {\r\n    messagesWrap:{\r\n        height:\"calc(100vh - 147px)\",\r\n        \"overflow\":\"auto\"\r\n    },\r\n    messageTime:{\r\n        \"font-size\":\"13px\",\r\n        opacity:\"0.6\"\r\n    },\r\n    unreadMessage:{\r\n        \"background-color\":\"rgba(255, 255, 255, 0.04)\"\r\n    },\r\n    replyTo:{\r\n        \"border-left\":\"2px solid #ff5722\",\r\n        \"background-color\":\"#ff572209\"\r\n    },\r\n    login:{\r\n        color:\"#ff5722\",\r\n        \"font-weight\":\"400\"\r\n    }}\r\n\r\n;\r\nexport default withStyles(styles)(Messages);","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\InputReplyMessage.js",["140"],"import * as React from \"react\";\r\nimport {Paper, withStyles} from \"@material-ui/core\";\r\nimport {Close} from \"@material-ui/icons\";\r\n\r\nclass InputReplyMessage extends React.Component{\r\n    render(){\r\n        const {classes} = this.props;\r\n        if(this.props.replyLogin === null)return(<div/>);\r\n        return( <div className={this.props.onCancel != null ? classes.messageReplyWrap : null }>\r\n                                <div className={classes.messageReply}>\r\n                                    <h5 className={classes.login}>{this.props.replyLogin}</h5>\r\n                                    <span className={classes.text}>{this.props.replyText}</span>\r\n                                    {this.props.onCancel != null ? <Close onClick={this.props.onCancel} className={classes.close}/> : null }\r\n                                </div>\r\n        </div>);\r\n    }\r\n}\r\n\r\nconst styles = {\r\n    messageReplyWrap:{\r\n        padding:\"10px 20px\"\r\n    },\r\n    messageReply:{\r\n        \"border-left\":\"2px solid #ff5722\",\r\n        \"padding-left\":\"10px\"\r\n    },\r\n    login:{\r\n        margin:\"0\",\r\n        \"font-size\":\"1.15em\",\r\n        \"font-weight\":400,\r\n        color:\"#ff5722\"\r\n    },\r\n    text:{\r\n        opacity:0.7\r\n    },\r\n    close:{\r\n        position:\"absolute\",\r\n        cursor:\"pointer\",\r\n        right:\"10px\",\r\n        top:\"10px\"\r\n    },\r\n\r\n\r\n};\r\nexport default withStyles(styles)(InputReplyMessage);","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\ProfileDialog.js",["141"],"import * as React from \"react\";\r\nimport {\r\n    Accordion, AccordionDetails, AccordionSummary,\r\n    AppBar, Avatar,\r\n    Button,\r\n    Dialog, Divider, FormControlLabel,\r\n    IconButton,\r\n    List,\r\n    ListItem, ListItemAvatar,\r\n    ListItemText, Slide, Snackbar, Switch,\r\n    Toolbar,\r\n    Typography,\r\n    withStyles\r\n} from \"@material-ui/core\";\r\nimport {Close, ExpandMore} from \"@material-ui/icons\";\r\nimport TokenContext from \"./AppContext\";\r\nimport FormDialog from \"./FormDialog\";\r\nimport {Alert} from \"@material-ui/lab\";\r\n\r\n\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n    return <Slide direction=\"right\" ref={ref} {...props} />;\r\n});\r\n\r\nclass ProfileDialog extends React.Component {\r\n    static contextType = TokenContext;\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleClose = this.handleClose.bind(this);\r\n        this.handleDarkThemeChange = this.handleDarkThemeChange.bind(this);\r\n        this.state = {expanded:false,\r\n            login:null,\r\n            email:null,\r\n            status:null,\r\n            avatar:null,\r\n            loginFormOpen:false,\r\n            statusFormOpen:false,\r\n            passFormOpen:false,\r\n            snackBarText:null,\r\n            snackBarOpen:false,\r\n            snackBarStatus:\"success\"\r\n        };\r\n        this.handleAccordionChange = this.handleAccordionChange.bind(this);\r\n        this.handleSaveLogin = this.handleSaveLogin.bind(this);\r\n        this.handleSnackBarClose = this.handleSnackBarClose.bind(this);\r\n        this.handleSaveStatus = this.handleSaveStatus.bind(this);\r\n        this.handleSavePassword = this.handleSavePassword.bind(this);\r\n        this.handleFileUploaded = this.handleFileUploaded.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/x-www-form-urlencoded',\r\n            },\r\n            body: \"token=\"+this.context.token+\"&server_id=\"+this.state.serverId\r\n        };\r\n        fetch(\"https://rp-ruler.ru/api/get_profile.php\",requestOptions).then(response => response.json())\r\n            .then((data)=>{\r\n                if(data.error === undefined){\r\n                    this.setState({...data.user})\r\n                }\r\n            });\r\n    }\r\n\r\n    handleClose(){\r\n        this.props.onClose();\r\n    }\r\n    handleDarkThemeChange(){\r\n        this.context.toggleTheme();\r\n    }\r\n\r\n    handleSnackBarClose(){\r\n        this.setState({snackBarOpen:false});\r\n    }\r\n\r\n    handleSaveLogin(data){\r\n        if(data==null)return;\r\n        let newLogin = data.login;\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/x-www-form-urlencoded',\r\n            },\r\n            body: \"token=\"+this.context.token+\"&login=\"+newLogin\r\n        };\r\n        fetch(\"https://rp-ruler.ru/api/save_profile.php\",requestOptions).then(response => response.json())\r\n            .then((data)=>{\r\n                if(data.error === undefined){\r\n                    this.setState({snackBarOpen:true,\r\n                        snackBarText:\"Логин успешно изменен.\",\r\n                        login:newLogin,\r\n                        snackBarStatus:\"success\"\r\n                    });\r\n                }else{\r\n                    this.setState({snackBarOpen:true,\r\n                        snackBarText:data.error,\r\n                        snackBarStatus:\"error\"\r\n                    });\r\n                }\r\n            });\r\n        this.setState({loginFormOpen:false});\r\n    }\r\n\r\n\r\n\r\n    handleSaveStatus(data){\r\n        if(data==null)return;\r\n        let newStatus = data.status;\r\n        this.setState({statusFormOpen:false});\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/x-www-form-urlencoded',\r\n            },\r\n            body: \"token=\"+this.context.token+\"&status=\"+newStatus\r\n        };\r\n        fetch(\"https://rp-ruler.ru/api/save_profile.php\",requestOptions).then(response => response.json())\r\n            .then((data)=>{\r\n                if(data.error === undefined){\r\n                    this.setState({snackBarOpen:true,\r\n                        snackBarText:\"Статус успешно изменен.\",\r\n                        status:newStatus,\r\n                        snackBarStatus:\"success\"\r\n                    });\r\n                }else{\r\n                    this.setState({snackBarOpen:true,\r\n                        snackBarText:data.error,\r\n                        snackBarStatus:\"error\"\r\n                    });\r\n                }\r\n            });\r\n    }\r\n\r\n    handleSavePassword(data){\r\n        if(data == null)return;\r\n        this.setState({passFormOpen:false});\r\n        let prevPass = data.prev_password;\r\n        let newPass = data.new_password;\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/x-www-form-urlencoded',\r\n            },\r\n            body: \"token=\"+this.context.token+\"&prev_pass=\"+prevPass+\"&new_pass=\"+newPass\r\n        };\r\n        fetch(\"https://rp-ruler.ru/api/save_profile.php\",requestOptions).then(response => response.json())\r\n            .then((data)=>{\r\n                if(data.error === undefined){\r\n                    this.setState({snackBarOpen:true,\r\n                        snackBarText:\"Пароль успешно изменен.\",\r\n                        snackBarStatus:\"success\"\r\n                    });\r\n                }else{\r\n                    this.setState({snackBarOpen:true,\r\n                        snackBarText:data.error,\r\n                        snackBarStatus:\"error\"\r\n                    });\r\n                }\r\n            });\r\n    }\r\n\r\n    handleAccordionChange = (panel) => (event, isExpanded) => {\r\n        this.setState({expanded:isExpanded ? panel : false});\r\n    };\r\n    handleFileUploaded(event){\r\n        if(event.target.files != null && event.target.files.length != 0){\r\n            let file = event.target.files[0];\r\n            const formData = new FormData();\r\n            formData.append('avatar', file);\r\n            formData.append(\"token\",this.context.token);\r\n            const requestOptions = {\r\n                method: 'POST',\r\n                body: formData\r\n            };\r\n            fetch(\"https://rp-ruler.ru/api/upload_avatar.php\",requestOptions).then(response => response.json())\r\n                .then((data)=>{\r\n                    this.setState({avatar:data.avatar});\r\n                });\r\n\r\n        }\r\n\r\n    }\r\n\r\n    render(){\r\n        const {classes} = this.props;\r\n        return(<Dialog fullScreen open={this.props.open} onClose={this.handleClose} TransitionComponent={Transition}>\r\n            <AppBar className={classes.appBar}>\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" onClick={this.handleClose} aria-label=\"close\">\r\n                        <Close />\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" className={classes.title}>\r\n                        Настройки\r\n                    </Typography>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <br/><br/><br/><br/>\r\n            <Accordion expanded={this.state.expanded === 'general'} onChange={this.handleAccordionChange(\"general\")}>\r\n                <AccordionSummary\r\n                    expandIcon={<ExpandMore />}\r\n                    aria-controls=\"generalbh-content\"\r\n                    id=\"generalbh-header\"\r\n                >\r\n                    <Typography>Основные настройки</Typography>\r\n                </AccordionSummary>\r\n                <AccordionDetails>\r\n                    <List className={classes.list}>\r\n                        <ListItem button>\r\n                            <FormControlLabel\r\n                                control={<Switch checked={this.context.isDarkTheme} onChange={this.handleDarkThemeChange} />}\r\n                                label=\"Темная тема\"\r\n                            />\r\n                        </ListItem>\r\n                        <Divider />\r\n                        <ListItem button>\r\n                            <FormControlLabel\r\n                                control={<Switch checked={this.context.isAnimationEnable} onChange={this.context.toggleAnimation} />}\r\n                                label=\"Анимация фона\"\r\n                            />\r\n                        </ListItem>\r\n                        <Divider />\r\n                    </List>\r\n                </AccordionDetails>\r\n            </Accordion>\r\n            <Accordion expanded={this.state.expanded === 'user'} onChange={this.handleAccordionChange(\"user\")}>\r\n                <AccordionSummary\r\n                    expandIcon={<ExpandMore />}\r\n                    aria-controls=\"userbh-content\"\r\n                    id=\"userbh-header\"\r\n                >\r\n                    <Typography>Пользователь</Typography>\r\n                </AccordionSummary>\r\n                <AccordionDetails>\r\n                    <List className={classes.list}>\r\n                        <ListItem button>\r\n                            <ListItemAvatar>\r\n                                <Avatar alt={this.state.login} src={\"https://rp-ruler.ru/upload/\"+this.state.avatar}/>\r\n                            </ListItemAvatar>\r\n                            <input onChange={this.handleFileUploaded} name=\"avatar\" accept=\"image/*\" className={classes.inputFile} id=\"button-file\" type=\"file\"/>\r\n                            <label htmlFor=\"button-file\">\r\n                                <Button variant=\"contained\" color=\"primary\" component=\"span\">\r\n                                    Загрузить аватар.\r\n                                </Button>\r\n                            </label>\r\n                        </ListItem>\r\n                        <ListItem button>\r\n                            <ListItemText primary=\"Логин\" secondary={this.state.login} />\r\n                            <Button onClick={() => this.setState({loginFormOpen:true})} variant=\"contained\" color=\"primary\" component=\"span\">\r\n                                Изменить\r\n                            </Button>\r\n                        </ListItem>\r\n                        <Divider />\r\n                        <ListItem button>\r\n                            <ListItemText primary=\"Почта\" secondary={this.state.email} />\r\n                        </ListItem>\r\n                        <Divider />\r\n                        <ListItem button>\r\n                            <ListItemText primary=\"Статус\" secondary={this.state.status} />\r\n                            <Button variant=\"contained\" onClick={() => this.setState({statusFormOpen:true})} color=\"primary\" component=\"span\">\r\n                                Изменить\r\n                            </Button>\r\n                        </ListItem>\r\n                        <Divider />\r\n                        <ListItem button>\r\n                            <ListItemText primary=\"Пароль\" />\r\n                            <Button variant=\"contained\" color=\"primary\" onClick={() => this.setState({passFormOpen:true})} component=\"span\">\r\n                                Изменить\r\n                            </Button>\r\n                        </ListItem>\r\n\r\n                        <ListItem>\r\n                            <Button variant=\"contained\" color=\"primary\" onClick={this.context.logout} component=\"span\">\r\n                                Выйти\r\n                            </Button>\r\n                        </ListItem>\r\n                    </List>\r\n                </AccordionDetails>\r\n            </Accordion>\r\n            <FormDialog open={this.state.loginFormOpen} onSave={this.handleSaveLogin} types={[\"text\"]} names={[\"login\"]}\r\n                        onClose={() => this.setState({loginFormOpen:false})} text=\"Введите логин\" labels={[\"Логин\"]}/>\r\n            <FormDialog open={this.state.statusFormOpen} onSave={this.handleSaveStatus} types={[\"text\"]} names={[\"status\"]}\r\n                        onClose={() => this.setState({statusFormOpen:false})} text=\"Введите статус\" labels={[\"Статус\"]}/>\r\n            <FormDialog open={this.state.passFormOpen} onSave={this.handleSavePassword} types={[\"password\",\"password\"]}\r\n                        names={[\"prev_password\",\"new_password\"]}\r\n                        onClose={() => this.setState({passFormOpen:false})} text=\"Введите текущий и новый пароли\"\r\n                        labels={[\"Текущий пароль\",\"Новый пароль\"]}/>\r\n            <Snackbar open={this.state.snackBarOpen} autoHideDuration={3000} onClose={this.handleSnackBarClose}>\r\n                <Alert severity={this.state.snackBarStatus} variant=\"filled\" elevation={6}>\r\n                    {this.state.snackBarText}\r\n                </Alert>\r\n            </Snackbar>\r\n        </Dialog>)\r\n    }\r\n\r\n}\r\nconst styles = {\r\n    appBar:{\r\n        appBar: {\r\n            position: 'relative',\r\n        },\r\n        title: {\r\n            marginLeft: \"20px\",\r\n            flex: 1,\r\n        },\r\n\r\n    },\r\n    inputFile:{\r\n        display: 'none',\r\n    },\r\n    list:{\r\n        width:\"100% !important\"\r\n    }\r\n\r\n\r\n};\r\nexport default withStyles(styles)(ProfileDialog);","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\UsersList.js",["142"],"C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\FormDialog.js",["143"],"import * as React from \"react\";\r\nimport TokenContext from \"./AppContext\";\r\nimport {\r\n    Button,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogTitle,\r\n    List,\r\n    TextField,\r\n    withStyles\r\n} from \"@material-ui/core\";\r\n\r\nclass FormDialog extends React.Component {\r\n    static contextType = TokenContext;\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n    handleChange(event,key){\r\n        this.setState({[key]:event.target.value});\r\n    }\r\n    render() {\r\n\r\n        return (<Dialog maxWidth=\"sm\" fullWidth open={this.props.open} onClose={this.props.onClose} aria-labelledby=\"form-dialog-title\">\r\n            <DialogTitle id=\"form-dialog-title\">{this.props.text}</DialogTitle>\r\n\r\n            <DialogContent>\r\n                {this.props.names.map((item,i)=>(\r\n                    <TextField\r\n                        autoFocus\r\n                        margin=\"dense\"\r\n                        id=\"name\"\r\n                        onChange={(event) => this.handleChange(event,item)}\r\n                        label={this.props.labels[i]}\r\n                        type={this.props.types[i]}\r\n                        fullWidth\r\n                    />\r\n                ))}\r\n\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={() => this.props.onSave(this.state)} color=\"primary\">\r\n                    Сохранить\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>);\r\n    }\r\n\r\n}\r\nconst styles = {\r\n\r\n};\r\nexport default withStyles(styles)(FormDialog);","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\ServersDialog.js",["144","145","146","147","148"],"import * as React from \"react\";\r\nimport {\r\n    AppBar,\r\n    Dialog, Grid,\r\n    IconButton,\r\n    InputBase, OutlinedInput,\r\n    Slide,\r\n    TextField,\r\n    Toolbar,\r\n    Typography,\r\n    withStyles\r\n} from \"@material-ui/core\";\r\nimport {Close, Search} from \"@material-ui/icons\";\r\nimport clsx from \"clsx\";\r\nimport ServerCard from \"./ServerCard\";\r\nimport TokenContext from \"./AppContext\";\r\n\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n    return <Slide direction=\"right\" ref={ref} {...props} />;\r\n});\r\n\r\nclass ServersDialog extends React.Component {\r\n    static contextType = TokenContext;\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleClose = this.handleClose.bind(this);\r\n        this.handleConnect = this.handleConnect.bind(this);\r\n        this.state = {\r\n            servers:[]\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch(\"https://rp-ruler.ru/api/get_servers.php\").then(response => response.json())\r\n            .then((data)=>{\r\n                if(data.error === undefined){\r\n                    this.setState({...data})\r\n                }\r\n            });\r\n    }\r\n\r\n    handleClose(){\r\n        this.props.onClose();\r\n    }\r\n\r\n    handleConnect(id){\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/x-www-form-urlencoded',\r\n            },\r\n            body: \"token=\"+this.context.token+\"&server_id=\"+id\r\n        };\r\n        fetch(\"https://rp-ruler.ru/api/connect_to_server.php\",requestOptions).then(response => response.json())\r\n            .then((data)=>{\r\n                if(data.error === undefined){\r\n                    this.handleClose();\r\n                    this.props.onServerConnect();\r\n                }\r\n            });\r\n    }\r\n\r\n    render() {\r\n        const {classes} = this.props;\r\n        return (\r\n            <Dialog fullScreen open={this.props.open} onClose={this.handleClose} TransitionComponent={Transition}>\r\n                <AppBar>\r\n                    <Toolbar>\r\n                        <IconButton edge=\"start\" color=\"inherit\" onClick={this.handleClose} aria-label=\"close\">\r\n                            <Close />\r\n                        </IconButton>\r\n                        <Typography variant=\"h6\" >\r\n                            Доступные сервера\r\n                        </Typography>\r\n                    </Toolbar>\r\n                </AppBar>\r\n                <br/><br/><br/>\r\n                <div style={{ padding: 20 }}>\r\n                <Grid container direction=\"row\" spacing={2} justify=\"center\">\r\n                    {this.state.servers.map((item)=>(\r\n                    <Grid item xs key={item.id} className={classes.serverCard}>\r\n                        <ServerCard\r\n                            name={item.name}\r\n                            avatar={item.avatar}\r\n                            description={item.description}\r\n                            players={item.count}\r\n                            className={classes.serverCard}\r\n                            onConnect={() => this.handleConnect(item.id)}\r\n                        />\r\n                    </Grid>\r\n                    ))}\r\n\r\n                </Grid>\r\n                </div>\r\n            </Dialog>\r\n        );\r\n    }\r\n}\r\nconst styles = {\r\n    serverCard:{\r\n        \"width\":\"400px\"\r\n    }\r\n};\r\nexport default withStyles(styles)(ServersDialog);","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\ServerCard.js",[],"C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\UserPopover.js",[],"C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\Emoji.js",["149"],"import * as React from \"react\";\r\nimport {Button, Fade, Popover, withStyles} from \"@material-ui/core\";\r\nimport {Picker} from \"emoji-mart\";\r\nimport {Mood} from \"@material-ui/icons\";\r\n\r\nclass Emoji extends React.Component {\r\n\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            open:false,\r\n            anchorEl:null,\r\n        }\r\n        this.handleButtonClick = this.handleButtonClick.bind(this);\r\n        this.handleClose = this.handleClose.bind(this);\r\n    }\r\n\r\n    handleButtonClick(event){\r\n        this.setState({\r\n            anchorEl:event.currentTarget,\r\n            open:true\r\n        });\r\n    }\r\n    handleClose(){\r\n        this.setState({open:false});\r\n    }\r\n\r\n\r\n    render() {\r\n        const {classes} = this.props;\r\n        return (<div><Button onClick={this.handleButtonClick} className={classes.emojiButton}><Mood/></Button>\r\n            <Popover\r\n            open={this.state.open}\r\n            anchorEl={this.state.anchorEl}\r\n            onClose={this.handleClose}\r\n            anchorOrigin={{\r\n                vertical: 'top',\r\n                horizontal: 'right',\r\n            }}\r\n            transformOrigin={{\r\n                vertical: 'bottom',\r\n                horizontal: 'right',\r\n            }}\r\n        >\r\n            <Picker\r\n                native={true}\r\n\r\n                theme={this.props.isDarkTheme ? \"dark\" : \"light\"}\r\n                color=\"#ff5722\"\r\n                defaultSkin={6}\r\n                title=\"\"\r\n                onSelect={this.props.onSelect}\r\n                emoji='point_up'\r\n                showPreview={false}\r\n                i18n={{search: 'Поиск',\r\n                    clear: 'Очистить',\r\n                    notfound: 'Не найдено',\r\n                    skintext: 'Нигер?',\r\n                    categories: {\r\n                        search: 'Результаты',\r\n                        recent: 'Любимые смайлики',\r\n                        smileys: 'Эмоции',\r\n                        people: 'Люди',\r\n                        nature: 'Не люди',\r\n                        foods: 'Хавчик',\r\n                        activity: 'Спорт',\r\n                        places: 'Путешествия',\r\n                        objects: 'Предметы',\r\n                        symbols: 'Символы',\r\n                        flags: 'Флаги',\r\n                        custom: 'Кастом',\r\n                    },\r\n                    categorieslabel: 'Категории', // Accessible title for the list of categories\r\n                    skintones: {\r\n                        1: 'Китаец',\r\n                        2: 'Ариец',\r\n                        3: 'Не совсем ариец',\r\n                        4: 'Полу нигер',\r\n                        5: 'Нигер',\r\n                        6: 'Самый нигерный нигер',\r\n                    }}}\r\n            />\r\n\r\n        </Popover></div>);\r\n    }\r\n}\r\nconst styles = {\r\n    emojiButton:{\r\n        position:\"absolute\",\r\n        bottom:\"10px\",\r\n        right:\"5px\",\r\n        opacity:0.7\r\n    },\r\n};\r\nexport default withStyles(styles)(Emoji);","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\Restore.js",["150","151","152","153","154"],"import * as React from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n    Box, Button,\r\n    Container,\r\n    CssBaseline,\r\n    Grid,\r\n    Link, Paper,\r\n    TextField,\r\n    Typography, withStyles\r\n} from \"@material-ui/core\";\r\nimport { Link as RouterLink } from 'react-router-dom';\r\nimport {Copyright} from \"./Copyright\";\r\nimport {withRouter} from \"react-router-dom\";\r\n\r\n\r\n\r\nclass Restore extends React.Component{\r\n\r\n    routingFunction = () => {\r\n        this.props.history.push(\"/login\");\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            login:\"\",\r\n            wrongLogin:false,\r\n            wrongCode:false,\r\n            codeSend:false,\r\n            code:\"\",\r\n            codeConfirm:false,\r\n            password:\"\",\r\n            passwordRepeat:\"\",\r\n            wrongPass:false\r\n        };\r\n        this.handleInputChange = this.handleInputChange.bind(this);\r\n        this.handleSubmitLogin = this.handleSubmitLogin.bind(this);\r\n        this.handleSubmitCode = this.handleSubmitCode.bind(this);\r\n        this.handleSubmitPass = this.handleSubmitPass.bind(this);\r\n    }\r\n\r\n    handleInputChange(event) {\r\n        const target = event.target;\r\n        const value = target.value;\r\n        const name = target.name;\r\n\r\n        this.setState({\r\n            [name]: value,\r\n            wrongLogin:false\r\n        });\r\n    }\r\n\r\n    handleSubmitLogin(e){\r\n        e.preventDefault();\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/x-www-form-urlencoded',\r\n            },\r\n            body: \"login=\"+this.state.login\r\n        };\r\n        fetch(\"https://rp-ruler.ru/api/restore_send.php\",requestOptions)\r\n            .then(response => response.json())\r\n            .then((data)=>{\r\n                if(data[\"success\"] == 1){\r\n                    this.setState({codeSend:true,wrongLogin:false});\r\n                }else{\r\n                    this.setState({wrongLogin:true});\r\n                }\r\n            })\r\n    }\r\n    handleSubmitCode(e){\r\n        e.preventDefault();\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/x-www-form-urlencoded',\r\n            },\r\n            body: \"login=\"+this.state.login+\"&code=\"+this.state.code\r\n        };\r\n        fetch(\"https://rp-ruler.ru/api/restore_code_check.php\",requestOptions)\r\n            .then(response => response.json())\r\n            .then((data)=>{\r\n                if(data[\"correct\"] == 1){\r\n                    this.setState({codeConfirm:true,wrongCode:false});\r\n                }else{\r\n                    this.setState({wrongCode:true});\r\n                }\r\n            })\r\n    }\r\n    handleSubmitPass(e){\r\n        e.preventDefault();\r\n        if(this.state.password != this.state.passwordRepeat){\r\n            this.setState({wrongPass:true});\r\n            return;\r\n        }\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/x-www-form-urlencoded',\r\n            },\r\n            body: \"login=\"+this.state.login+\"&code=\"+this.state.code+\"&pass=\"+this.state.password\r\n        };\r\n        fetch(\"https://rp-ruler.ru/api/restore.php\",requestOptions)\r\n            .then(response => response.json())\r\n            .then((data)=>{\r\n                if(data[\"success\"] == 1){\r\n                    this.setState({wrongPass:false});\r\n                    this.routingFunction();\r\n                }\r\n            })\r\n    }\r\n\r\n    render() {\r\n        const {classes} = this.props;\r\n        if(!this.state.codeSend){\r\n            return(<Grid container justify=\"center\">\r\n                <CssBaseline />\r\n                <Paper elevation={6} className={classes.paper} item>\r\n                    <Typography component=\"h1\" variant=\"h5\">\r\n                        Восстановление пароля. Снова...\r\n                    </Typography>\r\n                    <form className={classes.form} noValidate\r\n                          onSubmit={this.handleSubmitLogin} >\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            margin=\"normal\"\r\n                            error={this.state.wrongLogin}\r\n                            required\r\n                            fullWidth\r\n                            id=\"login\"\r\n                            label=\"Логин или E-mail\"\r\n                            name=\"login\"\r\n                            helperText={this.state.wrongLogin ? \"Пользователь не найден\" : \"\"}\r\n                            autoComplete=\"login\"\r\n                            onChange = {this.handleInputChange}\r\n                            value={this.state.login}\r\n                            autoFocus\r\n                        />\r\n                        <Button\r\n                            type=\"submit\"\r\n                            fullWidth\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            className={classes.submit}\r\n                        >\r\n                            Отправить письмо\r\n                        </Button>\r\n                        <Grid container>\r\n                            <Grid item xs>\r\n                                <Link href=\"#\" variant=\"body2\" to=\"/login\" component={RouterLink}>\r\n                                    Войти\r\n                                </Link>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Link to=\"/registration\" component={RouterLink} variant=\"body2\">\r\n                                    Зарегистрироваться\r\n                                </Link>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </form>\r\n                    <Box mt={8}>\r\n                        <Copyright />\r\n                    </Box>\r\n                </Paper>\r\n\r\n            </Grid>);\r\n\r\n        }else if(!this.state.codeConfirm){\r\n\r\n            return(<Grid container justify=\"center\">\r\n                <CssBaseline />\r\n                <Paper elevation={6} className={classes.paper} item>\r\n                    <Typography component=\"h1\" variant=\"h5\">\r\n                        Восстановление пароля. Снова...\r\n                    </Typography>\r\n                    <form className={classes.form} noValidate\r\n                          onSubmit={this.handleSubmitCode} >\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            margin=\"normal\"\r\n                            error={this.state.wrongCode}\r\n                            required\r\n                            fullWidth\r\n                            id=\"code\"\r\n                            label=\"Код из письма\"\r\n                            name=\"code\"\r\n                            autoComplete=\"false\"\r\n                            helperText={this.state.wrongCode ? \"Неверный код\" : \"\"}\r\n                            onChange = {this.handleInputChange}\r\n                            value={this.state.code}\r\n                            autoFocus\r\n                        />\r\n                        <Button\r\n                            type=\"submit\"\r\n                            fullWidth\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            className={classes.submit}\r\n                        >\r\n                            Отправить\r\n                        </Button>\r\n                        <Grid container>\r\n                            <Grid item xs>\r\n                                <Link href=\"#\" variant=\"body2\" to=\"/login\" component={RouterLink}>\r\n                                    Войти\r\n                                </Link>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Link to=\"/registration\" component={RouterLink} variant=\"body2\">\r\n                                    Зарегистрироваться\r\n                                </Link>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </form>\r\n                    <Box mt={8}>\r\n                        <Copyright />\r\n                    </Box>\r\n                </Paper>\r\n\r\n            </Grid>);\r\n\r\n        }else{\r\n            return(<Grid container justify=\"center\">\r\n                <CssBaseline />\r\n                <Paper elevation={6} className={classes.paper} item>\r\n                    <Typography component=\"h1\" variant=\"h5\">\r\n                        Восстановление пароля. Снова...\r\n                    </Typography>\r\n                    <form className={classes.form} noValidate\r\n                          onSubmit={this.handleSubmitPass} >\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            margin=\"normal\"\r\n                            required\r\n                            fullWidth\r\n                            id=\"password\"\r\n                            label=\"Новый пароль\"\r\n                            name=\"password\"\r\n                            type=\"password\"\r\n                            autoComplete=\"password\"\r\n                            onChange = {this.handleInputChange}\r\n                            value={this.state.password}\r\n                            autoFocus\r\n                        />\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            margin=\"normal\"\r\n                            required\r\n                            fullWidth\r\n                            error={this.state.wrongPass}\r\n                            helperText={this.state.wrongPass ? \"Пароли не совпадают\" : \"\"}\r\n                            id=\"passwordRepeat\"\r\n                            label=\"Еще раз, чтобы не забыл\"\r\n                            name=\"passwordRepeat\"\r\n                            type=\"password\"\r\n                            autoComplete=\"password\"\r\n                            onChange = {this.handleInputChange}\r\n                            value={this.state.passwordRepeat}\r\n                        />\r\n                        <Button\r\n                            type=\"submit\"\r\n                            fullWidth\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            className={classes.submit}\r\n                        >\r\n                            Поменять пароль\r\n                        </Button>\r\n                        <Grid container>\r\n                            <Grid item xs>\r\n                                <Link href=\"#\" variant=\"body2\" to=\"/login\" component={RouterLink}>\r\n                                    Войти\r\n                                </Link>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Link to=\"/registration\" component={RouterLink} variant=\"body2\">\r\n                                    Зарегистрироваться\r\n                                </Link>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </form>\r\n                    <Box mt={8}>\r\n                        <Copyright />\r\n                    </Box>\r\n                </Paper>\r\n\r\n            </Grid>);\r\n        }\r\n\r\n\r\n    }\r\n}\r\n\r\n\r\n\r\nRestore.propTypes = {\r\n    classes: PropTypes.object.isRequired,\r\n};\r\n\r\nconst styles = {\r\n    paper: {\r\n        marginTop: \"160px\",\r\n        padding:\"60px\",\r\n        width:\"500px\",\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: \"10px\",\r\n    },\r\n    submit: {\r\n        margin: \"30px 0 20px\",\r\n    },\r\n};\r\n\r\n\r\nexport default withStyles(styles)(withRouter(Restore));",{"ruleId":"155","replacedBy":"156"},{"ruleId":"157","replacedBy":"158"},{"ruleId":"159","severity":1,"message":"160","line":9,"column":34,"nodeType":"161","messageId":"162","endLine":9,"endColumn":44},{"ruleId":"159","severity":1,"message":"163","line":9,"column":46,"nodeType":"161","messageId":"162","endLine":9,"endColumn":57},{"ruleId":"164","severity":1,"message":"165","line":46,"column":58,"nodeType":"166","messageId":"167","endLine":46,"endColumn":60},{"ruleId":"159","severity":1,"message":"168","line":162,"column":9,"nodeType":"161","messageId":"162","endLine":162,"endColumn":20},{"ruleId":"159","severity":1,"message":"169","line":5,"column":5,"nodeType":"161","messageId":"162","endLine":5,"endColumn":14},{"ruleId":"159","severity":1,"message":"170","line":15,"column":8,"nodeType":"161","messageId":"162","endLine":15,"endColumn":19},{"ruleId":"159","severity":1,"message":"169","line":5,"column":5,"nodeType":"161","messageId":"162","endLine":5,"endColumn":14},{"ruleId":"159","severity":1,"message":"171","line":7,"column":5,"nodeType":"161","messageId":"162","endLine":7,"endColumn":21},{"ruleId":"159","severity":1,"message":"170","line":15,"column":8,"nodeType":"161","messageId":"162","endLine":15,"endColumn":19},{"ruleId":"159","severity":1,"message":"172","line":3,"column":5,"nodeType":"161","messageId":"162","endLine":3,"endColumn":11},{"ruleId":"159","severity":1,"message":"173","line":3,"column":13,"nodeType":"161","messageId":"162","endLine":3,"endColumn":19},{"ruleId":"159","severity":1,"message":"174","line":5,"column":27,"nodeType":"161","messageId":"162","endLine":5,"endColumn":31},{"ruleId":"159","severity":1,"message":"175","line":5,"column":33,"nodeType":"161","messageId":"162","endLine":5,"endColumn":41},{"ruleId":"159","severity":1,"message":"176","line":5,"column":43,"nodeType":"161","messageId":"162","endLine":5,"endColumn":57},{"ruleId":"159","severity":1,"message":"177","line":5,"column":59,"nodeType":"161","messageId":"162","endLine":5,"endColumn":71},{"ruleId":"159","severity":1,"message":"178","line":11,"column":10,"nodeType":"161","messageId":"162","endLine":11,"endColumn":16},{"ruleId":"179","severity":1,"message":"180","line":79,"column":21,"nodeType":"181","endLine":79,"endColumn":31},{"ruleId":"179","severity":1,"message":"180","line":80,"column":21,"nodeType":"181","endLine":80,"endColumn":31},{"ruleId":"179","severity":1,"message":"180","line":166,"column":9,"nodeType":"181","endLine":166,"endColumn":19},{"ruleId":"179","severity":1,"message":"180","line":167,"column":9,"nodeType":"181","endLine":167,"endColumn":19},{"ruleId":"179","severity":1,"message":"180","line":172,"column":9,"nodeType":"181","endLine":172,"endColumn":19},{"ruleId":"179","severity":1,"message":"180","line":178,"column":9,"nodeType":"181","endLine":178,"endColumn":19},{"ruleId":"179","severity":1,"message":"180","line":179,"column":9,"nodeType":"181","endLine":179,"endColumn":19},{"ruleId":"164","severity":1,"message":"182","line":290,"column":31,"nodeType":"166","messageId":"167","endLine":290,"endColumn":33},{"ruleId":"164","severity":1,"message":"182","line":365,"column":29,"nodeType":"166","messageId":"167","endLine":365,"endColumn":31},{"ruleId":"164","severity":1,"message":"165","line":455,"column":97,"nodeType":"166","messageId":"167","endLine":455,"endColumn":99},{"ruleId":"159","severity":1,"message":"183","line":3,"column":9,"nodeType":"161","messageId":"162","endLine":3,"endColumn":22},{"ruleId":"159","severity":1,"message":"184","line":2,"column":33,"nodeType":"161","messageId":"162","endLine":2,"endColumn":38},{"ruleId":"159","severity":1,"message":"185","line":6,"column":16,"nodeType":"161","messageId":"162","endLine":6,"endColumn":23},{"ruleId":"159","severity":1,"message":"186","line":4,"column":13,"nodeType":"161","messageId":"162","endLine":4,"endColumn":23},{"ruleId":"159","severity":1,"message":"187","line":4,"column":25,"nodeType":"161","messageId":"162","endLine":4,"endColumn":39},{"ruleId":"159","severity":1,"message":"188","line":7,"column":35,"nodeType":"161","messageId":"162","endLine":7,"endColumn":45},{"ruleId":"164","severity":1,"message":"165","line":95,"column":32,"nodeType":"166","messageId":"167","endLine":95,"endColumn":34},{"ruleId":"164","severity":1,"message":"165","line":122,"column":73,"nodeType":"166","messageId":"167","endLine":122,"endColumn":75},{"ruleId":"159","severity":1,"message":"184","line":2,"column":9,"nodeType":"161","messageId":"162","endLine":2,"endColumn":14},{"ruleId":"164","severity":1,"message":"182","line":169,"column":68,"nodeType":"166","messageId":"167","endLine":169,"endColumn":70},{"ruleId":"164","severity":1,"message":"182","line":99,"column":86,"nodeType":"166","messageId":"167","endLine":99,"endColumn":88},{"ruleId":"159","severity":1,"message":"174","line":9,"column":5,"nodeType":"161","messageId":"162","endLine":9,"endColumn":9},{"ruleId":"159","severity":1,"message":"189","line":6,"column":5,"nodeType":"161","messageId":"162","endLine":6,"endColumn":14},{"ruleId":"159","severity":1,"message":"190","line":6,"column":16,"nodeType":"161","messageId":"162","endLine":6,"endColumn":29},{"ruleId":"159","severity":1,"message":"191","line":8,"column":5,"nodeType":"161","messageId":"162","endLine":8,"endColumn":14},{"ruleId":"159","severity":1,"message":"192","line":13,"column":16,"nodeType":"161","messageId":"162","endLine":13,"endColumn":22},{"ruleId":"159","severity":1,"message":"193","line":14,"column":8,"nodeType":"161","messageId":"162","endLine":14,"endColumn":12},{"ruleId":"159","severity":1,"message":"194","line":2,"column":17,"nodeType":"161","messageId":"162","endLine":2,"endColumn":21},{"ruleId":"159","severity":1,"message":"169","line":5,"column":5,"nodeType":"161","messageId":"162","endLine":5,"endColumn":14},{"ruleId":"164","severity":1,"message":"165","line":67,"column":36,"nodeType":"166","messageId":"167","endLine":67,"endColumn":38},{"ruleId":"164","severity":1,"message":"165","line":86,"column":36,"nodeType":"166","messageId":"167","endLine":86,"endColumn":38},{"ruleId":"164","severity":1,"message":"182","line":95,"column":32,"nodeType":"166","messageId":"167","endLine":95,"endColumn":34},{"ruleId":"164","severity":1,"message":"165","line":109,"column":36,"nodeType":"166","messageId":"167","endLine":109,"endColumn":38},"no-native-reassign",["195"],"no-negated-in-lhs",["196"],"no-unused-vars","'useHistory' is defined but never used.","Identifier","unusedVar","'useLocation' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'contextType' is assigned a value but never used.","'Container' is defined but never used.","'ParticlesBg' is defined but never used.","'FormControlLabel' is defined but never used.","'Avatar' is defined but never used.","'Button' is defined but never used.","'List' is defined but never used.","'ListItem' is defined but never used.","'ListItemAvatar' is defined but never used.","'ListItemText' is defined but never used.","'Picker' is defined but never used.","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","Expected '!==' and instead saw '!='.","'AssignmentInd' is defined but never used.","'Paper' is defined but never used.","'classes' is assigned a value but never used.","'IconButton' is defined but never used.","'LinearProgress' is defined but never used.","'Typography' is defined but never used.","'InputBase' is defined but never used.","'OutlinedInput' is defined but never used.","'TextField' is defined but never used.","'Search' is defined but never used.","'clsx' is defined but never used.","'Fade' is defined but never used.","no-global-assign","no-unsafe-negation"]