[{"C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\index.js":"1","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\App.js":"2","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\reportWebVitals.js":"3","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\Auth.js":"4","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\Copyright.js":"5","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\Reg.js":"6","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\Chat.js":"7","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\MainMenu.js":"8","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\AppContext.js":"9","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\RoomsList.js":"10","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\ServerName.js":"11","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\RoomAppBar.js":"12","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\Messages.js":"13","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\InputReplyMessage.js":"14","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\ProfileDialog.js":"15","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\UsersList.js":"16","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\FormDialog.js":"17","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\ServersDialog.js":"18","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\ServerCard.js":"19","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\UserPopover.js":"20","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\Emoji.js":"21","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\Restore.js":"22","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\AddServerDialog.js":"23","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\DialogTitleWithClose.js":"24","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\AddRoomDialog.js":"25","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\StyledBadge.js":"26"},{"size":503,"mtime":1616679610000,"results":"27","hashOfConfig":"28"},{"size":6367,"mtime":1616679610000,"results":"29","hashOfConfig":"28"},{"size":362,"mtime":1616679610000,"results":"30","hashOfConfig":"28"},{"size":5064,"mtime":1616679610000,"results":"31","hashOfConfig":"28"},{"size":405,"mtime":1616679610000,"results":"32","hashOfConfig":"28"},{"size":6968,"mtime":1616679610000,"results":"33","hashOfConfig":"28"},{"size":21800,"mtime":1616679610000,"results":"34","hashOfConfig":"28"},{"size":3252,"mtime":1616679610000,"results":"35","hashOfConfig":"28"},{"size":264,"mtime":1616679610000,"results":"36","hashOfConfig":"28"},{"size":6518,"mtime":1616679610000,"results":"37","hashOfConfig":"28"},{"size":6649,"mtime":1617146090591,"results":"38","hashOfConfig":"28"},{"size":2866,"mtime":1616679610000,"results":"39","hashOfConfig":"28"},{"size":6874,"mtime":1616679610000,"results":"40","hashOfConfig":"28"},{"size":1358,"mtime":1616679610000,"results":"41","hashOfConfig":"28"},{"size":14655,"mtime":1616679610000,"results":"42","hashOfConfig":"28"},{"size":2687,"mtime":1616679610000,"results":"43","hashOfConfig":"28"},{"size":1754,"mtime":1616679610000,"results":"44","hashOfConfig":"28"},{"size":7627,"mtime":1616679610000,"results":"45","hashOfConfig":"28"},{"size":2765,"mtime":1616679610000,"results":"46","hashOfConfig":"28"},{"size":1503,"mtime":1616679610000,"results":"47","hashOfConfig":"28"},{"size":3105,"mtime":1616679610000,"results":"48","hashOfConfig":"28"},{"size":11853,"mtime":1616679610000,"results":"49","hashOfConfig":"28"},{"size":22216,"mtime":1617147204149,"results":"50","hashOfConfig":"28"},{"size":1077,"mtime":1617101286000,"results":"51","hashOfConfig":"28"},{"size":6727,"mtime":1616679610000,"results":"52","hashOfConfig":"28"},{"size":826,"mtime":1616679610000,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"kco36v",{"filePath":"57","messages":"58","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"56"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"56"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"56"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"56"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"56"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"56"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"56"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"56"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"56"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"56"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"56"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"56"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"56"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"56"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"56"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"56"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\index.js",[],["123","124"],"C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\App.js",["125","126","127","128","129","130"],"import Cookies from 'universal-cookie';\nimport './App.css';\nimport * as React from \"react\";\nimport Auth from \"./Auth\";\nimport Reg from \"./Reg\";\nimport Chat from \"./Chat\";\nimport {createMuiTheme} from \"@material-ui/core\";\nimport {ThemeProvider} from \"@material-ui/core\";\nimport {Route, Switch, Redirect, useHistory, useLocation} from \"react-router\";\nimport {BrowserRouter as Router} from \"react-router-dom\";\nimport TokenContext from \"./AppContext\";\nimport Restore from \"./Restore\";\nimport ParticlesBg from \"particles-bg\";\nimport {useEffect} from \"react\";\n\n\nexport class App extends React.Component{\n\n    constructor(props) {\n        super(props);\n        let darkTheme = createMuiTheme({\n            palette: {\n                type: 'dark',\n                primary: {\n                    main: \"#ff5722\",\n                },\n                secondary: {\n                    main: \"#ff5722\",\n                },\n            },\n        });\n        let lightTheme = createMuiTheme({\n            palette: {\n                type: 'light',\n                primary: {\n                    main: \"#ff5722\",\n                },\n                secondary: {\n                    main: \"#ff5722\",\n                },\n            },\n        });\n\n\n\n\n\n        const cookies = new Cookies();\n        const token = cookies.get(\"token\");\n        const user_id = cookies.get(\"user_id\");\n        const user_type = cookies.get(\"user_type\");\n        const isDarkTheme = cookies.get(\"is_dark_theme\") == \"1\";\n        this.handleLogin = this.handleLogin.bind(this);\n        this.toggleTheme = this.toggleTheme.bind(this);\n        this.logout = this.logout.bind(this);\n        this.state = {\n            token:token,\n            user_id:user_id,\n            user_type:user_type,\n            isDarkTheme:isDarkTheme,\n            toggleTheme:this.toggleTheme,\n            logout:this.logout,\n            isAnimationEnable:true,\n            toggleAnimation: () => {this.setState(\n                (state)=>{return {isAnimationEnable:!state.isAnimationEnable}\n                })},\n            theme:isDarkTheme ? darkTheme : lightTheme\n        };\n        if(this.state.token != null){\n            const requestOptions = {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/x-www-form-urlencoded',\n                },\n                body: \"token=\"+this.state.token\n            };\n            fetch(\"https://rp-ruler.ru/api/check_token.php\",requestOptions)\n                .then(response => response.json())\n                .then((data)=>{\n                    if(data[\"correct\"] == 0){\n                        this.logout();\n                    }\n                })\n        }\n\n\n\n    }\n\n    logout(){\n        const cookies = new Cookies();\n        cookies.set(\"token\",null);\n        cookies.set(\"user_id\",null);\n        cookies.set(\"user_type\",null);\n        this.setState({token:null,user_id:null,user_type:null});\n    }\n\n    handleLogin(token,id,user_type){\n        const cookies = new Cookies();\n        cookies.set(\"token\",token);\n        cookies.set(\"user_id\",id);\n        cookies.set(\"user_type\",user_type);\n        this.setState({token:token,user_id:id,user_type:user_type});\n    }\n\n\n\n    toggleTheme () {\n        let darkTheme = createMuiTheme({\n            palette: {\n                type: 'dark',\n                primary: {\n                    main: \"#ff5722\",\n                },\n                secondary: {\n                    main: \"#ff5722\",\n                },\n            },\n        });\n        let lightTheme = createMuiTheme({\n            palette: {\n                type: 'light',\n                primary: {\n                    main: \"#ff5722\",\n                },\n                secondary: {\n                    main: \"#ff5722\",\n                },\n            },\n        });\n        this.setState(state => ({\n            theme:state.isDarkTheme ? lightTheme : darkTheme,\n            isDarkTheme: !state.isDarkTheme\n            }),() => {\n                this.forceUpdate();\n                const cookies = new Cookies();\n                cookies.set(\"is_dark_theme\",this.state.isDarkTheme ? \"1\" : \"0\");\n        }\n        );\n\n    }\n\n\n\n    render() {\n        /*\n        let randIndex = Math.floor(Math.random()*4);\n        let effect = null;\n        switch(randIndex){\n            case 0:\n                effect = <ParticlesBg color=\"#ff5722\" num={200} type=\"cobweb\"  bg={true} />;\n                break;\n            case 1:\n                effect = <ParticlesBg color=\"#303030\" num={200} type=\"lines\"  bg={true} />;\n                break;\n            case 2:\n                effect = <ParticlesBg color=\"#ff5722\" num={20} type=\"fountain\"  bg={true} />;\n                break;\n            case 3:\n                effect = <ParticlesBg color=\"#ff5722\" num={20} type=\"polygon\"  bg={true} />;\n                break;\n        }*/\n        return(\n            <TokenContext.Provider value={this.state}>\n                <ThemeProvider theme={this.state.theme}>\n            <Router>\n                {this.state.isAnimationEnable ? <ParticlesBg color=\"#ff5722\" num={200} type=\"cobweb\"  bg={true} /> : \"\"}\n                <Switch>\n                    <Route path=\"/login\">\n                        <Auth onLogin={this.handleLogin}/>\n                    </Route>\n                    <Route path=\"/registration\">\n                        <Reg onReg={this.handleLogin}/>\n                    </Route>\n                    <Route path=\"/restore\">\n                        <Restore/>\n                    </Route>\n                    <PrivateRoute token={this.state.token} path=\"/\">\n                        <Chat isDarkTheme={this.state.isDarkTheme}/>\n                    </PrivateRoute>\n                </Switch>\n            </Router>\n                </ThemeProvider>\n            </TokenContext.Provider>\n                );\n    }\n}\nfunction PrivateRoute({ children, ...rest }) {\n    let contextType = TokenContext;\n    return (\n        <Route\n            {...rest}\n            render={({ location }) =>\n                rest.token != null ? (\n                    children\n                ) : (\n                    <Redirect\n                        to={{\n                            pathname: \"/login\",\n                            state: { from: location }\n                        }}\n                    />\n                )\n            }\n        />\n    );\n}","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\reportWebVitals.js",[],"C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\Auth.js",["131"],"import * as React from \"react\";\nimport PropTypes from 'prop-types';\nimport {\n    Box, Button,\n    Container,\n    CssBaseline,\n    Grid,\n    Link,\n    TextField,\n    Typography, withStyles,Paper\n} from \"@material-ui/core\";\nimport { Link as RouterLink } from 'react-router-dom';\nimport {Copyright} from \"./Copyright\";\nimport {withRouter} from \"react-router-dom\";\n\n\n\n\n\n\nclass Auth extends React.Component{\n\n    routingFunction = () => {\n        this.props.history.push(\"/\");\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            login:\"\",\n            pass:\"\",\n            wrongLoginPass:false\n        };\n        this.handleInputChange = this.handleInputChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleInputChange(event) {\n        const target = event.target;\n        const value = target.value;\n        const name = target.name;\n\n        this.setState({\n            [name]: value,\n            wrongLoginPass:false\n        });\n    }\n\n    handleSubmit(e){\n        e.preventDefault();\n        const requestOptions = {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: \"login=\"+this.state.login+\"&pass=\"+this.state.pass\n        };\n        fetch(\"https://rp-ruler.ru/api/login.php\",requestOptions)\n            .then(response => response.json())\n            .then((data)=>{\n                if(data[\"token\"] !== undefined){\n                    this.props.onLogin(data[\"token\"],data[\"user_id\"],data[\"user_type\"]);\n                    this.routingFunction();\n                }else if( data[\"error\"] === 1){\n                    this.setState({wrongLoginPass:true});\n                }\n            })\n    }\n\n    render() {\n        const {classes} = this.props;\n\n\n        return(<Grid container justify=\"center\">\n            <CssBaseline />\n\n            <Paper elevation={6} className={classes.paper} item>\n                <Typography component=\"h1\" variant=\"h5\">\n                    Добро пожаловать. Снова.\n                </Typography>\n                <form className={classes.form} noValidate\n                      onSubmit={this.handleSubmit} >\n                    <TextField\n                        variant=\"outlined\"\n                        margin=\"normal\"\n                        error={this.state.wrongLoginPass}\n                        required\n                        fullWidth\n                        id=\"login\"\n                        label=\"Логин или E-mail\"\n                        name=\"login\"\n                        helperText={this.state.wrongLoginPass ? \"Неверный логин или пароль\" : \"\"}\n                        autoComplete=\"login\"\n                        onChange = {this.handleInputChange}\n                        value={this.state.login}\n                        autoFocus\n                    />\n                    <TextField\n                        variant=\"outlined\"\n                        margin=\"normal\"\n                        required\n                        error={this.state.wrongLoginPass}\n                        fullWidth\n                        onChange = {this.handleInputChange}\n                        name=\"pass\"\n                        label=\"Пароль\"\n                        type=\"password\"\n                        value={this.state.password}\n                        id=\"pass\"\n                        autoComplete=\"current-password\"\n                    />\n                    <Button\n                        type=\"submit\"\n                        fullWidth\n                        variant=\"contained\"\n                        color=\"primary\"\n                        className={classes.submit}\n                    >\n                        Войти\n                    </Button>\n\n                    <Grid container>\n                        <Grid item xs>\n                            <Link href=\"#\" variant=\"body2\" to=\"/restore\" component={RouterLink}>\n                                Забыли пароль?\n                            </Link>\n                        </Grid>\n                        <Grid item>\n                            <Link to=\"/registration\" component={RouterLink} variant=\"body2\">\n                                Зарегистрироваться\n                            </Link>\n                        </Grid>\n                    </Grid>\n                </form>\n                <Box mt={8}>\n                    <Copyright />\n                </Box>\n            </Paper>\n\n        </Grid>);\n    }\n}\n\n\n\nAuth.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nconst styles = {\n    paper: {\n        marginTop: \"160px\",\n        padding:\"60px\",\n        width:\"500px\",\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n    },\n    form: {\n        width: '100%', // Fix IE 11 issue.\n        marginTop: \"10px\",\n    },\n    submit: {\n        margin: \"30px 0 20px\",\n    },\n};\n\n\nexport default withStyles(styles)(withRouter(Auth));","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\Copyright.js",[],"C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\Reg.js",["132","133","134","135","136","137","138","139"],"import * as React from \"react\";\nimport {\n    Box,\n    Button,\n    Container,\n    CssBaseline,\n    FormControlLabel,\n    Grid,\n    Link, Paper,\n    TextField,\n    Typography, withStyles\n} from \"@material-ui/core\";\nimport {Copyright} from \"./Copyright\";\nimport {Link as RouterLink, withRouter} from 'react-router-dom';\nimport ParticlesBg from \"particles-bg\";\n\n\n\nclass Reg extends React.Component{\n    routingFunction = () => {\n        this.props.history.push(\"/\");\n    }\n    constructor(props) {\n        super(props);\n        this.state = {\n            login:\"\",\n            pass:\"\",\n            email:\"\",\n            isWrongLogin:\"\",\n            isWrongMail:\"\",\n            isWrongPassword:\"\"\n        };\n        this.handleInputChange = this.handleInputChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n    handleInputChange(event) {\n        const target = event.target;\n        const value = target.value;\n        const name = target.name;\n        this.setState({\n            [name]: value,\n            isWrongLogin:\"\",\n            isWrongMail:\"\",\n            isWrongPassword:\"\"\n        });\n    }\n\n    handleSubmit(e){\n        e.preventDefault();\n        if(this.state.login == \"\"){\n            this.setState({isWrongLogin:\"Введите логин\"});\n            return;\n        }\n        if(this.state.email == \"\"){\n            this.setState({isWrongMail:\"Введите email\"});\n            return;\n        }\n        let re = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n        if( !(re.test(this.state.email.toLowerCase())) ){\n            this.setState({isWrongMail:\"Некорректный email\"});\n            return;\n        }\n        if(this.state.pass.length < 6){\n            this.setState({isWrongPassword:\"Слишком короткий пароль\"});\n            return;\n        }\n\n        const requestOptions = {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: \"login=\"+this.state.login+\"&pass=\"+this.state.pass+\"&email=\"+this.state.email\n        };\n        fetch(\"https://rp-ruler.ru/api/registration.php\",requestOptions)\n            .then(response => response.json())\n            .then((data)=>{\n                if(data[\"token\"] !== undefined){\n                    this.props.onReg(data[\"token\"],data[\"user_id\"],data[\"user_type\"]);\n                    this.routingFunction();\n                }else if( data[\"error\"] === 1){\n                    this.setState({isWrongLogin:\"Логин занят\"});\n                }else if( data[\"error\"] === 2) {\n                    this.setState({isWrongMail:\"Email занят\"});\n                }\n            })\n    }\n\n    render() {\n        const {classes} = this.props;\n        return ( <Grid container justify=\"center\">\n            <CssBaseline />\n\n            <Paper elevation={6} className={classes.paper} item>\n                <Typography component=\"h1\" variant=\"h5\">\n                    Добро пожаловать.\n                </Typography>\n                <form className={classes.form} onSubmit={this.handleSubmit} noValidate>\n                    <Grid container spacing={2}>\n                        <Grid item xs={12} sm={12}>\n                            <TextField\n                                autoComplete=\"login\"\n                                name=\"login\"\n                                variant=\"outlined\"\n                                required\n                                fullWidth\n                                id=\"login\"\n                                error={this.state.isWrongLogin != \"\"}\n                                helperText={this.state.isWrongLogin}\n                                onChange={this.handleInputChange}\n                                label=\"Логин\"\n                                autoFocus\n                            />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <TextField\n                                variant=\"outlined\"\n                                required\n                                fullWidth\n                                id=\"email\"\n                                label=\"Email\"\n                                error={this.state.isWrongMail != \"\"}\n                                helperText={this.state.isWrongMail}\n                                name=\"email\"\n                                onChange={this.handleInputChange}\n                                autoComplete=\"email\"\n                            />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <TextField\n                                variant=\"outlined\"\n                                required\n                                fullWidth\n                                name=\"pass\"\n                                label=\"Пароль\"\n                                error={this.state.isWrongPassword != \"\"}\n                                helperText={this.state.isWrongPassword}\n                                type=\"password\"\n                                onChange={this.handleInputChange}\n                                id=\"pass\"\n                                autoComplete=\"current-password\"\n                            />\n                        </Grid>\n                    </Grid>\n                    <Button\n                        type=\"submit\"\n                        fullWidth\n                        variant=\"contained\"\n                        color=\"primary\"\n                        className={classes.submit}\n                    >\n                        зарегистрироваться\n                    </Button>\n                    <Grid container justify=\"flex-end\">\n                        <Grid item xs>\n                            <Link href=\"#\" variant=\"body2\" component={RouterLink} to=\"/restore\" >\n                                Забыли пароль?\n                            </Link>\n                        </Grid>\n                        <Grid item>\n                            <Link href=\"#\" component={RouterLink} to=\"/login\" variant=\"body2\">\n                                Уже есть аккаунт?\n                            </Link>\n                        </Grid>\n                    </Grid>\n                </form>\n                <Box mt={5}>\n                    <Copyright />\n                </Box>\n            </Paper>\n\n        </Grid>);\n    }\n}\n\nconst styles = {\n    paper: {\n        marginTop: \"160px\",\n        padding:\"60px\",\n        width:\"500px\",\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n    },\n    form: {\n        width: '100%', // Fix IE 11 issue.\n        marginTop: \"10px\",\n    },\n    submit: {\n        margin: \"30px 0 20px\",\n    },\n};\nexport default withStyles(styles)(withRouter(Reg));","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\Chat.js",["140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157"],"import * as React from \"react\";\nimport {\n    Avatar, Button,\n    CssBaseline,\n    Grid, LinearProgress, List, ListItem, ListItemAvatar, ListItemText,\n    Paper, TextField,\n    withStyles,\n} from \"@material-ui/core\";\nimport MainMenu from \"./MainMenu\";\nimport TokenContext from \"./AppContext\";\nimport { Picker } from 'emoji-mart'\nimport 'emoji-mart/css/emoji-mart.css'\nimport RoomsList from \"./RoomsList\";\nimport ServerName from \"./ServerName\";\nimport RoomAppBar from \"./RoomAppBar\";\nimport Messages from \"./Messages\";\nimport InputReplyMessage from \"./InputReplyMessage\";\nimport UsersList from \"./UsersList\";\nimport Emoji from \"./Emoji\";\nimport {Send} from \"@material-ui/icons\";\n\n\n\nimport { w3cwebsocket as W3CWebSocket } from \"websocket\";\n\n\n\nclass Chat extends React.Component{\n    static contextType = TokenContext;\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            serverId:0,\n            roomId:null,\n            servers:[],\n            rooms:[],\n            messages:[],\n            lastReadMsg:0,\n            replyTo:null,\n            users:[],\n            isChat:false,\n            isLoading:false,\n            messageText:\"\",\n            inputFocused:false\n        }\n        this.messageInput = React.createRef();\n        this.isLoadingMessages = false;\n        this.handleChangeServer = this.handleChangeServer.bind(this);\n        this.handleChangeRoom = this.handleChangeRoom.bind(this);\n        this.loadRooms = this.loadRooms.bind(this);\n        this.loadServers = this.loadServers.bind(this);\n        this.loadMessages = this.loadMessages.bind(this);\n        this.handleKeyDown = this.handleKeyDown.bind(this);\n        this.loadUsers = this.loadUsers.bind(this);\n        this.handleRemoveMessage = this.handleRemoveMessage.bind(this);\n        this.readMessages = this.readMessages.bind(this);\n        this.handleFocus = this.handleFocus.bind(this);\n        this.handleCancelReply = this.handleCancelReply.bind(this);\n        this.handleReplyChoose = this.handleReplyChoose.bind(this);\n        this.handleToChatClick = this.handleToChatClick.bind(this);\n        this.handleServerDisconnect = this.handleServerDisconnect.bind(this);\n        this.handleWriteToUserClick = this.handleWriteToUserClick.bind(this);\n        this.handleLoadMoreMessages = this.handleLoadMoreMessages.bind(this);\n        this.handleSelectEmoji = this.handleSelectEmoji.bind(this);\n        this.handleBlur = this.handleBlur.bind(this);\n        this.onSocketMessage = this.onSocketMessage.bind(this);\n\n\n    }\n\n    handleWriteToUserClick(event,user_id){\n        const requestOptions = {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: \"token=\"+this.context.token+\"&user_id=\"+user_id\n        };\n        fetch(\"https://rp-ruler.ru/api/get_chat_with_user.php\",requestOptions)\n            .then(response => response.json())\n            .then((data)=> {\n                if (data.error === undefined) {\n                    this.state.room_id = data.result;\n                    this.state.isChat = true;\n\n                    this.loadRooms(data.result);\n                }\n            });\n    }\n\n\n\n\n\n    handleServerDisconnect(){\n        const requestOptions = {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: \"token=\"+this.context.token+\"&server_id=\"+this.state.serverId\n        };\n        fetch(\"https://rp-ruler.ru/api/disconnect_from_server.php\",requestOptions).then(response => response.json())\n            .then(()=>{\n                this.setState({roomId:null,rooms:[],messages:[],users:[]});\n                this.loadServers();\n            });\n    }\n\n    handleChangeServer(serverId){\n        this.state.serverId = serverId;//так надо\n        this.state.isChat = false;\n        this.loadRooms();\n    }\n\n    handleChangeRoom(roomId){\n        this.state.roomId = roomId;//так надо\n        this.loadMessages();\n        if(this.state.isChat)this.connectSocket();\n        else this.loadUsers();\n    }\n\n    handleToChatClick(){\n        this.state.serverId = 0;//так надо\n        this.state.isChat = true;\n        this.loadRooms();\n    }\n\n\n\n    getElById(arr,id){\n        if(arr === undefined)return null;\n        for(let i=0;i<arr.length;i++){\n            if(arr[i].id === id)return arr[i];\n        }\n        return null;\n    }\n\n\n\n    loadRooms(choosedRoom){\n        const serverId = this.state.isChat ? 0 : this.state.serverId;\n        if(serverId === null)return;\n        this.setState({isLoading:true});\n        const requestOptions = {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: \"token=\"+this.context.token+\"&server_id=\"+serverId\n        };\n        fetch(\"https://rp-ruler.ru/api/get_rooms.php\",requestOptions)\n            .then(response => response.json())\n            .then((data)=>{\n                if(data.error === undefined){\n                    let roomId = null;\n                    if(data.length > 0)roomId = data[0].id;\n\n                    if(choosedRoom == null){\n                        this.setState({rooms:data,roomId:roomId,isLoading:false},() => this.connectSocket());\n                    }else{\n                        this.setState({rooms:data,roomId:choosedRoom,isLoading:false},() => this.connectSocket());\n                    }\n                    this.loadMessages();\n                    this.loadUsers();\n                }\n\n            })\n\n    }\n\n    loadServers(){\n        const requestOptions = {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: \"token=\"+this.context.token\n        };\n        fetch(\"https://rp-ruler.ru/api/get_users_servers.php\",requestOptions)\n            .then(response => response.json())\n            .then((data)=>{\n                if(data.error === undefined){\n                    let serverId = null;\n                    if(data.length > 0)serverId = data[0].id;\n                    this.handleChangeServer(serverId);\n                    this.setState({servers:data});\n                }\n\n            })\n    }\n\n    loadUsers(){\n        if(this.state.roomId == null){\n            this.setState({users:[]})\n            return;\n        }\n        const requestOptions = {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: \"token=\"+this.context.token+\"&room_id=\"+this.state.roomId\n        };\n        fetch(\"https://rp-ruler.ru/api/get_users_in_room.php\",requestOptions)\n            .then(response => response.json())\n            .then((data)=>{\n                if(data.error === undefined){\n                    this.setState({users:data.users});\n                    this.connectSocket();\n                }\n            })\n    }\n\n    handleLoadMoreMessages(){\n        if(!this.isLoadingMessages)this.loadMessages(this.state.messages.length);\n    }\n\n    loadMessages(offset = 0){\n        if(this.state.roomId == null){\n            this.setState({messages:[]});\n            return;\n        }\n        this.isLoadingMessages = true;\n        this.setState({isLoading:true});\n        const requestOptions = {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: \"token=\"+this.context.token+\"&room_id=\"+this.state.roomId+\"&offset=\"+offset\n        };\n        fetch(\"https://rp-ruler.ru/api/get_messages.php\",requestOptions)\n            .then(response => response.json())\n            .then((data)=>{\n                if(data.error === undefined){\n                    let newReplyTo = null;\n                    if(offset != 0){\n                        let newMessages = this.state.messages;\n                        newMessages.unshift(...data.messages);\n                        this.setState({messages:newMessages,lastReadMsg:data.last_read,replyTo:newReplyTo,isLoading:false});\n                    }else{\n                        this.setState({messages:data.messages,lastReadMsg:data.last_read,replyTo:newReplyTo,isLoading:false});\n                    }\n                    this.isLoadingMessages = false;\n                }\n\n            })\n    }\n\n    handleFocus(){\n        this.readMessages();\n        this.setState({inputFocused:true});\n    }\n\n    readMessages(){\n        if(this.state.messages != null && this.state.messages.length !== 0 && this.state.lastReadMsg !== this.state.messages.slice(-1)[0].id) {\n            const id = this.state.messages.slice(-1)[0].id;\n            this.setState({lastReadMsg: id});\n            const requestOptions = {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/x-www-form-urlencoded',\n                },\n                body: \"token=\" + this.context.token + \"&room_id=\" + this.state.roomId + \"&msg_id=\" + id\n            };\n            fetch(\"https://rp-ruler.ru/api/read_message.php\", requestOptions)\n                .then(response => response.json())\n                .then((data) => {\n                })\n            this.getElById(this.state.rooms,this.state.roomId).is_unread = 0;\n        }\n    }\n\n\n\n    onSocketOpen(){\n        console.log(\"socket connected\");\n    }\n    onSocketMessage(message){\n        let data = JSON.parse(message.data);\n        console.log(data);\n\n        if(data.message != null){\n            let newMessages = [...this.state.messages];\n            if(this.getElById(this.state.messages,data.message.id) == null){\n                newMessages.push(data.message);\n            }\n            console.log(data.message.sender_id);\n            console.log(this.context.user_id*1);\n            if(data.message.sender_id != this.context.user_id*1)this.popsound.play();\n            this.setState({messages: newMessages});\n        }\n        if(data.left_user != null){\n            this.setState((state) => {\n                let newUsers = [...state.users];\n                this.removeElById(newUsers,data.left_user);\n                return {\n                    users:newUsers\n                }\n            });\n        }\n        if(data.joined_user != null){\n\n            this.setState((state) => {\n                let newUsers = [...state.users];\n                if(this.getElById(newUsers,data.joined_user.id) == null)newUsers.unshift(data.joined_user);\n                return {\n                    users:newUsers\n                }\n            });\n        }\n        if(data.remove_message != null){\n\n            this.setState((state) => {\n                let newMessages = [...state.messages];\n                this.removeElById(newMessages,data.remove_message);\n                return {\n                    messages:newMessages\n                }\n            });\n        }\n        if(data.unread_room != null){\n            let newRooms = [...this.state.rooms];\n            let unreadRoom = this.getElById(newRooms,data.unread_room*1);\n            console.log(unreadRoom.is_unread);\n            if(unreadRoom != null)unreadRoom.is_unread = (unreadRoom.is_unread*1 || 0) + 1;\n            this.setState( {\n                    rooms:newRooms\n                });\n            if(!unreadRoom.is_muted)this.popsound.play();\n        }\n\n    }\n\n\n\n    connectSocket(){\n        if(this.client != null){\n            this.client.close();\n            this.client = null;\n        }\n        this.client = new W3CWebSocket('wss://rp-ruler.ru:8084?token='+this.context.token+\"&room_id=\"+this.state.roomId);\n        this.client.onopen = this.onSocketOpen;\n        this.client.onmessage = this.onSocketMessage;\n    }\n\n    componentDidMount() {\n        this.popsound = new Audio('https://rp-ruler.ru/sounds_water_droplet_3.mp3');\n        this.popsound.load();\n        this.popsound.volume = 0.6;\n\n        this.loadServers();\n        this.loadRooms();\n\n    }\n\n\n    removeElById(arr,id){\n        for(let i=0;i<arr.length;i++){\n            if(arr[i].id === id){\n                arr.splice(i,1);\n                return arr;\n            }\n        }\n    }\n\n\n    handleReplyChoose(id){\n        this.setState({replyTo:id});\n    }\n\n    handleCancelReply(){\n        this.setState({replyTo:null});\n    }\n\n    handleRemoveMessage(id){\n        let newMessages = [...this.state.messages];\n        newMessages = this.removeElById(newMessages,id);\n        let newReplyTo = id != this.state.replyTo ? this.state.replyTo : null;\n        this.setState({messages:newMessages,replyTo:newReplyTo});\n        if(this.client != null){\n            this.client.send(JSON.stringify({\n                removeMsg:id\n            }));\n        }else {//фолбек до POST, нужно ли?\n\n            const requestOptions = {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/x-www-form-urlencoded',\n                },\n                body: \"token=\" + this.context.token + \"&msg_id=\" + id\n            };\n            fetch(\"https://rp-ruler.ru/api/remove_message.php\", requestOptions)\n                .then(response => response.json())\n                .then((data) => {\n                })\n        }\n    }\n\n    handleKeyDown(event){\n        this.readMessages();\n        if(event.key === \"Enter\" && !event.shiftKey){\n            event.preventDefault();\n            const msgText = encodeURIComponent(event.target.value);\n            if(msgText.length > 0) {\n                this.sendMessage(msgText);\n            }\n        }\n    }\n\n    sendMessage(msg){\n        if(this.client != null){\n            this.client.send(JSON.stringify({\n                text:msg,\n                reply_id:this.state.replyTo\n            }));\n            this.setState({replyTo: null});\n            this.messageInput.current.value = null;\n\n        }else {//фолбек до POST, нужно ли?\n            const requestOptions = {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/x-www-form-urlencoded',\n                },\n                body: \"token=\" + this.context.token + \"&room_id=\" + this.state.roomId + \"&text=\" + msg + \"&reply_id=\" + this.state.replyTo\n            };\n            fetch(\"https://rp-ruler.ru/api/send_message.php\", requestOptions)\n                .then(response => response.json())\n                .then((data) => {\n                    let newMessages = [...this.state.messages];\n                    newMessages.push(data);\n                    this.setState({lastReadMsg: data.id, messages: newMessages, replyTo: null});\n                    this.messageInput.current.value = null;\n                })\n        }\n    }\n\n    handleSelectEmoji(emoji){\n        this.messageInput.current.value += emoji.native;\n\n        this.setState({inputFocused:true});\n    }\n\n    handleBlur(){\n        if(this.messageInput.current.value.length === 0){\n///this.setState({inputFocused:null});\n        }\n        this.setState({inputFocused:null});\n    }\n\n\n    render() {\n        const {classes} = this.props;\n\n        const curServer = this.getElById(this.state.servers,this.state.serverId);\n        let serverName = \"\";\n        let adminId = null;\n        if(curServer != null){\n            serverName = curServer.name;\n            adminId = curServer.admin_id;\n        }\n        const room = this.getElById(this.state.rooms,this.state.roomId);\n        let labelText = \"Писать некуда...\";\n        let roomName = \"\";\n        let roomDescription = \"\";\n        let bg = \"\";\n        if(room != null){\n            let writeTo = this.state.isChat ? \"Написать \" : \"Написать в \";\n            roomName = room.login != null ? room.login : room.name;\n            labelText = this.state.replyTo==null ? writeTo + roomName.toLowerCase() :\n                \"Написать в ответ \"+this.getElById(this.state.messages,this.state.replyTo).login;\n            bg = \"url(https://rp-ruler.ru/upload/\" + room.bg+\")\";\n            roomDescription = room.description;\n        }\n        const replyText = this.state.replyTo==null ? null : this.getElById(this.state.messages,this.state.replyTo).text;\n        const replyLogin = this.state.replyTo==null ? null : this.getElById(this.state.messages,this.state.replyTo).login;\n        return(\n\n            <Grid className={classes.wrap} container spacing={1} onContextMenu={(event) => {event.preventDefault()}}>\n\n                <CssBaseline />\n                {this.state.isLoading ? <LinearProgress className={classes.loading}/> : \"\"}\n                <Grid justify=\"center\" container item xs={1} spacing={0}>\n\n                    <MainMenu servers={this.state.servers}\n                              onServerConnect={this.loadServers}\n                              onChangeServer={this.handleChangeServer}\n                              onToChatClick={this.handleToChatClick}\n                              currentServer={this.state.serverId}\n                    />\n                </Grid>\n                <Grid justify=\"center\" container item xs={2} spacing={0}>\n                    <Paper className={classes.paperWrap} elevation={1} >\n                        <ServerName isChat={this.state.isChat}\n                                    serverId={this.state.serverId}\n                                    name={serverName}\n                                    server={curServer}\n                                    updateServers={() => this.loadServers()}\n                                    onRoomCreate={() => this.loadRooms()}\n                                    admin={adminId == this.context.user_id*1}\n                                    onServerDisconnect={this.handleServerDisconnect}/>\n                        {(this.state.rooms !== undefined) ?\n                            <RoomsList admin={adminId == this.context.user_id*1}\n                                       currentRoom={this.state.roomId}\n                                       rooms={this.state.rooms}\n                                       onRoomsUpdate={this.loadRooms}\n                                       serverId={this.state.serverId}\n                                       onChangeRoom={this.handleChangeRoom}/> : \"\"}\n                    </Paper>\n                </Grid>\n                <Grid justify=\"center\" container item xs={this.state.isChat ? 9 : 7} spacing={0}>\n                    <Paper className={classes.paperWrap} elevation={1}  >\n\n                        <RoomAppBar className={classes.appBar} name={roomName} description={roomDescription}/>\n\n                        <Messages messages={this.state.messages}\n                                  onRemoveMessage={this.handleRemoveMessage}\n                                  onReplyChoose={this.handleReplyChoose}\n                                  bg={bg}\n                                  replyTo={this.state.replyTo}\n                                  loadMoreMessages={this.handleLoadMoreMessages}\n                                  online={this.state.users}\n                                  lastRead={this.state.lastReadMsg}/>\n                        <Paper elevation={4} className={classes.messageInputWrap}>\n                            <InputReplyMessage onCancel={this.handleCancelReply} replyText={replyText} replyLogin={replyLogin}/>\n                            <TextField\n                                id=\"filled-textarea\"\n                                label={labelText}\n                                placeholder=\"Введите сообщение\"\n                                onKeyDown={this.handleKeyDown}\n                                multiline\n                                onFocus={this.handleFocus}\n                                fullWidth\n                                onBlur={this.handleBlur}\n                                focused={this.state.inputFocused}\n                                rowsMax={8}\n                                color=\"black\"\n                                className={classes.messageInput}\n                                variant=\"filled\"\n                                inputRef={this.messageInput}\n                            />\n                            <Emoji isDarkTheme={this.props.isDarkTheme} onSelect={this.handleSelectEmoji}/>\n                            <Button onClick={() => {if(this.messageInput.current)this.sendMessage(this.messageInput.current.value)}} className={classes.sendBtn}><Send/></Button>\n                        </Paper>\n\n                    </Paper>\n\n                </Grid>\n                {!this.state.isChat ? <Grid justify=\"center\" container item xs={2} spacing={0}>\n                    <Paper className={classes.paperWrap} elevation={1} >\n                        <UsersList onWriteToUser={this.handleWriteToUserClick} users={this.state.users}/>\n                    </Paper>\n                </Grid> : \"\"}\n\n\n            </Grid>\n        );\n    }\n}\n\n\nconst styles = {\n        sendBtn:{\n            position:\"absolute\",\n            bottom:\"10px\",\n            right:\"5px\",\n            opacity:0.7\n        },\n        loading:{\n            width:\"100%\",\n            position:\"fixed\",\n            top:\"0\"\n        },\n        wrap: {\n            padding:\"10px 5px\",\n            width:\"100vw\",\n            height:\"100vh\"\n        },\n        paperWrap:{\n            width:\"100%\",\n            position: \"relative\",\n        },\n        exitServer:{\n            color:\"red\"\n        },\n        messageInput:{\n            \"border-radius\":\"3px\",\n            overflow:\"hidden\",\n\n        },\n        messageInputWrap:{\n            position:\"absolute\",\n            bottom:\"0px\",\n            width:\"100%\",\n            zIndex:10\n        },\n\n\n    }\n;\nexport default withStyles(styles)(Chat);","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\MainMenu.js",["158","159"],"import * as React from \"react\";\nimport {Avatar, Fab, List, ListItem, withStyles} from \"@material-ui/core\";\nimport {AssignmentInd, Add, Settings, Explore, Forum} from \"@material-ui/icons\";\n\nimport {Divider} from \"@material-ui/core\";\nimport AppContext from \"./AppContext.js\";\nimport ProfileDialog from \"./ProfileDialog\";\nimport ServersDialog from \"./ServersDialog\";\nimport AddServerDialog from \"./AddServerDialog\";\n\n\n\nclass MainMenu extends React.Component{\n    static contextType = AppContext;\n    constructor(props) {\n        super(props);\n        this.state = {\n            profileDialogOpen:false,\n            serversDialogOpen:false,\n            addServerDialogOpen:false\n        };\n\n        this.handleServerCreate = this.handleServerCreate.bind(this);\n    }\n    handleServerClick(id,name){\n        this.props.onChangeServer(id,name);\n    }\n\n    handleServerCreate(id,name){\n        this.props.onServerConnect();\n        this.props.onChangeServer(id,name);\n    }\n\n    render() {\n        const {classes} = this.props;\n        return (<div><List><ListItem><Fab onClick={() => this.setState({profileDialogOpen:true})} aria-label=\"add\">\n            <Settings />\n        </Fab></ListItem>\n                <ListItem><Fab onClick={this.props.onToChatClick} aria-label=\"add\">\n                    <Forum />\n                </Fab></ListItem>\n                <Divider className={classes.divider}/>\n            {this.props.servers.map((item)=>(\n                <ListItem key={item.id}>\n                    <Avatar className={classes.avatar + (this.props.currentServer===item.id ? \" \" + classes.current : \"\")} onClick={() => this.handleServerClick(item.id)} src={\"https://rp-ruler.ru/upload/\"+item.avatar}>\n                        <Fab className={classes.serverElem + (this.props.currentServer===item.id ? \" \"+classes.current : \"\")}>{item.name.substr(0,2)}</Fab>\n                    </Avatar></ListItem>\n            ))}\n                {this.context.user_type == 1 ? <ListItem><Fab color=\"primary\" className={classes.serverElem} onClick={() => this.setState({addServerDialogOpen:true})}>\n                    <Add/></Fab></ListItem> : \"\"}\n\n                <ListItem><Fab color=\"primary\" onClick={() =>this.setState({serversDialogOpen:true})} className={classes.serverElem}>\n                    <Explore/></Fab></ListItem>\n\n            </List><ProfileDialog open={this.state.profileDialogOpen} onClose={() =>this.setState({profileDialogOpen:false})}/>\n                    <ServersDialog open={this.state.serversDialogOpen} connectedServers={this.props.servers} onServerConnect={this.props.onServerConnect} onClose={() => this.setState({serversDialogOpen:false})}/>\n                    <AddServerDialog open={this.state.addServerDialogOpen} onCreate={this.handleServerCreate} onClose={() => this.setState({addServerDialogOpen:false})}/>\n        </div>\n        );\n    }\n\n}\nconst styles = {\n    divider: {\n\n        padding:\"1px\"\n    },\n    current:{\n        \"border-radius\":\"30%\"\n    },\n    avatar:{\n        width:\"56px\",\n        height:\"56px\",\n        \"background-color\":\"#e0e0e0\",\n        \"cursor\":\"pointer\",\n        transition:\".1s\"\n    },\n    serverElem:{\n        \"font-size\":\"20px\",\n        transition:\".1s\"\n    }\n};\nexport default withStyles(styles)(MainMenu);","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\AppContext.js",[],"C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\RoomsList.js",["160","161","162"],"import * as React from \"react\";\nimport AppContext from \"./AppContext\";\nimport {\n    Badge,\n    List,\n    ListItem,\n    ListItemIcon,\n    ListItemText,\n    Menu,\n    MenuItem,\n    Typography,\n    withStyles\n} from \"@material-ui/core\";\nimport {AlternateEmail, Delete, Edit, ExitToApp, Language, Notifications} from \"@material-ui/icons\";\nimport AddRoomDialog from \"./AddRoomDialog\";\nimport {Alert} from \"@material-ui/lab\";\nimport {AlertWarning} from \"material-ui/svg-icons/index.es\";\n\n\nclass RoomsList extends React.Component{\n    static contextType = AppContext;\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            anchorEl:null,\n            clickedRoomId:null,\n            isEditOpen:false,\n            clickedRoom:null\n        };\n        this.handleRoomContext = this.handleRoomContext.bind(this);\n        this.deleteRoom = this.deleteRoom.bind(this);\n        this.handleChangeNotifications = this.handleChangeNotifications.bind(this);\n    }\n\n    handleRoomClick(roomId){\n        this.props.onChangeRoom(roomId);\n    }\n\n    deleteRoom(){\n        const requestOptions = {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: \"token=\"+this.context.token+\"&room_id=\"+this.state.clickedRoomId\n        };\n        fetch(\"https://rp-ruler.ru/api/delete_room.php\",requestOptions)\n            .then(response => response.json())\n            .then((data)=>{\n                this.setState({anchorEl:null,clickedRoomId:null});\n                this.props.onRoomsUpdate();\n            })\n    }\n\n    handleRoomContext(event,id){\n            let clickedRoom = this.getElById(this.props.rooms,id);\n            this.setState({\n                anchorEl:event.currentTarget,\n                clickedRoomId:id,\n                clickedRoom:clickedRoom\n            });\n\n\n    }\n\n    handleChangeNotifications(){\n        const requestOptions = {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: \"token=\"+this.context.token+\"&room_id=\"+this.state.clickedRoomId\n        };\n        fetch(\"https://rp-ruler.ru/api/change_alert.php\",requestOptions)\n            .then(response => response.json())\n            .then((data)=>{\n                this.setState({anchorEl:null,clickedRoomId:null});\n                this.props.onRoomsUpdate();\n            })\n    }\n\n    getElById(arr,id){\n        if(arr === undefined)return null;\n        for(let i=0;i<arr.length;i++){\n            if(arr[i].id === id)return arr[i];\n        }\n        return null;\n    }\n\n    render() {\n        const {classes} = this.props;\n        if(this.props.rooms == null || this.props.rooms.length === 0){\n            return(<Typography variant=\"subtitle2\" align=\"center\">Комнат пока нет...</Typography>);\n        }else {\n            return (<List>\n                {this.props.rooms.map((item) => (\n                    <ListItem onContextMenu={(event) =>  this.handleRoomContext(event,item.id)}\n                              selected={this.props.currentRoom === item.id} onClick={() => this.handleRoomClick(item.id)} key={item.id} button>\n                        <ListItemIcon>\n                            <Badge anchorOrigin={{\n                                vertical: 'top',\n                                horizontal: 'left',\n                            }} color=\"primary\" badgeContent={\"+\"+item.is_unread} invisible={!(item.is_unread > 0)}>\n                            {item.is_global === 1 ? <Language/> : <AlternateEmail/>}\n                            </Badge>\n                        </ListItemIcon>\n                        <ListItemText>\n                            <span className={classes.room}>{item.login != null ? item.login : item.name}</span>\n                        </ListItemText>\n\n                    </ListItem>\n                ))}\n                <Menu\n                    transformOrigin={{\n                        vertical: 'top',\n                        horizontal: 'center',\n                    }}\n                    anchorOrigin={{\n                        vertical: \"bottom\",\n                        horizontal: 'center',\n                    }}\n\n                    getContentAnchorEl={null}\n                    anchorEl={this.state.anchorEl}\n                    keepMounted\n                    open={Boolean(this.state.anchorEl)}\n                    onClose={() => this.setState({anchorEl:null})}\n                >\n                    {this.props.admin ? <MenuItem className={classes.delete} onClick={this.deleteRoom}>\n                    Удалить комнату<Delete className={classes.icon}/></MenuItem> : \"\"}\n                    {this.props.admin ? <MenuItem className={classes.edit} onClick={() => this.setState({isEditOpen:true,anchorEl:null})}>\n                        Редактировать <Edit className={classes.icon}/></MenuItem> : \"\"}\n                    <MenuItem className={classes.notifications} onClick={this.handleChangeNotifications}>\n                         <Notifications className={classes.icon}/>{this.state.clickedRoom != null && this.state.clickedRoom.is_muted ? \"Включить уведомления\" : \"Отключить уведомления\"}</MenuItem>\n                </Menu>\n                {this.state.clickedRoom != null ? <AddRoomDialog\n                    open={this.state.isEditOpen}\n                    serverId={this.props.serverId}\n                    onCreate={this.props.onRoomsUpdate}\n                    roomId={this.state.clickedRoomId}\n                    name={this.state.clickedRoom.name}\n                    description={this.state.clickedRoom.description}\n                    bg={this.state.clickedRoom.bg}\n                    isGlobal={this.state.clickedRoom.is_global === 1}\n                    onClose={() => this.setState({isEditOpen:false})}\n                /> : \"\"}\n\n            </List>);\n        }\n    }\n\n}\n\nconst styles = {\n    room:{\n        \"text-overflow\":\"ellipsis\",\n        \"white-space\":\"nowrap\",\n        \"display\":\"block\",\n        \"width\":\"100%\",\n        \"overflow\":\"hidden\"\n    },\n    notifications:{\n        color:\"#ccc\",\n    },\n    edit:{\n        color:\"#ffc107\",\n        width:\"250px\"\n    },\n    menu:{\n        width:\"400px\"\n    },\n    delete:{\n        color:\"#f50057\",\n        \"padding-right\":\"50px\"\n    },\n    icon:{\n        position:\"absolute\",\n        right:\"10px\"\n    }\n};\nexport default withStyles(styles)(RoomsList);","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\ServerName.js",["163","164"],"C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\RoomAppBar.js",["165"],"import * as React from \"react\";\nimport {\n    Accordion,\n    AccordionDetails,\n    AccordionSummary,\n    AppBar,\n    Toolbar,\n    Typography,\n    withStyles\n} from \"@material-ui/core\";\nimport {ExpandMore} from \"@material-ui/icons\";\n\nclass RoomAppBar extends React.Component{\n    constructor(props) {\n        super(props);\n        this.state = {\n            open:false\n        };\n    }\n    render(){\n        const {classes} = this.props;\n        if(this.props.description != null && this.props.description.length > 100){\n            return(<AppBar color=\"default\" position=\"absolute\">\n                <Toolbar className={classes.root}>\n                    <Accordion className={classes.accordion} expanded={this.state.open} onChange={() => this.setState((state) => {return {open:!state.open}} )}>\n                        <AccordionSummary\n                            expandIcon={<ExpandMore />}\n                            id=\"panel1bh-header\"\n                        >\n                            <Typography className={classes.divider} variant=\"h6\" noWrap>\n                                {this.props.name}\n                            </Typography>\n                            {!this.state.open ? <Typography className={classes.description} variant=\"body2\">\n                                {this.truncateString(this.props.description,100)}\n                            </Typography> : \"\"}\n                        </AccordionSummary>\n                        <AccordionDetails>\n                            <Typography variant=\"body2\">\n                                {this.props.description}\n                            </Typography>\n                        </AccordionDetails>\n                    </Accordion>\n\n\n                </Toolbar>\n            </AppBar>);\n        }else{\n            return(<AppBar color=\"default\" position=\"absolute\">\n                <Toolbar>\n                    <Typography className={this.props.description != \"\" ? classes.divider : \"\"} variant=\"h6\" noWrap>\n                        {this.props.name}\n                    </Typography>\n                    <Typography className={classes.description} variant=\"body2\" noWrap>\n                        {this.truncateString(this.props.description,100)}\n                    </Typography>\n\n                </Toolbar>\n            </AppBar>);\n        }\n\n    }\n    truncateString(str, num) {\n        if(str == null)return  null;\n        if (str.length <= num) {\n            return str\n        }\n        return str.slice(0, num) + '...'\n    }\n\n}\n\nconst styles = {\n    root:{\n        overflow:\"hidden\"\n    },\n    accordion:{\n        background:\"transparent\",\n        boxShadow:\"none\"\n    },\n    divider:{\n        borderRight:\"1px solid #888\",\n        paddingRight:\"10px\"\n    },\n    description:{\n        marginTop:\"5px\",\n        marginLeft:\"10px\",\n\n    }\n\n};\nexport default withStyles(styles)(RoomAppBar);","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\Messages.js",["166","167","168","169","170","171","172","173","174","175","176","177","178"],"import * as React from \"react\";\nimport {\n\n    Avatar, IconButton, LinearProgress, List,\n    ListItem,\n    ListItemAvatar, ListItemIcon,\n    ListItemText, Menu, MenuItem, Typography,\n\n    withStyles\n} from \"@material-ui/core\";\nimport {Delete, Reply} from \"@material-ui/icons\";\nimport TokenContext from \"./AppContext\";\nimport InputReplyMessage from \"./InputReplyMessage\";\nimport StyledBadge from \"./StyledBadge\";\n\n\nclass Messages extends React.Component{\n    static contextType = TokenContext;\n    constructor(props) {\n        super(props);\n        this.state =\n            {mouseX: null,\n            mouseY: null,\n            menuMessageId:null,\n            };\n        this.handleCloseMenu = this.handleCloseMenu.bind(this);\n        this.getMessageById = this.getMessageById.bind(this);\n        this.handleDeleteMsg = this.handleDeleteMsg.bind(this);\n        this.handleReply = this.handleReply.bind(this);\n        this.handleContextClick = this.handleContextClick.bind(this);\n        this.handleScroll = this.handleScroll.bind(this);\n    }\n\n    handleContextClick(event,message_id){\n        event.preventDefault();\n        this.setState({\n            mouseX: event.clientX - 2,\n            mouseY: event.clientY - 4,\n            menuMessageId:message_id\n        });\n    }\n    componentDidUpdate(prevProps){\n        if(this.props.messages !== prevProps.messages) {\n            this.scrollToBottom();\n        }\n    }\n    scrollToBottom(){\n        this.messagesEnd.scrollIntoView();\n    }\n\n    componentDidMount() {\n        this.scrollToBottom();\n    }\n\n    getElById(arr,id){\n        if(arr === undefined)return null;\n        for(let i=0;i<arr.length;i++){\n            if(arr[i].id === id)return arr[i];\n        }\n        return null;\n    }\n\n    handleCloseMenu(event){\n        event.preventDefault();\n        this.setState({\n            mouseX: null,\n            mouseY: null\n        });\n    }\n\n    getMessageById(id){\n        if(this.props.messages === undefined)return null;\n        for(let i=0;i<this.props.messages.length;i++){\n            if(this.props.messages[i].id === id)return this.props.messages[i];\n        }\n        return null;\n\n    }\n\n    handleReply(event){\n        this.props.onReplyChoose(this.state.menuMessageId);\n        this.handleCloseMenu(event);\n    }\n\n    handleDeleteMsg(event){\n        this.props.onRemoveMessage(this.state.menuMessageId);\n        this.handleCloseMenu(event);\n    }\n    handleScroll(event){\n        if(event.target.scrollTop < 400 && this.props.messages.length % 60 === 0){\n            this.props.loadMoreMessages();\n        }\n\n    }\n\n    render(){\n        const {classes} = this.props;\n        return(<div><div className={classes.roomBg} style={{\"background-image\":this.props.bg}}/><List onScroll={this.handleScroll} className={classes.messagesWrap}>\n\n            {this.props.messages.map((item,i,msgs)=>(\n            <ListItem button key={item.id}\n                      className={(item.id > this.props.lastRead ? classes.unreadMessage : \"\")+\" \"+\n                      (item.id == this.props.replyTo ? classes.replyTo : \"\") + \" \"+\n                      ((i != 0 && msgs[i - 1].sender_id == item.sender_id) ? classes.noAvatar : \"\")\n                      }\n                      onContextMenu={(event) => this.handleContextClick(event,item.id)}>\n                {(i != 0 && msgs[i - 1].sender_id == item.sender_id) ? \"\" :\n                    <ListItemAvatar>\n                        <StyledBadge variant=\"dot\"\n                                     anchorOrigin={{\n                                         vertical: 'bottom',\n                                         horizontal: 'right',\n                                     }}\n                                     overlap=\"circle\"\n                                     invisible={this.getElById(this.props.online, item.sender_id) == null}>\n                            <Avatar alt={item.login} src={\"https://rp-ruler.ru/upload/\" + item.avatar}/>\n                        </StyledBadge>\n\n                    </ListItemAvatar>\n                }\n                <ListItemText\n                    secondary={<div>{item.text}\n                    {item.reply_message != null ? <InputReplyMessage replyLogin={item.reply_message.login}\n                                                                replyText={item.reply_message.text}/> : null}</div>}>\n                    {(i != 0 && msgs[i - 1].sender_id == item.sender_id) ? \"\" :<span className={classes.login}>{item.login}</span>}\n                    {(i != 0 && msgs[i - 1].sender_id == item.sender_id) ? \"\" :<l className={classes.messageTime}> {item.datetime}</l>}\n\n\n                </ListItemText>\n            </ListItem>\n            ))}\n            <Menu\n                keepMounted\n                onContextMenu={this.handleCloseMenu}\n                open={this.state.mouseY !== null}\n                onClose={this.handleCloseMenu}\n                anchorReference=\"anchorPosition\"\n                anchorPosition={\n                    this.state.mouseY !== null && this.state.mouseX !== null\n                        ? { top: this.state.mouseY, left: this.state.mouseX }\n                        : undefined\n                }\n            >\n                {this.getMessageById(this.state.menuMessageId) != null &&\n                this.getMessageById(this.state.menuMessageId).sender_id == this.context.user_id ?\n                    <MenuItem onClick={this.handleDeleteMsg}>\n                    <ListItemIcon>\n                        <Delete fontSize=\"small\" />\n                    </ListItemIcon>\n                    Удалить\n                </MenuItem> : \"\"}\n\n                <MenuItem onClick={this.handleReply}>\n                    <ListItemIcon>\n                        <Reply fontSize=\"small\" />\n                    </ListItemIcon>\n                    Ответить\n                </MenuItem>\n            </Menu>\n            <div style={{ float:\"left\", clear: \"both\" }}\n                 ref={(el) => { this.messagesEnd = el; }}>\n            </div>\n        </List></div>);\n    }\n}\n\n\nconst styles = {\n    roomBg:{\n        position:\"absolute\",\n        top:0,\n        \"background-position\":\"center\",\n        \"background-size\":\"cover\",\n        left:0,\n        width:\"100%\",\n        height:\"100%\",\n        opacity: 0.2\n    },\n    messagesWrap:{\n        height:\"calc(100vh - 147px)\",\n        \"overflow\":\"auto\",\n        marginTop:\"67px\"\n    },\n    messageTime:{\n        \"font-size\":\"13px\",\n        opacity:\"0.6\"\n    },\n    unreadMessage:{\n        \"background-color\":\"rgba(255, 255, 255, 0.04)\"\n    },\n    replyTo:{\n        \"border-left\":\"2px solid #ff5722\",\n        \"background-color\":\"#ff572209\"\n    },\n    login:{\n        color:\"#ff5722\",\n        \"font-weight\":\"400\"\n    },\n    noAvatar:{\n        paddingLeft:\"72px\",\n        paddingTop:\"0px\",\n        paddingBlock:\"0px\"\n    }\n}\n\n\n;\nexport default withStyles(styles)(Messages);","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\InputReplyMessage.js",["179"],"import * as React from \"react\";\nimport {Paper, withStyles} from \"@material-ui/core\";\nimport {Close} from \"@material-ui/icons\";\n\nclass InputReplyMessage extends React.Component{\n    render(){\n        const {classes} = this.props;\n        if(this.props.replyLogin === null)return(<div/>);\n        return( <div className={this.props.onCancel != null ? classes.messageReplyWrap : null }>\n                                <div className={classes.messageReply}>\n                                    <h5 className={classes.login}>{this.props.replyLogin}</h5>\n                                    <span className={classes.text}>{this.props.replyText}</span>\n                                    {this.props.onCancel != null ? <Close onClick={this.props.onCancel} className={classes.close}/> : null }\n                                </div>\n        </div>);\n    }\n}\n\nconst styles = {\n    messageReplyWrap:{\n        padding:\"10px 20px\"\n    },\n    messageReply:{\n        \"border-left\":\"2px solid #ff5722\",\n        \"padding-left\":\"10px\"\n    },\n    login:{\n        margin:\"0\",\n        \"font-size\":\"1.15em\",\n        \"font-weight\":400,\n        color:\"#ff5722\"\n    },\n    text:{\n        opacity:0.7\n    },\n    close:{\n        position:\"absolute\",\n        cursor:\"pointer\",\n        right:\"10px\",\n        top:\"10px\"\n    },\n\n\n};\nexport default withStyles(styles)(InputReplyMessage);","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\ProfileDialog.js",["180"],"import * as React from \"react\";\nimport {\n    Accordion, AccordionDetails, AccordionSummary,\n    AppBar, Avatar,\n    Button,\n    Dialog, DialogActions, DialogTitle, Divider, FormControlLabel,\n    IconButton,\n    List,\n    ListItem, ListItemAvatar,\n    ListItemText, Slide, Snackbar, Switch,\n    Toolbar,\n    Typography,\n    withStyles\n} from \"@material-ui/core\";\nimport {Close, ExpandMore} from \"@material-ui/icons\";\nimport TokenContext from \"./AppContext\";\nimport FormDialog from \"./FormDialog\";\nimport {Alert} from \"@material-ui/lab\";\n\n\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n    return <Slide direction=\"right\" ref={ref} {...props} />;\n});\n\nclass ProfileDialog extends React.Component {\n    static contextType = TokenContext;\n    constructor(props) {\n        super(props);\n        this.handleClose = this.handleClose.bind(this);\n        this.handleDarkThemeChange = this.handleDarkThemeChange.bind(this);\n        this.state = {expanded:false,\n            login:null,\n            email:null,\n            status:null,\n            avatar:null,\n            loginFormOpen:false,\n            statusFormOpen:false,\n            passFormOpen:false,\n            snackBarText:null,\n            snackBarOpen:false,\n            snackBarStatus:\"success\",\n            isConfirmDeleteOpen:false\n        };\n        this.handleAccordionChange = this.handleAccordionChange.bind(this);\n        this.handleSaveLogin = this.handleSaveLogin.bind(this);\n        this.handleSnackBarClose = this.handleSnackBarClose.bind(this);\n        this.handleSaveStatus = this.handleSaveStatus.bind(this);\n        this.handleSavePassword = this.handleSavePassword.bind(this);\n        this.handleFileUploaded = this.handleFileUploaded.bind(this);\n    }\n\n    componentDidMount() {\n        const requestOptions = {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: \"token=\"+this.context.token+\"&server_id=\"+this.state.serverId\n        };\n        fetch(\"https://rp-ruler.ru/api/get_profile.php\",requestOptions).then(response => response.json())\n            .then((data)=>{\n                if(data.error === undefined){\n                    this.setState({...data.user})\n                }\n            });\n    }\n\n    handleClose(){\n        this.props.onClose();\n    }\n    handleDarkThemeChange(){\n        this.context.toggleTheme();\n    }\n\n    handleSnackBarClose(){\n        this.setState({snackBarOpen:false});\n    }\n\n    handleSaveLogin(data){\n        if(data==null)return;\n        let newLogin = data.login;\n        const requestOptions = {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: \"token=\"+this.context.token+\"&login=\"+newLogin\n        };\n        fetch(\"https://rp-ruler.ru/api/save_profile.php\",requestOptions).then(response => response.json())\n            .then((data)=>{\n                if(data.error === undefined){\n                    this.setState({snackBarOpen:true,\n                        snackBarText:\"Логин успешно изменен.\",\n                        login:newLogin,\n                        snackBarStatus:\"success\"\n                    });\n                }else{\n                    this.setState({snackBarOpen:true,\n                        snackBarText:data.error,\n                        snackBarStatus:\"error\"\n                    });\n                }\n            });\n        this.setState({loginFormOpen:false});\n    }\n\n\n\n    handleSaveStatus(data){\n        let newStatus = data == null ? \" \" : data.status;\n        this.setState({statusFormOpen:false});\n        const requestOptions = {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: \"token=\"+this.context.token+\"&status=\"+newStatus\n        };\n        fetch(\"https://rp-ruler.ru/api/save_profile.php\",requestOptions).then(response => response.json())\n            .then((data)=>{\n                if(data.error === undefined){\n                    this.setState({snackBarOpen:true,\n                        snackBarText:\"Статус успешно изменен.\",\n                        status:newStatus,\n                        snackBarStatus:\"success\"\n                    });\n                }else{\n                    this.setState({snackBarOpen:true,\n                        snackBarText:data.error,\n                        snackBarStatus:\"error\"\n                    });\n                }\n            });\n    }\n\n    handleSavePassword(data){\n        if(data == null)return;\n        this.setState({passFormOpen:false});\n        let prevPass = data.prev_password;\n        let newPass = data.new_password;\n        const requestOptions = {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: \"token=\"+this.context.token+\"&prev_pass=\"+prevPass+\"&new_pass=\"+newPass\n        };\n        fetch(\"https://rp-ruler.ru/api/save_profile.php\",requestOptions).then(response => response.json())\n            .then((data)=>{\n                if(data.error === undefined){\n                    this.setState({snackBarOpen:true,\n                        snackBarText:\"Пароль успешно изменен.\",\n                        snackBarStatus:\"success\"\n                    });\n                }else{\n                    this.setState({snackBarOpen:true,\n                        snackBarText:data.error,\n                        snackBarStatus:\"error\"\n                    });\n                }\n            });\n    }\n\n    handleAccordionChange = (panel) => (event, isExpanded) => {\n        this.setState({expanded:isExpanded ? panel : false});\n    };\n    handleFileUploaded(event){\n        if(event.target.files != null && event.target.files.length != 0){\n            let file = event.target.files[0];\n            const formData = new FormData();\n            formData.append('avatar', file);\n            formData.append(\"token\",this.context.token);\n            const requestOptions = {\n                method: 'POST',\n                body: formData\n            };\n            fetch(\"https://rp-ruler.ru/api/upload_avatar.php\",requestOptions).then(response => response.json())\n                .then((data)=>{\n                    this.setState({avatar:data.avatar});\n                });\n\n        }\n\n    }\n\n    handleAccountDelete(){\n        const requestOptions = {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: \"token=\"+this.context.token\n        };\n        fetch(\"https://rp-ruler.ru/api/delete_account.php\",requestOptions).then(response => response.json())\n            .then((data)=>{\n                if(data.error === undefined){\n                    this.context.logout();\n                }\n            });\n    }\n\n    render(){\n        const {classes} = this.props;\n        return(<Dialog fullScreen open={this.props.open} onClose={this.handleClose} TransitionComponent={Transition}>\n            <AppBar className={classes.appBar}>\n                <Toolbar>\n                    <IconButton edge=\"start\" color=\"inherit\" onClick={this.handleClose} aria-label=\"close\">\n                        <Close />\n                    </IconButton>\n                    <Typography variant=\"h6\" className={classes.title}>\n                        Настройки\n                    </Typography>\n                </Toolbar>\n            </AppBar>\n            <br/><br/><br/><br/>\n            <Accordion expanded={this.state.expanded === 'general'} onChange={this.handleAccordionChange(\"general\")}>\n                <AccordionSummary\n                    expandIcon={<ExpandMore />}\n                    aria-controls=\"generalbh-content\"\n                    id=\"generalbh-header\"\n                >\n                    <Typography>Основные настройки</Typography>\n                </AccordionSummary>\n                <AccordionDetails>\n                    <List className={classes.list}>\n                        <ListItem button>\n                            <FormControlLabel\n                                control={<Switch checked={this.context.isDarkTheme} onChange={this.handleDarkThemeChange} />}\n                                label=\"Темная тема\"\n                            />\n                        </ListItem>\n                        <Divider />\n                        <ListItem button>\n                            <FormControlLabel\n                                control={<Switch checked={this.context.isAnimationEnable} onChange={this.context.toggleAnimation} />}\n                                label=\"Анимация фона\"\n                            />\n                        </ListItem>\n                        <Divider />\n                    </List>\n                </AccordionDetails>\n            </Accordion>\n            <Accordion expanded={this.state.expanded === 'user'} onChange={this.handleAccordionChange(\"user\")}>\n                <AccordionSummary\n                    expandIcon={<ExpandMore />}\n                    aria-controls=\"userbh-content\"\n                    id=\"userbh-header\"\n                >\n                    <Typography>Пользователь</Typography>\n                </AccordionSummary>\n                <AccordionDetails>\n                    <List className={classes.list}>\n                        <ListItem button>\n                            <ListItemAvatar>\n                                <Avatar alt={this.state.login} src={\"https://rp-ruler.ru/upload/\"+this.state.avatar}/>\n                            </ListItemAvatar>\n                            <input onChange={this.handleFileUploaded} name=\"avatar\" accept=\"image/*\" className={classes.inputFile} id=\"button-file\" type=\"file\"/>\n                            <label htmlFor=\"button-file\">\n                                <Button variant=\"contained\" color=\"primary\" component=\"span\">\n                                    Загрузить аватар.\n                                </Button>\n                            </label>\n                        </ListItem>\n                        <ListItem button>\n                            <ListItemText primary=\"Логин\" secondary={this.state.login} />\n                            <Button onClick={() => this.setState({loginFormOpen:true})} variant=\"contained\" color=\"primary\" component=\"span\">\n                                Изменить\n                            </Button>\n                        </ListItem>\n                        <Divider />\n                        <ListItem button>\n                            <ListItemText primary=\"Почта\" secondary={this.state.email} />\n                        </ListItem>\n                        <Divider />\n                        <ListItem button>\n                            <ListItemText primary=\"Статус\" secondary={this.state.status} />\n                            <Button variant=\"contained\" onClick={() => this.setState({statusFormOpen:true})} color=\"primary\" component=\"span\">\n                                Изменить\n                            </Button>\n                        </ListItem>\n                        <Divider />\n                        <ListItem button>\n                            <ListItemText primary=\"Пароль\" />\n                            <Button variant=\"contained\" color=\"primary\" onClick={() => this.setState({passFormOpen:true})} component=\"span\">\n                                Изменить\n                            </Button>\n                        </ListItem>\n\n                        <ListItem>\n                            <Button variant=\"contained\" color=\"primary\" onClick={() => this.setState({isConfirmDeleteOpen:true})} component=\"span\">\n                                Удалить аккаунт\n                            </Button>\n                        </ListItem>\n\n\n                        <ListItem>\n                            <Button variant=\"contained\" color=\"primary\" onClick={this.context.logout} component=\"span\">\n                                Выйти\n                            </Button>\n                        </ListItem>\n                    </List>\n                </AccordionDetails>\n            </Accordion>\n            <FormDialog open={this.state.loginFormOpen} onSave={this.handleSaveLogin} types={[\"text\"]} names={[\"login\"]}\n                        onClose={() => this.setState({loginFormOpen:false})} text=\"Введите логин\" labels={[\"Логин\"]}/>\n            <FormDialog open={this.state.statusFormOpen} onSave={this.handleSaveStatus} types={[\"text\"]} names={[\"status\"]}\n                        onClose={() => this.setState({statusFormOpen:false})} text=\"Введите статус\" labels={[\"Статус\"]}/>\n            <FormDialog open={this.state.passFormOpen} onSave={this.handleSavePassword} types={[\"password\",\"password\"]}\n                        names={[\"prev_password\",\"new_password\"]}\n                        onClose={() => this.setState({passFormOpen:false})} text=\"Введите текущий и новый пароли\"\n                        labels={[\"Текущий пароль\",\"Новый пароль\"]}/>\n            <Snackbar open={this.state.snackBarOpen} autoHideDuration={3000} onClose={this.handleSnackBarClose}>\n                <Alert severity={this.state.snackBarStatus} variant=\"filled\" elevation={6}>\n                    {this.state.snackBarText}\n                </Alert>\n            </Snackbar>\n            <Dialog open={this.state.isConfirmDeleteOpen} onClose={() => this.setState({isConfirmDeleteOpen:false})}>\n                <DialogTitle>Вы уверены?</DialogTitle>\n                <DialogActions>\n                    <Button onClick={() => this.setState({isConfirmDeleteOpen:false})} color=\"primary\">\n                        Отменить\n                    </Button>\n                    <Button onClick={() => this.handleAccountDelete()} color=\"primary\" autoFocus>\n                        Удалить аккаунт\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </Dialog>)\n    }\n\n}\nconst styles = {\n    appBar:{\n        appBar: {\n            position: 'relative',\n        },\n        title: {\n            marginLeft: \"20px\",\n            flex: 1,\n        },\n\n    },\n    inputFile:{\n        display: 'none',\n    },\n    list:{\n        width:\"100% !important\"\n    }\n\n\n};\nexport default withStyles(styles)(ProfileDialog);","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\UsersList.js",["181","182"],"import * as React from \"react\";\nimport TokenContext from \"./AppContext\";\nimport {Avatar, Badge, List, ListItem, ListItemAvatar, ListItemText, withStyles} from \"@material-ui/core\";\nimport UserPopover from \"./UserPopover\";\nimport StyledBadge from \"./StyledBadge\";\n\n\n\nclass UsersList extends React.Component{\n    static contextType = TokenContext;\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            popoverOpen:false,\n            anchorEl:null,\n            clickedUser:null\n        }\n        this.handleClose = this.handleClose.bind(this);\n        this.handleWriteClick = this.handleWriteClick.bind(this);\n    }\n\n    handleWriteClick(event,id){\n        this.handleClose();\n        this.props.onWriteToUser(event,id);\n\n    }\n    getElById(arr,id){\n        if(arr === undefined)return null;\n        for(let i=0;i<arr.length;i++){\n            if(arr[i].id === id)return arr[i];\n        }\n        return null;\n    }\n\n    handleClose(){\n        this.setState({popoverOpen:false})\n    }\n\n    handleClick(event,id){\n        this.setState({anchorEl:event.currentTarget,\n            clickedUser:this.getElById(this.props.users,id),\n            popoverOpen:true\n        });\n    }\n\n    render() {\n        if(this.props.users == null)return(<List/>);\n        return(<div><List>\n            {this.props.users.map((user)=>(\n            <ListItem button key={user.id} onClick={(event)=>this.handleClick(event,user.id)}\n                      onContextMenu={(event)=>this.handleClick(event,user.id)}>\n                <ListItemAvatar>\n                    <StyledBadge variant=\"dot\"\n                                 anchorOrigin={{\n                                    vertical: 'bottom',\n                                    horizontal: 'right',\n                                 }}\n                                 overlap=\"circle\"\n                                 invisible={0}>\n                        <Avatar alt={user.login} src={\"https://rp-ruler.ru/upload/\"+user.avatar} />\n                    </StyledBadge>\n                </ListItemAvatar>\n                <ListItemText primary={user.login}/>\n            </ListItem>\n            ))}\n        </List>\n        <UserPopover open={this.state.popoverOpen}\n                     onClose={this.handleClose}\n                     onWriteToUser={(event)=>this.handleWriteClick(event,this.state.clickedUser.id)}\n                     anchorEl={this.state.anchorEl}\n                     user={this.state.clickedUser}\n                     doWrite={this.state.clickedUser != null && this.context.user_id != this.state.clickedUser.id}\n        />\n        </div>)\n    }\n}\n\nconst styles = {\n\n};\nexport default withStyles(styles)(UsersList);","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\FormDialog.js",["183","184"],"import * as React from \"react\";\nimport TokenContext from \"./AppContext\";\nimport {\n    Button,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogTitle,\n    List,\n    TextField,\n    withStyles\n} from \"@material-ui/core\";\n\nclass FormDialog extends React.Component {\n    static contextType = TokenContext;\n    constructor(props) {\n        super(props);\n        this.handleChange = this.handleChange.bind(this);\n    }\n    handleChange(event,key){\n        this.setState({[key]:event.target.value});\n    }\n    componentDidUpdate(prevProps) {\n        if(!prevProps.open && this.props.open){\n            this.props.names.map((item)=>{\n                this.setState({[item]:\"\"});\n            })\n        }\n    }\n\n    render() {\n\n        return (<Dialog maxWidth=\"sm\" fullWidth open={this.props.open} onClose={this.props.onClose} aria-labelledby=\"form-dialog-title\">\n            <DialogTitle id=\"form-dialog-title\">{this.props.text}</DialogTitle>\n\n            <DialogContent>\n                {this.props.names.map((item,i)=>(\n                    <TextField\n                        autoFocus\n                        margin=\"dense\"\n                        id=\"name\"\n                        onChange={(event) => this.handleChange(event,item)}\n                        label={this.props.labels[i]}\n                        type={this.props.types[i]}\n                        fullWidth\n                    />\n                ))}\n\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={() => this.props.onSave(this.state)} color=\"primary\">\n                    Сохранить\n                </Button>\n            </DialogActions>\n        </Dialog>);\n    }\n\n}\nconst styles = {\n\n};\nexport default withStyles(styles)(FormDialog);","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\ServersDialog.js",["185","186","187","188","189"],"import * as React from \"react\";\nimport {\n    AppBar,\n    Dialog, fade, Grid,\n    IconButton,\n    InputBase, makeStyles, OutlinedInput,\n    Slide,\n    TextField,\n    Toolbar,\n    Typography,\n    withStyles\n} from \"@material-ui/core\";\nimport {Close, Search} from \"@material-ui/icons\";\nimport clsx from \"clsx\";\nimport ServerCard from \"./ServerCard\";\nimport TokenContext from \"./AppContext\";\nimport Masonry from 'react-masonry-css'\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n    return <Slide direction=\"right\" ref={ref} {...props} />;\n});\n\n\n\nclass ServersDialog extends React.Component {\n    static contextType = TokenContext;\n    constructor(props) {\n        super(props);\n        this.handleClose = this.handleClose.bind(this);\n        this.handleConnect = this.handleConnect.bind(this);\n        this.handleSearchChange = this.handleSearchChange.bind(this);\n        this.findTag = this.findTag.bind(this);\n\n        this.state = {\n            servers:[],\n            search:\"\"\n        };\n\n    }\n\n\n    getElById(arr,id){\n        if(arr === undefined)return null;\n        for(let i=0;i<arr.length;i++){\n            if(arr[i].id === id)return arr[i];\n        }\n        return null;\n    }\n\n    componentDidUpdate(prevProps) {\n        if(!prevProps.open && this.props.open){\n            this.setState({search:\"\"})\n            fetch(\"https://rp-ruler.ru/api/get_servers.php\").then(response => response.json())\n                .then((data)=>{\n                    if(data.error === undefined){\n                        this.setState({...data})\n                    }\n                });\n        }\n    }\n\n    handleClose(){\n        this.props.onClose();\n    }\n\n    handleConnect(id){\n        const requestOptions = {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: \"token=\"+this.context.token+\"&server_id=\"+id\n        };\n        fetch(\"https://rp-ruler.ru/api/connect_to_server.php\",requestOptions).then(response => response.json())\n            .then((data)=>{\n                if(data.error === undefined){\n                    this.handleClose();\n                    this.props.onServerConnect();\n                }\n            });\n    }\n\n    handleSearchChange(event){\n        const search = event.target.value;\n        this.setState({search:search});\n        const requestOptions = {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: \"s=\"+search\n        };\n        fetch(\"https://rp-ruler.ru/api/get_servers.php\",requestOptions).then(response => response.json())\n            .then((data)=>{\n                if(data.error === undefined){\n                    this.setState({...data})\n                }\n            });\n    }\n\n    findTag(tag){\n        this.setState({search:\"#\"+tag});\n        const requestOptions = {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: \"s=#\"+tag\n        };\n        fetch(\"https://rp-ruler.ru/api/get_servers.php\",requestOptions).then(response => response.json())\n            .then((data)=>{\n                if(data.error === undefined){\n                    this.setState({...data})\n                }\n            });\n    }\n\n    render() {\n        const {classes} = this.props;\n\n        return (\n            <Dialog fullScreen open={this.props.open} onClose={this.handleClose} TransitionComponent={Transition}>\n                <AppBar className={classes.root}>\n                    <Toolbar>\n                        <IconButton edge=\"start\" color=\"inherit\" onClick={this.handleClose} aria-label=\"close\">\n                            <Close />\n                        </IconButton>\n                        <Typography className={classes.title} variant=\"h6\" >\n                            Доступные сервера\n                        </Typography>\n                        <div className={classes.search}>\n                            <div className={classes.searchIcon}>\n                                <Search />\n                            </div>\n                            <InputBase\n                                onChange={this.handleSearchChange}\n                                value={this.state.search}\n                                placeholder=\"Поиск серверов…\"\n                                classes={{\n                                    root: classes.inputRoot,\n                                    input: classes.inputInput,\n                                }}\n                                inputProps={{ 'aria-label': 'Поиск серверов' }}\n                            />\n                        </div>\n                    </Toolbar>\n                </AppBar>\n                <br/><br/><br/>\n                <div style={{ padding: 20 }}>\n                <Masonry breakpointCols={{\n                    default: 5,\n                    1650: 4,\n                    1200: 3,\n                    900: 2\n                }}\n                         className=\"my-masonry-grid\"\n                         columnClassName=\"my-masonry-grid_column\"\n                >\n                    {this.state.servers.map((item)=>(\n                        <ServerCard\n                            name={item.name}\n                            avatar={item.avatar}\n                            bg={item.card_bg}\n                            tags={item.tags}\n                            age={item.age}\n                            isConnected={this.getElById(this.props.connectedServers,item.id)}\n                            description={item.description}\n                            players={item.count}\n                            onFindTag={this.findTag}\n                            className={classes.serverCard}\n                            onConnect={() => this.handleConnect(item.id)}\n                        />\n                    ))}\n\n                </Masonry>\n                </div>\n            </Dialog>\n        );\n    }\n}\n\nconst useStyles = (theme) => ({\n    serverCard:{\n        \"width\":\"400px\"\n    },\n    root: {\n        flexGrow: 1,\n    },\n    menuButton: {\n        marginRight: theme.spacing(2),\n    },\n    title: {\n        flexGrow: 1,\n        display: 'none',\n        [theme.breakpoints.up('sm')]: {\n            display: 'block',\n        },\n    },\n    search: {\n        position: 'relative',\n        borderRadius: theme.shape.borderRadius,\n        backgroundColor: fade(theme.palette.common.white, 0.15),\n        '&:hover': {\n            backgroundColor: fade(theme.palette.common.white, 0.25),\n        },\n        marginLeft: 0,\n        width: '100%',\n        [theme.breakpoints.up('sm')]: {\n            marginLeft: theme.spacing(1),\n            width: 'auto',\n        },\n    },\n    searchIcon: {\n        padding: theme.spacing(0, 2),\n        height: '100%',\n        position: 'absolute',\n        pointerEvents: 'none',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    inputRoot: {\n        color: 'inherit',\n    },\n    inputInput: {\n        padding: theme.spacing(1, 1, 1, 0),\n        // vertical padding + font size from searchIcon\n        paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\n        transition: theme.transitions.create('width'),\n        width: '100%',\n        [theme.breakpoints.up('sm')]: {\n            width: '22ch',\n            '&:focus': {\n                width: '40ch',\n            },\n        },\n    },\n});\n\n\n\nexport default withStyles(useStyles)(ServersDialog);","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\ServerCard.js",[],"C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\UserPopover.js",[],"C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\Emoji.js",["190"],"import * as React from \"react\";\nimport {Button, Fade, Popover, withStyles} from \"@material-ui/core\";\nimport {Picker} from \"emoji-mart\";\nimport {Mood} from \"@material-ui/icons\";\n\nclass Emoji extends React.Component {\n\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            open:false,\n            anchorEl:null,\n        }\n        this.handleButtonClick = this.handleButtonClick.bind(this);\n        this.handleClose = this.handleClose.bind(this);\n    }\n\n    handleButtonClick(event){\n        this.setState({\n            anchorEl:event.currentTarget,\n            open:true\n        });\n    }\n    handleClose(){\n        this.setState({open:false});\n    }\n\n\n    render() {\n        const {classes} = this.props;\n        return (<div><Button onClick={this.handleButtonClick} className={classes.emojiButton}><Mood/></Button>\n            <Popover\n            open={this.state.open}\n            anchorEl={this.state.anchorEl}\n            onClose={this.handleClose}\n            anchorOrigin={{\n                vertical: 'top',\n                horizontal: 'right',\n            }}\n            transformOrigin={{\n                vertical: 'bottom',\n                horizontal: 'right',\n            }}\n        >\n            <Picker\n                native={true}\n\n                theme={this.props.isDarkTheme ? \"dark\" : \"light\"}\n                color=\"#ff5722\"\n                defaultSkin={6}\n                title=\"\"\n                onSelect={this.props.onSelect}\n                emoji='point_up'\n                showPreview={false}\n                i18n={{search: 'Поиск',\n                    clear: 'Очистить',\n                    notfound: 'Не найдено',\n                    skintext: 'Нигер?',\n                    categories: {\n                        search: 'Результаты',\n                        recent: 'Любимые смайлики',\n                        smileys: 'Эмоции',\n                        people: 'Люди',\n                        nature: 'Не люди',\n                        foods: 'Хавчик',\n                        activity: 'Спорт',\n                        places: 'Путешествия',\n                        objects: 'Предметы',\n                        symbols: 'Символы',\n                        flags: 'Флаги',\n                        custom: 'Кастом',\n                    },\n                    categorieslabel: 'Категории', // Accessible title for the list of categories\n                    skintones: {\n                        1: 'Китаец',\n                        2: 'Ариец',\n                        3: 'Не совсем ариец',\n                        4: 'Полу нигер',\n                        5: 'Нигер',\n                        6: 'Самый нигерный нигер',\n                    }}}\n            />\n\n        </Popover></div>);\n    }\n}\nconst styles = {\n    emojiButton:{\n        position:\"absolute\",\n        bottom:\"10px\",\n        right:\"69px\",\n        opacity:0.7\n    },\n};\nexport default withStyles(styles)(Emoji);","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\Restore.js",["191","192","193","194","195"],"import * as React from \"react\";\nimport PropTypes from 'prop-types';\nimport {\n    Box, Button,\n    Container,\n    CssBaseline,\n    Grid,\n    Link, Paper,\n    TextField,\n    Typography, withStyles\n} from \"@material-ui/core\";\nimport { Link as RouterLink } from 'react-router-dom';\nimport {Copyright} from \"./Copyright\";\nimport {withRouter} from \"react-router-dom\";\n\n\n\nclass Restore extends React.Component{\n\n    routingFunction = () => {\n        this.props.history.push(\"/login\");\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            login:\"\",\n            wrongLogin:false,\n            wrongCode:false,\n            codeSend:false,\n            code:\"\",\n            codeConfirm:false,\n            password:\"\",\n            passwordRepeat:\"\",\n            wrongPass:false\n        };\n        this.handleInputChange = this.handleInputChange.bind(this);\n        this.handleSubmitLogin = this.handleSubmitLogin.bind(this);\n        this.handleSubmitCode = this.handleSubmitCode.bind(this);\n        this.handleSubmitPass = this.handleSubmitPass.bind(this);\n    }\n\n    handleInputChange(event) {\n        const target = event.target;\n        const value = target.value;\n        const name = target.name;\n\n        this.setState({\n            [name]: value,\n            wrongLogin:false\n        });\n    }\n\n    handleSubmitLogin(e){\n        e.preventDefault();\n        const requestOptions = {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: \"login=\"+this.state.login\n        };\n        fetch(\"https://rp-ruler.ru/api/restore_send.php\",requestOptions)\n            .then(response => response.json())\n            .then((data)=>{\n                if(data[\"success\"] == 1){\n                    this.setState({codeSend:true,wrongLogin:false});\n                }else{\n                    this.setState({wrongLogin:true});\n                }\n            })\n    }\n    handleSubmitCode(e){\n        e.preventDefault();\n        const requestOptions = {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: \"login=\"+this.state.login+\"&code=\"+this.state.code\n        };\n        fetch(\"https://rp-ruler.ru/api/restore_code_check.php\",requestOptions)\n            .then(response => response.json())\n            .then((data)=>{\n                if(data[\"correct\"] == 1){\n                    this.setState({codeConfirm:true,wrongCode:false});\n                }else{\n                    this.setState({wrongCode:true});\n                }\n            })\n    }\n    handleSubmitPass(e){\n        e.preventDefault();\n        if(this.state.password != this.state.passwordRepeat){\n            this.setState({wrongPass:true});\n            return;\n        }\n        const requestOptions = {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: \"login=\"+this.state.login+\"&code=\"+this.state.code+\"&pass=\"+this.state.password\n        };\n        fetch(\"https://rp-ruler.ru/api/restore.php\",requestOptions)\n            .then(response => response.json())\n            .then((data)=>{\n                if(data[\"success\"] == 1){\n                    this.setState({wrongPass:false});\n                    this.routingFunction();\n                }\n            })\n    }\n\n    render() {\n        const {classes} = this.props;\n        if(!this.state.codeSend){\n            return(<Grid container justify=\"center\">\n                <CssBaseline />\n                <Paper elevation={6} className={classes.paper} item>\n                    <Typography component=\"h1\" variant=\"h5\">\n                        Восстановление пароля. Снова...\n                    </Typography>\n                    <form className={classes.form} noValidate\n                          onSubmit={this.handleSubmitLogin} >\n                        <TextField\n                            variant=\"outlined\"\n                            margin=\"normal\"\n                            error={this.state.wrongLogin}\n                            required\n                            fullWidth\n                            id=\"login\"\n                            label=\"Логин или E-mail\"\n                            name=\"login\"\n                            helperText={this.state.wrongLogin ? \"Пользователь не найден\" : \"\"}\n                            autoComplete=\"login\"\n                            onChange = {this.handleInputChange}\n                            value={this.state.login}\n                            autoFocus\n                        />\n                        <Button\n                            type=\"submit\"\n                            fullWidth\n                            variant=\"contained\"\n                            color=\"primary\"\n                            className={classes.submit}\n                        >\n                            Отправить письмо\n                        </Button>\n                        <Grid container>\n                            <Grid item xs>\n                                <Link href=\"#\" variant=\"body2\" to=\"/login\" component={RouterLink}>\n                                    Войти\n                                </Link>\n                            </Grid>\n                            <Grid item>\n                                <Link to=\"/registration\" component={RouterLink} variant=\"body2\">\n                                    Зарегистрироваться\n                                </Link>\n                            </Grid>\n                        </Grid>\n                    </form>\n                    <Box mt={8}>\n                        <Copyright />\n                    </Box>\n                </Paper>\n\n            </Grid>);\n\n        }else if(!this.state.codeConfirm){\n\n            return(<Grid container justify=\"center\">\n                <CssBaseline />\n                <Paper elevation={6} className={classes.paper} item>\n                    <Typography component=\"h1\" variant=\"h5\">\n                        Восстановление пароля. Снова...\n                    </Typography>\n                    <form className={classes.form} noValidate\n                          onSubmit={this.handleSubmitCode} >\n                        <TextField\n                            variant=\"outlined\"\n                            margin=\"normal\"\n                            error={this.state.wrongCode}\n                            required\n                            fullWidth\n                            id=\"code\"\n                            label=\"Код из письма\"\n                            name=\"code\"\n                            autoComplete=\"false\"\n                            helperText={this.state.wrongCode ? \"Неверный код\" : \"\"}\n                            onChange = {this.handleInputChange}\n                            value={this.state.code}\n                            autoFocus\n                        />\n                        <Button\n                            type=\"submit\"\n                            fullWidth\n                            variant=\"contained\"\n                            color=\"primary\"\n                            className={classes.submit}\n                        >\n                            Отправить\n                        </Button>\n                        <Grid container>\n                            <Grid item xs>\n                                <Link href=\"#\" variant=\"body2\" to=\"/login\" component={RouterLink}>\n                                    Войти\n                                </Link>\n                            </Grid>\n                            <Grid item>\n                                <Link to=\"/registration\" component={RouterLink} variant=\"body2\">\n                                    Зарегистрироваться\n                                </Link>\n                            </Grid>\n                        </Grid>\n                    </form>\n                    <Box mt={8}>\n                        <Copyright />\n                    </Box>\n                </Paper>\n\n            </Grid>);\n\n        }else{\n            return(<Grid container justify=\"center\">\n                <CssBaseline />\n                <Paper elevation={6} className={classes.paper} item>\n                    <Typography component=\"h1\" variant=\"h5\">\n                        Восстановление пароля. Снова...\n                    </Typography>\n                    <form className={classes.form} noValidate\n                          onSubmit={this.handleSubmitPass} >\n                        <TextField\n                            variant=\"outlined\"\n                            margin=\"normal\"\n                            required\n                            fullWidth\n                            id=\"password\"\n                            label=\"Новый пароль\"\n                            name=\"password\"\n                            type=\"password\"\n                            autoComplete=\"password\"\n                            onChange = {this.handleInputChange}\n                            value={this.state.password}\n                            autoFocus\n                        />\n                        <TextField\n                            variant=\"outlined\"\n                            margin=\"normal\"\n                            required\n                            fullWidth\n                            error={this.state.wrongPass}\n                            helperText={this.state.wrongPass ? \"Пароли не совпадают\" : \"\"}\n                            id=\"passwordRepeat\"\n                            label=\"Еще раз, чтобы не забыл\"\n                            name=\"passwordRepeat\"\n                            type=\"password\"\n                            autoComplete=\"password\"\n                            onChange = {this.handleInputChange}\n                            value={this.state.passwordRepeat}\n                        />\n                        <Button\n                            type=\"submit\"\n                            fullWidth\n                            variant=\"contained\"\n                            color=\"primary\"\n                            className={classes.submit}\n                        >\n                            Поменять пароль\n                        </Button>\n                        <Grid container>\n                            <Grid item xs>\n                                <Link href=\"#\" variant=\"body2\" to=\"/login\" component={RouterLink}>\n                                    Войти\n                                </Link>\n                            </Grid>\n                            <Grid item>\n                                <Link to=\"/registration\" component={RouterLink} variant=\"body2\">\n                                    Зарегистрироваться\n                                </Link>\n                            </Grid>\n                        </Grid>\n                    </form>\n                    <Box mt={8}>\n                        <Copyright />\n                    </Box>\n                </Paper>\n\n            </Grid>);\n        }\n\n\n    }\n}\n\n\n\nRestore.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nconst styles = {\n    paper: {\n        marginTop: \"160px\",\n        padding:\"60px\",\n        width:\"500px\",\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n    },\n    form: {\n        width: '100%', // Fix IE 11 issue.\n        marginTop: \"10px\",\n    },\n    submit: {\n        margin: \"30px 0 20px\",\n    },\n};\n\n\nexport default withStyles(styles)(withRouter(Restore));","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\AddServerDialog.js",["196","197","198","199","200","201","202","203","204","205","206","207"],"C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\DialogTitleWithClose.js",[],"C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\AddRoomDialog.js",["208","209","210","211"],"import * as React from \"react\";\nimport TokenContext from \"./AppContext\";\nimport {Button, Dialog, DialogContent, FormControlLabel, Grid, Switch, TextField, withStyles} from \"@material-ui/core\";\nimport DialogTitleWithClose from \"./DialogTitleWithClose\";\n\nclass AddRoomDialog extends React.Component {\n    static contextType = TokenContext;\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            name: this.props.name,\n            isGlobal:this.props.isGlobal == null ? false : this.props.isGlobal,\n            bg:this.props.bg == null ? null : this.props.bg,\n            isNameError:\"\",\n            description:this.props.description\n        }\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleFileUploaded = this.handleFileUploaded.bind(this);\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.bg !== this.props.bg) {\n            this.setState({bg:this.props.bg})\n        }\n        if (prevProps.name !== this.props.name) {\n            this.setState({name:this.props.name});\n        }\n        if (prevProps.description !== this.props.description) {\n            this.setState({description:this.props.description});\n        }\n        if (prevProps.isGlobal !== this.props.isGlobal) {\n            this.setState({isGlobal:this.props.isGlobal});\n        }\n    }\n    handleSubmit(){\n        if(this.state.name == null || this.state.name.length == 0){\n            this.setState({isNameError:\"Введите название\"});\n            return;\n        }\n        if(this.state.name.length > 35){\n            this.setState({isNameError:\"Максимальная длина - 35 символов\"});\n            return;\n        }\n        let roomId = this.props.roomId == null ? \"\" : \"&room_id=\"+this.props.roomId;\n        let url = this.props.roomId == null ? \"https://rp-ruler.ru/api/add_room.php\" : \"https://rp-ruler.ru/api/edit_room.php\";\n        const requestOptions = {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: \"token=\"+this.context.token+\"&name=\"+this.state.name+\"&server_id=\"+this.props.serverId+\"&is_global=\"+this.state.isGlobal+\"&bg=\"+this.state.bg+\n                \"&desc=\"+this.state.description+roomId\n        };\n        fetch(url,requestOptions)\n            .then(response => response.json())\n            .then((data)=>{\n                this.props.onCreate();\n                this.props.onClose();\n            })\n    }\n    handleFileUploaded(event){\n\n        if(event.target.files != null && event.target.files.length != 0){\n            let file = event.target.files[0];\n            const formData = new FormData();\n            formData.append('avatar', file);\n            formData.append(\"token\",this.context.token);\n            const requestOptions = {\n                method: 'POST',\n                body: formData\n            };\n            fetch(\"https://rp-ruler.ru/api/upload_file.php\",requestOptions).then(response => response.json())\n                .then((data)=>{\n                        this.setState({bg:data.filename});\n\n                });\n\n        }\n\n    }\n\n    render() {\n        const {classes} = this.props;\n        let title = this.props.roomId == null ? \"Добавление комнаты\" :  \"Редактирование комнаты\";\n        let btnText = this.props.roomId == null ? \"Добавить комнату\" :  \"Сохранить\";\n        return (<Dialog maxWidth=\"sm\" fullWidth open={this.props.open} onClose={this.props.onClose}\n                        aria-labelledby=\"form-dialog-title\">\n            <DialogTitleWithClose id=\"customized-dialog-title\" onClose={this.props.onClose}>\n                {title}\n            </DialogTitleWithClose>\n            <DialogContent dividers>\n                <Grid container alignItems=\"center\" direction=\"column\">\n                    <img className={classes.bg} src={this.state.bg === null ? null : \"https://rp-ruler.ru/upload/\"+this.state.bg}/>\n                    <br/>\n                    <input onChange={this.handleFileUploaded} name=\"bg\" accept=\"image/*\" className={classes.inputFile} id=\"bg-file\" type=\"file\"/>\n                    <label htmlFor=\"bg-file\">\n                        {this.state.bg == null ?\n                        <Button variant=\"contained\" color=\"primary\" component=\"span\">\n                            Загрузить фон комнаты.\n                        </Button> : \"\"}\n                    </label>\n                </Grid>\n                {this.state.bg != null ? <Grid container alignItems=\"center\" direction=\"column\">\n                    <Button onClick={() => this.setState({bg:null})} variant=\"contained\" color=\"primary\" component=\"span\">\n                        Удалить фон комнаты.\n                    </Button>\n                </Grid> : \"\"}\n\n                <TextField\n                    variant=\"outlined\"\n                    margin=\"normal\"\n                    required\n                    fullWidth\n                    helperText={this.state.isNameError}\n                    error={this.state.isNameError.length != 0}\n                    onChange={(e)=>this.setState({name:e.target.value})}\n                    label=\"Название комнаты\"\n                    autoFocus\n                    value={this.state.name}\n                />\n\n                <TextField\n                    variant=\"outlined\"\n                    margin=\"normal\"\n                    fullWidth\n                    multiline\n                    rows={3}\n                    onChange={(e)=>this.setState({description:e.target.value})}\n                    label=\"Описание комнаты\"\n                    autoFocus\n                    value={this.state.description}\n                />\n\n                <FormControlLabel\n                    control={\n                        <Switch\n                            checked={this.state.isGlobal}\n                            onChange={(e)=>this.setState({isGlobal:e.target.checked})}\n                            name=\"checkedB\"\n                            color=\"primary\"\n                        />\n                    }\n                    label=\"Глобальная\"\n                />\n\n                <Grid container justify=\"center\">\n                    <Button variant=\"contained\" color=\"primary\" onClick={this.handleSubmit} component=\"span\">\n                        {btnText}\n                    </Button>\n                </Grid>\n            </DialogContent>\n        </Dialog>)\n    }\n}\nconst styles = {\n    inputFile:{\n        display: 'none',\n    },\n    bg:{\n        \"max-width\":\"200px\"\n    },\n\n};\n\nexport default withStyles(styles)(AddRoomDialog);","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\StyledBadge.js",[],{"ruleId":"212","replacedBy":"213"},{"ruleId":"214","replacedBy":"215"},{"ruleId":"216","severity":1,"message":"217","line":9,"column":34,"nodeType":"218","messageId":"219","endLine":9,"endColumn":44},{"ruleId":"216","severity":1,"message":"220","line":9,"column":46,"nodeType":"218","messageId":"219","endLine":9,"endColumn":57},{"ruleId":"216","severity":1,"message":"221","line":14,"column":9,"nodeType":"218","messageId":"219","endLine":14,"endColumn":18},{"ruleId":"222","severity":1,"message":"223","line":52,"column":58,"nodeType":"224","messageId":"225","endLine":52,"endColumn":60},{"ruleId":"222","severity":1,"message":"223","line":80,"column":40,"nodeType":"224","messageId":"225","endLine":80,"endColumn":42},{"ruleId":"216","severity":1,"message":"226","line":189,"column":9,"nodeType":"218","messageId":"219","endLine":189,"endColumn":20},{"ruleId":"216","severity":1,"message":"227","line":5,"column":5,"nodeType":"218","messageId":"219","endLine":5,"endColumn":14},{"ruleId":"216","severity":1,"message":"227","line":5,"column":5,"nodeType":"218","messageId":"219","endLine":5,"endColumn":14},{"ruleId":"216","severity":1,"message":"228","line":7,"column":5,"nodeType":"218","messageId":"219","endLine":7,"endColumn":21},{"ruleId":"216","severity":1,"message":"229","line":15,"column":8,"nodeType":"218","messageId":"219","endLine":15,"endColumn":19},{"ruleId":"222","severity":1,"message":"223","line":50,"column":29,"nodeType":"224","messageId":"225","endLine":50,"endColumn":31},{"ruleId":"222","severity":1,"message":"223","line":54,"column":29,"nodeType":"224","messageId":"225","endLine":54,"endColumn":31},{"ruleId":"222","severity":1,"message":"230","line":108,"column":64,"nodeType":"224","messageId":"225","endLine":108,"endColumn":66},{"ruleId":"222","severity":1,"message":"230","line":122,"column":63,"nodeType":"224","messageId":"225","endLine":122,"endColumn":65},{"ruleId":"222","severity":1,"message":"230","line":136,"column":67,"nodeType":"224","messageId":"225","endLine":136,"endColumn":69},{"ruleId":"216","severity":1,"message":"231","line":3,"column":5,"nodeType":"218","messageId":"219","endLine":3,"endColumn":11},{"ruleId":"216","severity":1,"message":"232","line":5,"column":27,"nodeType":"218","messageId":"219","endLine":5,"endColumn":31},{"ruleId":"216","severity":1,"message":"233","line":5,"column":33,"nodeType":"218","messageId":"219","endLine":5,"endColumn":41},{"ruleId":"216","severity":1,"message":"234","line":5,"column":43,"nodeType":"218","messageId":"219","endLine":5,"endColumn":57},{"ruleId":"216","severity":1,"message":"235","line":5,"column":59,"nodeType":"218","messageId":"219","endLine":5,"endColumn":71},{"ruleId":"216","severity":1,"message":"236","line":11,"column":10,"nodeType":"218","messageId":"219","endLine":11,"endColumn":16},{"ruleId":"237","severity":1,"message":"238","line":84,"column":21,"nodeType":"239","endLine":84,"endColumn":31},{"ruleId":"237","severity":1,"message":"238","line":85,"column":21,"nodeType":"239","endLine":85,"endColumn":31},{"ruleId":"237","severity":1,"message":"238","line":112,"column":9,"nodeType":"239","endLine":112,"endColumn":19},{"ruleId":"237","severity":1,"message":"238","line":113,"column":9,"nodeType":"239","endLine":113,"endColumn":19},{"ruleId":"237","severity":1,"message":"238","line":118,"column":9,"nodeType":"239","endLine":118,"endColumn":19},{"ruleId":"237","severity":1,"message":"238","line":125,"column":9,"nodeType":"239","endLine":125,"endColumn":19},{"ruleId":"237","severity":1,"message":"238","line":126,"column":9,"nodeType":"239","endLine":126,"endColumn":19},{"ruleId":"222","severity":1,"message":"230","line":239,"column":31,"nodeType":"224","messageId":"225","endLine":239,"endColumn":33},{"ruleId":"222","severity":1,"message":"230","line":292,"column":39,"nodeType":"224","messageId":"225","endLine":292,"endColumn":41},{"ruleId":"222","severity":1,"message":"230","line":381,"column":29,"nodeType":"224","messageId":"225","endLine":381,"endColumn":31},{"ruleId":"222","severity":1,"message":"223","line":504,"column":52,"nodeType":"224","messageId":"225","endLine":504,"endColumn":54},{"ruleId":"222","severity":1,"message":"223","line":507,"column":55,"nodeType":"224","messageId":"225","endLine":507,"endColumn":57},{"ruleId":"216","severity":1,"message":"240","line":3,"column":9,"nodeType":"218","messageId":"219","endLine":3,"endColumn":22},{"ruleId":"222","severity":1,"message":"223","line":49,"column":41,"nodeType":"224","messageId":"225","endLine":49,"endColumn":43},{"ruleId":"216","severity":1,"message":"241","line":14,"column":39,"nodeType":"218","messageId":"219","endLine":14,"endColumn":48},{"ruleId":"216","severity":1,"message":"242","line":16,"column":9,"nodeType":"218","messageId":"219","endLine":16,"endColumn":14},{"ruleId":"216","severity":1,"message":"243","line":17,"column":9,"nodeType":"218","messageId":"219","endLine":17,"endColumn":21},{"ruleId":"216","severity":1,"message":"244","line":9,"column":5,"nodeType":"218","messageId":"219","endLine":9,"endColumn":10},{"ruleId":"216","severity":1,"message":"245","line":13,"column":51,"nodeType":"218","messageId":"219","endLine":13,"endColumn":57},{"ruleId":"222","severity":1,"message":"230","line":50,"column":67,"nodeType":"224","messageId":"225","endLine":50,"endColumn":69},{"ruleId":"216","severity":1,"message":"246","line":4,"column":13,"nodeType":"218","messageId":"219","endLine":4,"endColumn":23},{"ruleId":"216","severity":1,"message":"247","line":4,"column":25,"nodeType":"218","messageId":"219","endLine":4,"endColumn":39},{"ruleId":"216","severity":1,"message":"248","line":7,"column":35,"nodeType":"218","messageId":"219","endLine":7,"endColumn":45},{"ruleId":"222","severity":1,"message":"223","line":103,"column":32,"nodeType":"224","messageId":"225","endLine":103,"endColumn":34},{"ruleId":"222","severity":1,"message":"230","line":104,"column":27,"nodeType":"224","messageId":"225","endLine":104,"endColumn":29},{"ruleId":"222","severity":1,"message":"223","line":104,"column":57,"nodeType":"224","messageId":"225","endLine":104,"endColumn":59},{"ruleId":"222","severity":1,"message":"230","line":107,"column":21,"nodeType":"224","messageId":"225","endLine":107,"endColumn":23},{"ruleId":"222","severity":1,"message":"223","line":107,"column":51,"nodeType":"224","messageId":"225","endLine":107,"endColumn":53},{"ruleId":"222","severity":1,"message":"230","line":125,"column":25,"nodeType":"224","messageId":"225","endLine":125,"endColumn":27},{"ruleId":"222","severity":1,"message":"223","line":125,"column":55,"nodeType":"224","messageId":"225","endLine":125,"endColumn":57},{"ruleId":"222","severity":1,"message":"230","line":126,"column":25,"nodeType":"224","messageId":"225","endLine":126,"endColumn":27},{"ruleId":"222","severity":1,"message":"223","line":126,"column":55,"nodeType":"224","messageId":"225","endLine":126,"endColumn":57},{"ruleId":"222","severity":1,"message":"223","line":145,"column":73,"nodeType":"224","messageId":"225","endLine":145,"endColumn":75},{"ruleId":"216","severity":1,"message":"244","line":2,"column":9,"nodeType":"218","messageId":"219","endLine":2,"endColumn":14},{"ruleId":"222","severity":1,"message":"230","line":169,"column":68,"nodeType":"224","messageId":"225","endLine":169,"endColumn":70},{"ruleId":"216","severity":1,"message":"249","line":3,"column":17,"nodeType":"218","messageId":"219","endLine":3,"endColumn":22},{"ruleId":"222","severity":1,"message":"230","line":73,"column":86,"nodeType":"224","messageId":"225","endLine":73,"endColumn":88},{"ruleId":"216","severity":1,"message":"232","line":9,"column":5,"nodeType":"218","messageId":"219","endLine":9,"endColumn":9},{"ruleId":"250","severity":1,"message":"251","line":25,"column":40,"nodeType":"252","messageId":"253","endLine":25,"endColumn":42},{"ruleId":"216","severity":1,"message":"254","line":4,"column":19,"nodeType":"218","messageId":"219","endLine":4,"endColumn":23},{"ruleId":"216","severity":1,"message":"255","line":6,"column":16,"nodeType":"218","messageId":"219","endLine":6,"endColumn":26},{"ruleId":"216","severity":1,"message":"256","line":6,"column":28,"nodeType":"218","messageId":"219","endLine":6,"endColumn":41},{"ruleId":"216","severity":1,"message":"257","line":8,"column":5,"nodeType":"218","messageId":"219","endLine":8,"endColumn":14},{"ruleId":"216","severity":1,"message":"258","line":14,"column":8,"nodeType":"218","messageId":"219","endLine":14,"endColumn":12},{"ruleId":"216","severity":1,"message":"259","line":2,"column":17,"nodeType":"218","messageId":"219","endLine":2,"endColumn":21},{"ruleId":"216","severity":1,"message":"227","line":5,"column":5,"nodeType":"218","messageId":"219","endLine":5,"endColumn":14},{"ruleId":"222","severity":1,"message":"223","line":67,"column":36,"nodeType":"224","messageId":"225","endLine":67,"endColumn":38},{"ruleId":"222","severity":1,"message":"223","line":86,"column":36,"nodeType":"224","messageId":"225","endLine":86,"endColumn":38},{"ruleId":"222","severity":1,"message":"230","line":95,"column":32,"nodeType":"224","messageId":"225","endLine":95,"endColumn":34},{"ruleId":"222","severity":1,"message":"223","line":109,"column":36,"nodeType":"224","messageId":"225","endLine":109,"endColumn":38},{"ruleId":"216","severity":1,"message":"260","line":8,"column":20,"nodeType":"218","messageId":"219","endLine":8,"endColumn":27},{"ruleId":"216","severity":1,"message":"261","line":34,"column":5,"nodeType":"218","messageId":"219","endLine":34,"endColumn":21},{"ruleId":"216","severity":1,"message":"262","line":35,"column":5,"nodeType":"218","messageId":"219","endLine":35,"endColumn":18},{"ruleId":"216","severity":1,"message":"263","line":36,"column":5,"nodeType":"218","messageId":"219","endLine":36,"endColumn":27},{"ruleId":"222","severity":1,"message":"223","line":77,"column":46,"nodeType":"224","messageId":"225","endLine":77,"endColumn":48},{"ruleId":"222","severity":1,"message":"223","line":113,"column":46,"nodeType":"224","messageId":"225","endLine":113,"endColumn":48},{"ruleId":"222","severity":1,"message":"230","line":138,"column":68,"nodeType":"224","messageId":"225","endLine":138,"endColumn":70},{"ruleId":"222","severity":1,"message":"223","line":149,"column":41,"nodeType":"224","messageId":"225","endLine":149,"endColumn":43},{"ruleId":"222","severity":1,"message":"223","line":170,"column":35,"nodeType":"224","messageId":"225","endLine":170,"endColumn":37},{"ruleId":"216","severity":1,"message":"264","line":224,"column":13,"nodeType":"218","messageId":"219","endLine":224,"endColumn":18},{"ruleId":"265","severity":1,"message":"266","line":252,"column":21,"nodeType":"267","endLine":252,"endColumn":132},{"ruleId":"222","severity":1,"message":"230","line":276,"column":58,"nodeType":"224","messageId":"225","endLine":276,"endColumn":60},{"ruleId":"222","severity":1,"message":"223","line":36,"column":62,"nodeType":"224","messageId":"225","endLine":36,"endColumn":64},{"ruleId":"222","severity":1,"message":"230","line":63,"column":68,"nodeType":"224","messageId":"225","endLine":63,"endColumn":70},{"ruleId":"265","severity":1,"message":"266","line":93,"column":21,"nodeType":"267","endLine":93,"endColumn":132},{"ruleId":"222","severity":1,"message":"230","line":115,"column":58,"nodeType":"224","messageId":"225","endLine":115,"endColumn":60},"no-native-reassign",["268"],"no-negated-in-lhs",["269"],"no-unused-vars","'useHistory' is defined but never used.","Identifier","unusedVar","'useLocation' is defined but never used.","'useEffect' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'contextType' is assigned a value but never used.","'Container' is defined but never used.","'FormControlLabel' is defined but never used.","'ParticlesBg' is defined but never used.","Expected '!==' and instead saw '!='.","'Avatar' is defined but never used.","'List' is defined but never used.","'ListItem' is defined but never used.","'ListItemAvatar' is defined but never used.","'ListItemText' is defined but never used.","'Picker' is defined but never used.","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","'AssignmentInd' is defined but never used.","'ExitToApp' is defined but never used.","'Alert' is defined but never used.","'AlertWarning' is defined but never used.","'Paper' is defined but never used.","'Remove' is defined but never used.","'IconButton' is defined but never used.","'LinearProgress' is defined but never used.","'Typography' is defined but never used.","'Badge' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'Grid' is defined but never used.","'makeStyles' is defined but never used.","'OutlinedInput' is defined but never used.","'TextField' is defined but never used.","'clsx' is defined but never used.","'Fade' is defined but never used.","'Divider' is defined but never used.","'reorderImmutable' is defined but never used.","'reorderFromTo' is defined but never used.","'reorderFromToImmutable' is defined but never used.","'title' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]