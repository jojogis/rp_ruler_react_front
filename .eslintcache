[{"C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\index.js":"1","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\App.js":"2","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\reportWebVitals.js":"3","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\Auth.js":"4","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\Copyright.js":"5","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\Reg.js":"6","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\Chat.js":"7","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\MainMenu.js":"8","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\AppContext.js":"9","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\RoomsList.js":"10","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\ServerName.js":"11","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\RoomAppBar.js":"12","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\Messages.js":"13","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\InputReplyMessage.js":"14","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\ProfileDialog.js":"15","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\UsersList.js":"16","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\FormDialog.js":"17","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\ServersDialog.js":"18","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\ServerCard.js":"19","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\UserPopover.js":"20","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\Emoji.js":"21","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\Restore.js":"22"},{"size":503,"mtime":1609784667425,"results":"23","hashOfConfig":"24"},{"size":4882,"mtime":1612995356093,"results":"25","hashOfConfig":"24"},{"size":362,"mtime":499162500000,"results":"26","hashOfConfig":"24"},{"size":5262,"mtime":1612994881489,"results":"27","hashOfConfig":"24"},{"size":420,"mtime":1609796221422,"results":"28","hashOfConfig":"24"},{"size":6295,"mtime":1612994530672,"results":"29","hashOfConfig":"24"},{"size":19309,"mtime":1612982703424,"results":"30","hashOfConfig":"24"},{"size":2876,"mtime":1610535915615,"results":"31","hashOfConfig":"24"},{"size":216,"mtime":1610403385436,"results":"32","hashOfConfig":"24"},{"size":1590,"mtime":1612831073531,"results":"33","hashOfConfig":"24"},{"size":2611,"mtime":1610536425086,"results":"34","hashOfConfig":"24"},{"size":576,"mtime":1609880521176,"results":"35","hashOfConfig":"24"},{"size":5512,"mtime":1612851732896,"results":"36","hashOfConfig":"24"},{"size":1402,"mtime":1610393308212,"results":"37","hashOfConfig":"24"},{"size":13051,"mtime":1610432811396,"results":"38","hashOfConfig":"24"},{"size":2325,"mtime":1612829056831,"results":"39","hashOfConfig":"24"},{"size":1604,"mtime":1610432673966,"results":"40","hashOfConfig":"24"},{"size":3420,"mtime":1612795478129,"results":"41","hashOfConfig":"24"},{"size":1569,"mtime":1610433077694,"results":"42","hashOfConfig":"24"},{"size":1551,"mtime":1612828591413,"results":"43","hashOfConfig":"24"},{"size":3199,"mtime":1612902663095,"results":"44","hashOfConfig":"24"},{"size":4574,"mtime":1612990489214,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"kco36v",{"filePath":"48","messages":"49","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"72","messages":"73","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"59"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"59"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"59"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\index.js",[],"C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\App.js",["95","96","97","98"],"C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\reportWebVitals.js",[],"C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\Auth.js",["99"],"C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\Copyright.js",[],"C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\Reg.js",["100","101"],"import * as React from \"react\";\r\nimport {\r\n    Box,\r\n    Button,\r\n    Container,\r\n    CssBaseline,\r\n    FormControlLabel,\r\n    Grid,\r\n    Link, Paper,\r\n    TextField,\r\n    Typography, withStyles\r\n} from \"@material-ui/core\";\r\nimport {Copyright} from \"./Copyright\";\r\nimport {Link as RouterLink, withRouter} from 'react-router-dom';\r\nimport ParticlesBg from \"particles-bg\";\r\n\r\n\r\n\r\nclass Reg extends React.Component{\r\n    routingFunction = () => {\r\n        this.props.history.push(\"/\");\r\n    }\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            login:\"\",\r\n            pass:\"\",\r\n            mail:\"\",\r\n            isWrongLogin:false,\r\n            isWrongMail:false\r\n        };\r\n        this.handleInputChange = this.handleInputChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n    handleInputChange(event) {\r\n        const target = event.target;\r\n        const value = target.value;\r\n        const name = target.name;\r\n        this.setState({\r\n            [name]: value,\r\n            isWrongLogin:false,\r\n            isWrongMail:false\r\n        });\r\n    }\r\n\r\n    handleSubmit(e){\r\n        e.preventDefault();\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/x-www-form-urlencoded',\r\n            },\r\n            body: \"login=\"+this.state.login+\"&pass=\"+this.state.pass+\"&email=\"+this.state.email\r\n        };\r\n        fetch(\"https://rp-ruler.ru/api/registration.php\",requestOptions)\r\n            .then(response => response.json())\r\n            .then((data)=>{\r\n                if(data[\"token\"] !== undefined){\r\n                    this.props.onReg(data[\"token\"],data[\"user_id\"]);\r\n                    this.routingFunction();\r\n                }else if( data[\"error\"] === 1){\r\n                    this.setState({isWrongLogin:true});\r\n                }else if( data[\"error\"] === 2) {\r\n                    this.setState({isWrongMail:true});\r\n                }\r\n            })\r\n    }\r\n\r\n    render() {\r\n        const {classes} = this.props;\r\n        return ( <Container component=\"main\" maxWidth=\"xs\">\r\n            <CssBaseline />\r\n\r\n            <Paper elevation={6} className={classes.paper}>\r\n                <Typography component=\"h1\" variant=\"h5\">\r\n                    Добро пожаловать.\r\n                </Typography>\r\n                <form className={classes.form} onSubmit={this.handleSubmit} noValidate>\r\n                    <Grid container spacing={2}>\r\n                        <Grid item xs={12} sm={12}>\r\n                            <TextField\r\n                                autoComplete=\"login\"\r\n                                name=\"login\"\r\n                                variant=\"outlined\"\r\n                                required\r\n                                fullWidth\r\n                                id=\"login\"\r\n                                error={this.state.isWrongLogin}\r\n                                helperText={this.state.isWrongLogin ? \"Логин занят\" : \"\"}\r\n                                onChange={this.handleInputChange}\r\n                                label=\"Логин\"\r\n                                autoFocus\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <TextField\r\n                                variant=\"outlined\"\r\n                                required\r\n                                fullWidth\r\n                                id=\"email\"\r\n                                label=\"Email\"\r\n                                error={this.state.isWrongMail}\r\n                                helperText={this.state.isWrongMail ?\r\n                                    \"Пользователь с такой почтой уже существует \" : \"\"}\r\n                                name=\"email\"\r\n                                onChange={this.handleInputChange}\r\n                                autoComplete=\"email\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <TextField\r\n                                variant=\"outlined\"\r\n                                required\r\n                                fullWidth\r\n                                name=\"pass\"\r\n                                label=\"Пароль\"\r\n                                type=\"password\"\r\n                                onChange={this.handleInputChange}\r\n                                id=\"pass\"\r\n                                autoComplete=\"current-password\"\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Button\r\n                        type=\"submit\"\r\n                        fullWidth\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className={classes.submit}\r\n                    >\r\n                        зарегистрироваться\r\n                    </Button>\r\n                    <Grid container justify=\"flex-end\">\r\n                        <Grid item xs>\r\n                            <Link href=\"#\" variant=\"body2\" component={RouterLink} to=\"/restore\" >\r\n                                Забыли пароль?\r\n                            </Link>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Link href=\"#\" component={RouterLink} to=\"/login\" variant=\"body2\">\r\n                                Уже есть аккаунт?\r\n                            </Link>\r\n                        </Grid>\r\n                    </Grid>\r\n                </form>\r\n                <Box mt={5}>\r\n                    <Copyright />\r\n                </Box>\r\n            </Paper>\r\n\r\n        </Container>);\r\n    }\r\n}\r\n\r\nconst styles = {\r\n    paper: {\r\n        marginTop: \"160px\",\r\n        padding:\"60px\",\r\n        width:\"500px\",\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: \"10px\",\r\n    },\r\n    submit: {\r\n        margin: \"30px 0 20px\",\r\n    },\r\n};\r\nexport default withStyles(styles)(withRouter(Reg));",["102","103"],"C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\Chat.js",["104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121"],"C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\MainMenu.js",["122"],"C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\AppContext.js",[],"C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\RoomsList.js",[],"C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\ServerName.js",["123"],"C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\RoomAppBar.js",["124"],"C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\Messages.js",["125","126","127","128","129"],"C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\InputReplyMessage.js",["130"],"C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\ProfileDialog.js",["131"],"import * as React from \"react\";\r\nimport {\r\n    Accordion, AccordionDetails, AccordionSummary,\r\n    AppBar, Avatar,\r\n    Button,\r\n    Dialog, Divider, FormControlLabel,\r\n    IconButton,\r\n    List,\r\n    ListItem, ListItemAvatar,\r\n    ListItemText, Slide, Snackbar, Switch,\r\n    Toolbar,\r\n    Typography,\r\n    withStyles\r\n} from \"@material-ui/core\";\r\nimport {Close, ExpandMore} from \"@material-ui/icons\";\r\nimport TokenContext from \"./AppContext\";\r\nimport FormDialog from \"./FormDialog\";\r\nimport {Alert} from \"@material-ui/lab\";\r\n\r\n\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n    return <Slide direction=\"right\" ref={ref} {...props} />;\r\n});\r\n\r\nclass ProfileDialog extends React.Component {\r\n    static contextType = TokenContext;\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleClose = this.handleClose.bind(this);\r\n        this.handleDarkThemeChange = this.handleDarkThemeChange.bind(this);\r\n        this.state = {expanded:false,\r\n            login:null,\r\n            email:null,\r\n            status:null,\r\n            avatar:null,\r\n            loginFormOpen:false,\r\n            statusFormOpen:false,\r\n            passFormOpen:false,\r\n            snackBarText:null,\r\n            snackBarOpen:false,\r\n            snackBarStatus:\"success\"\r\n        };\r\n        this.handleAccordionChange = this.handleAccordionChange.bind(this);\r\n        this.handleSaveLogin = this.handleSaveLogin.bind(this);\r\n        this.handleSnackBarClose = this.handleSnackBarClose.bind(this);\r\n        this.handleSaveStatus = this.handleSaveStatus.bind(this);\r\n        this.handleSavePassword = this.handleSavePassword.bind(this);\r\n        this.handleFileUploaded = this.handleFileUploaded.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/x-www-form-urlencoded',\r\n            },\r\n            body: \"token=\"+this.context.token+\"&server_id=\"+this.state.serverId\r\n        };\r\n        fetch(\"https://rp-ruler.ru/api/get_profile.php\",requestOptions).then(response => response.json())\r\n            .then((data)=>{\r\n                if(data.error === undefined){\r\n                    this.setState({...data.user})\r\n                }\r\n            });\r\n    }\r\n\r\n    handleClose(){\r\n        this.props.onClose();\r\n    }\r\n    handleDarkThemeChange(){\r\n        this.context.toggleTheme();\r\n    }\r\n\r\n    handleSnackBarClose(){\r\n        this.setState({snackBarOpen:false});\r\n    }\r\n\r\n    handleSaveLogin(data){\r\n        if(data==null)return;\r\n        let newLogin = data.login;\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/x-www-form-urlencoded',\r\n            },\r\n            body: \"token=\"+this.context.token+\"&login=\"+newLogin\r\n        };\r\n        fetch(\"https://rp-ruler.ru/api/save_profile.php\",requestOptions).then(response => response.json())\r\n            .then((data)=>{\r\n                if(data.error === undefined){\r\n                    this.setState({snackBarOpen:true,\r\n                        snackBarText:\"Логин успешно изменен.\",\r\n                        login:newLogin,\r\n                        snackBarStatus:\"success\"\r\n                    });\r\n                }else{\r\n                    this.setState({snackBarOpen:true,\r\n                        snackBarText:data.error,\r\n                        snackBarStatus:\"error\"\r\n                    });\r\n                }\r\n            });\r\n        this.setState({loginFormOpen:false});\r\n    }\r\n\r\n\r\n\r\n    handleSaveStatus(data){\r\n        if(data==null)return;\r\n        let newStatus = data.status;\r\n        this.setState({statusFormOpen:false});\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/x-www-form-urlencoded',\r\n            },\r\n            body: \"token=\"+this.context.token+\"&status=\"+newStatus\r\n        };\r\n        fetch(\"https://rp-ruler.ru/api/save_profile.php\",requestOptions).then(response => response.json())\r\n            .then((data)=>{\r\n                if(data.error === undefined){\r\n                    this.setState({snackBarOpen:true,\r\n                        snackBarText:\"Статус успешно изменен.\",\r\n                        status:newStatus,\r\n                        snackBarStatus:\"success\"\r\n                    });\r\n                }else{\r\n                    this.setState({snackBarOpen:true,\r\n                        snackBarText:data.error,\r\n                        snackBarStatus:\"error\"\r\n                    });\r\n                }\r\n            });\r\n    }\r\n\r\n    handleSavePassword(data){\r\n        if(data == null)return;\r\n        this.setState({passFormOpen:false});\r\n        let prevPass = data.prev_password;\r\n        let newPass = data.new_password;\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/x-www-form-urlencoded',\r\n            },\r\n            body: \"token=\"+this.context.token+\"&prev_pass=\"+prevPass+\"&new_pass=\"+newPass\r\n        };\r\n        fetch(\"https://rp-ruler.ru/api/save_profile.php\",requestOptions).then(response => response.json())\r\n            .then((data)=>{\r\n                if(data.error === undefined){\r\n                    this.setState({snackBarOpen:true,\r\n                        snackBarText:\"Пароль успешно изменен.\",\r\n                        snackBarStatus:\"success\"\r\n                    });\r\n                }else{\r\n                    this.setState({snackBarOpen:true,\r\n                        snackBarText:data.error,\r\n                        snackBarStatus:\"error\"\r\n                    });\r\n                }\r\n            });\r\n    }\r\n\r\n    handleAccordionChange = (panel) => (event, isExpanded) => {\r\n        this.setState({expanded:isExpanded ? panel : false});\r\n    };\r\n    handleFileUploaded(event){\r\n        if(event.target.files != null && event.target.files.length != 0){\r\n            let file = event.target.files[0];\r\n            const formData = new FormData();\r\n            formData.append('avatar', file);\r\n            formData.append(\"token\",this.context.token);\r\n            const requestOptions = {\r\n                method: 'POST',\r\n                body: formData\r\n            };\r\n            fetch(\"https://rp-ruler.ru/api/upload_avatar.php\",requestOptions).then(response => response.json())\r\n                .then((data)=>{\r\n                    this.setState({avatar:data.avatar});\r\n                });\r\n\r\n        }\r\n\r\n    }\r\n\r\n    render(){\r\n        const {classes} = this.props;\r\n        return(<Dialog fullScreen open={this.props.open} onClose={this.handleClose} TransitionComponent={Transition}>\r\n            <AppBar className={classes.appBar}>\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" onClick={this.handleClose} aria-label=\"close\">\r\n                        <Close />\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" className={classes.title}>\r\n                        Настройки\r\n                    </Typography>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <br/><br/><br/><br/>\r\n            <Accordion expanded={this.state.expanded === 'general'} onChange={this.handleAccordionChange(\"general\")}>\r\n                <AccordionSummary\r\n                    expandIcon={<ExpandMore />}\r\n                    aria-controls=\"generalbh-content\"\r\n                    id=\"generalbh-header\"\r\n                >\r\n                    <Typography>Основные настройки</Typography>\r\n                </AccordionSummary>\r\n                <AccordionDetails>\r\n                    <List className={classes.list}>\r\n                        <ListItem button>\r\n                            <FormControlLabel\r\n                                control={<Switch checked={this.context.isDarkTheme} onChange={this.handleDarkThemeChange} />}\r\n                                label=\"Темная тема\"\r\n                            />\r\n                        </ListItem>\r\n                        <Divider />\r\n                    </List>\r\n                </AccordionDetails>\r\n            </Accordion>\r\n            <Accordion expanded={this.state.expanded === 'user'} onChange={this.handleAccordionChange(\"user\")}>\r\n                <AccordionSummary\r\n                    expandIcon={<ExpandMore />}\r\n                    aria-controls=\"userbh-content\"\r\n                    id=\"userbh-header\"\r\n                >\r\n                    <Typography>Пользователь</Typography>\r\n                </AccordionSummary>\r\n                <AccordionDetails>\r\n                    <List className={classes.list}>\r\n                        <ListItem button>\r\n                            <ListItemAvatar>\r\n                                <Avatar alt={this.state.login} src={\"https://rp-ruler.ru/upload/\"+this.state.avatar}/>\r\n                            </ListItemAvatar>\r\n                            <input onChange={this.handleFileUploaded} name=\"avatar\" accept=\"image/*\" className={classes.inputFile} id=\"button-file\" type=\"file\"/>\r\n                            <label htmlFor=\"button-file\">\r\n                                <Button variant=\"contained\" color=\"primary\" component=\"span\">\r\n                                    Загрузить аватар.\r\n                                </Button>\r\n                            </label>\r\n                        </ListItem>\r\n                        <ListItem button>\r\n                            <ListItemText primary=\"Логин\" secondary={this.state.login} />\r\n                            <Button onClick={() => this.setState({loginFormOpen:true})} variant=\"contained\" color=\"primary\" component=\"span\">\r\n                                Изменить\r\n                            </Button>\r\n                        </ListItem>\r\n                        <Divider />\r\n                        <ListItem button>\r\n                            <ListItemText primary=\"Почта\" secondary={this.state.email} />\r\n                        </ListItem>\r\n                        <Divider />\r\n                        <ListItem button>\r\n                            <ListItemText primary=\"Статус\" secondary={this.state.status} />\r\n                            <Button variant=\"contained\" onClick={() => this.setState({statusFormOpen:true})} color=\"primary\" component=\"span\">\r\n                                Изменить\r\n                            </Button>\r\n                        </ListItem>\r\n                        <Divider />\r\n                        <ListItem button>\r\n                            <ListItemText primary=\"Пароль\" />\r\n                            <Button variant=\"contained\" color=\"primary\" onClick={() => this.setState({passFormOpen:true})} component=\"span\">\r\n                                Изменить\r\n                            </Button>\r\n                        </ListItem>\r\n\r\n                        <ListItem>\r\n                            <Button variant=\"contained\" color=\"primary\" onClick={this.context.logout} component=\"span\">\r\n                                Выйти\r\n                            </Button>\r\n                        </ListItem>\r\n                    </List>\r\n                </AccordionDetails>\r\n            </Accordion>\r\n            <FormDialog open={this.state.loginFormOpen} onSave={this.handleSaveLogin} types={[\"text\"]} names={[\"login\"]}\r\n                        onClose={() => this.setState({loginFormOpen:false})} text=\"Введите логин\" labels={[\"Логин\"]}/>\r\n            <FormDialog open={this.state.statusFormOpen} onSave={this.handleSaveStatus} types={[\"text\"]} names={[\"status\"]}\r\n                        onClose={() => this.setState({statusFormOpen:false})} text=\"Введите статус\" labels={[\"Статус\"]}/>\r\n            <FormDialog open={this.state.passFormOpen} onSave={this.handleSavePassword} types={[\"password\",\"password\"]}\r\n                        names={[\"prev_password\",\"new_password\"]}\r\n                        onClose={() => this.setState({passFormOpen:false})} text=\"Введите текущий и новый пароли\"\r\n                        labels={[\"Текущий пароль\",\"Новый пароль\"]}/>\r\n            <Snackbar open={this.state.snackBarOpen} autoHideDuration={3000} onClose={this.handleSnackBarClose}>\r\n                <Alert severity={this.state.snackBarStatus} variant=\"filled\" elevation={6}>\r\n                    {this.state.snackBarText}\r\n                </Alert>\r\n            </Snackbar>\r\n        </Dialog>)\r\n    }\r\n\r\n}\r\nconst styles = {\r\n    appBar:{\r\n        appBar: {\r\n            position: 'relative',\r\n        },\r\n        title: {\r\n            marginLeft: \"20px\",\r\n            flex: 1,\r\n        },\r\n\r\n    },\r\n    inputFile:{\r\n        display: 'none',\r\n    },\r\n    list:{\r\n        width:\"100% !important\"\r\n    }\r\n\r\n\r\n};\r\nexport default withStyles(styles)(ProfileDialog);","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\UsersList.js",["132"],"C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\FormDialog.js",["133"],"import * as React from \"react\";\r\nimport TokenContext from \"./AppContext\";\r\nimport {\r\n    Button,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogTitle,\r\n    List,\r\n    TextField,\r\n    withStyles\r\n} from \"@material-ui/core\";\r\n\r\nclass FormDialog extends React.Component {\r\n    static contextType = TokenContext;\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n    handleChange(event,key){\r\n        this.setState({[key]:event.target.value});\r\n    }\r\n    render() {\r\n\r\n        return (<Dialog maxWidth=\"sm\" fullWidth open={this.props.open} onClose={this.props.onClose} aria-labelledby=\"form-dialog-title\">\r\n            <DialogTitle id=\"form-dialog-title\">{this.props.text}</DialogTitle>\r\n\r\n            <DialogContent>\r\n                {this.props.names.map((item,i)=>(\r\n                    <TextField\r\n                        autoFocus\r\n                        margin=\"dense\"\r\n                        id=\"name\"\r\n                        onChange={(event) => this.handleChange(event,item)}\r\n                        label={this.props.labels[i]}\r\n                        type={this.props.types[i]}\r\n                        fullWidth\r\n                    />\r\n                ))}\r\n\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={() => this.props.onSave(this.state)} color=\"primary\">\r\n                    Сохранить\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>);\r\n    }\r\n\r\n}\r\nconst styles = {\r\n\r\n};\r\nexport default withStyles(styles)(FormDialog);","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\ServersDialog.js",["134","135","136","137","138"],"import * as React from \"react\";\r\nimport {\r\n    AppBar,\r\n    Dialog, Grid,\r\n    IconButton,\r\n    InputBase, OutlinedInput,\r\n    Slide,\r\n    TextField,\r\n    Toolbar,\r\n    Typography,\r\n    withStyles\r\n} from \"@material-ui/core\";\r\nimport {Close, Search} from \"@material-ui/icons\";\r\nimport clsx from \"clsx\";\r\nimport ServerCard from \"./ServerCard\";\r\nimport TokenContext from \"./AppContext\";\r\n\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n    return <Slide direction=\"right\" ref={ref} {...props} />;\r\n});\r\n\r\nclass ServersDialog extends React.Component {\r\n    static contextType = TokenContext;\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleClose = this.handleClose.bind(this);\r\n        this.handleConnect = this.handleConnect.bind(this);\r\n        this.state = {\r\n            servers:[]\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch(\"https://rp-ruler.ru/api/get_servers.php\").then(response => response.json())\r\n            .then((data)=>{\r\n                if(data.error === undefined){\r\n                    this.setState({...data})\r\n                }\r\n            });\r\n    }\r\n\r\n    handleClose(){\r\n        this.props.onClose();\r\n    }\r\n\r\n    handleConnect(id){\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/x-www-form-urlencoded',\r\n            },\r\n            body: \"token=\"+this.context.token+\"&server_id=\"+id\r\n        };\r\n        fetch(\"https://rp-ruler.ru/api/connect_to_server.php\",requestOptions).then(response => response.json())\r\n            .then((data)=>{\r\n                if(data.error === undefined){\r\n                    this.handleClose();\r\n                    this.props.onServerConnect();\r\n                }\r\n            });\r\n    }\r\n\r\n    render() {\r\n        const {classes} = this.props;\r\n        return (\r\n            <Dialog fullScreen open={this.props.open} onClose={this.handleClose} TransitionComponent={Transition}>\r\n                <AppBar>\r\n                    <Toolbar>\r\n                        <IconButton edge=\"start\" color=\"inherit\" onClick={this.handleClose} aria-label=\"close\">\r\n                            <Close />\r\n                        </IconButton>\r\n                        <Typography variant=\"h6\" >\r\n                            Доступные сервера\r\n                        </Typography>\r\n                    </Toolbar>\r\n                </AppBar>\r\n                <br/><br/><br/>\r\n                <div style={{ padding: 20 }}>\r\n                <Grid container direction=\"row\" spacing={2} justify=\"center\">\r\n                    {this.state.servers.map((item)=>(\r\n                    <Grid item xs key={item.id} className={classes.serverCard}>\r\n                        <ServerCard\r\n                            name={item.name}\r\n                            avatar={item.avatar}\r\n                            description={item.description}\r\n                            players={item.count}\r\n                            className={classes.serverCard}\r\n                            onConnect={() => this.handleConnect(item.id)}\r\n                        />\r\n                    </Grid>\r\n                    ))}\r\n\r\n                </Grid>\r\n                </div>\r\n            </Dialog>\r\n        );\r\n    }\r\n}\r\nconst styles = {\r\n    serverCard:{\r\n        \"width\":\"400px\"\r\n    }\r\n};\r\nexport default withStyles(styles)(ServersDialog);","C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\ServerCard.js",[],"C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\UserPopover.js",[],"C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\Emoji.js",["139"],"C:\\Users\\alexe\\WebstormProjects\\untitled\\src\\Restore.js",["140"],{"ruleId":"141","severity":1,"message":"142","line":9,"column":34,"nodeType":"143","messageId":"144","endLine":9,"endColumn":44},{"ruleId":"141","severity":1,"message":"145","line":9,"column":46,"nodeType":"143","messageId":"144","endLine":9,"endColumn":57},{"ruleId":"146","severity":1,"message":"147","line":104,"column":9,"nodeType":"148","messageId":"149","endLine":117,"endColumn":10},{"ruleId":"141","severity":1,"message":"150","line":147,"column":9,"nodeType":"143","messageId":"144","endLine":147,"endColumn":20},{"ruleId":"141","severity":1,"message":"151","line":15,"column":8,"nodeType":"143","messageId":"144","endLine":15,"endColumn":19},{"ruleId":"141","severity":1,"message":"152","line":7,"column":5,"nodeType":"143","messageId":"144","endLine":7,"endColumn":21},{"ruleId":"141","severity":1,"message":"151","line":15,"column":8,"nodeType":"143","messageId":"144","endLine":15,"endColumn":19},{"ruleId":"153","replacedBy":"154"},{"ruleId":"155","replacedBy":"156"},{"ruleId":"141","severity":1,"message":"157","line":3,"column":5,"nodeType":"143","messageId":"144","endLine":3,"endColumn":11},{"ruleId":"141","severity":1,"message":"158","line":3,"column":13,"nodeType":"143","messageId":"144","endLine":3,"endColumn":19},{"ruleId":"141","severity":1,"message":"159","line":5,"column":27,"nodeType":"143","messageId":"144","endLine":5,"endColumn":31},{"ruleId":"141","severity":1,"message":"160","line":5,"column":33,"nodeType":"143","messageId":"144","endLine":5,"endColumn":41},{"ruleId":"141","severity":1,"message":"161","line":5,"column":43,"nodeType":"143","messageId":"144","endLine":5,"endColumn":57},{"ruleId":"141","severity":1,"message":"162","line":5,"column":59,"nodeType":"143","messageId":"144","endLine":5,"endColumn":71},{"ruleId":"141","severity":1,"message":"163","line":11,"column":10,"nodeType":"143","messageId":"144","endLine":11,"endColumn":16},{"ruleId":"141","severity":1,"message":"164","line":20,"column":9,"nodeType":"143","messageId":"144","endLine":20,"endColumn":13},{"ruleId":"141","severity":1,"message":"165","line":20,"column":15,"nodeType":"143","messageId":"144","endLine":20,"endColumn":33},{"ruleId":"166","severity":1,"message":"167","line":78,"column":21,"nodeType":"168","endLine":78,"endColumn":31},{"ruleId":"166","severity":1,"message":"167","line":79,"column":21,"nodeType":"168","endLine":79,"endColumn":31},{"ruleId":"166","severity":1,"message":"167","line":148,"column":9,"nodeType":"168","endLine":148,"endColumn":19},{"ruleId":"166","severity":1,"message":"167","line":149,"column":9,"nodeType":"168","endLine":149,"endColumn":19},{"ruleId":"166","severity":1,"message":"167","line":154,"column":9,"nodeType":"168","endLine":154,"endColumn":19},{"ruleId":"166","severity":1,"message":"167","line":160,"column":9,"nodeType":"168","endLine":160,"endColumn":19},{"ruleId":"166","severity":1,"message":"167","line":161,"column":9,"nodeType":"168","endLine":161,"endColumn":19},{"ruleId":"169","severity":1,"message":"170","line":272,"column":31,"nodeType":"171","messageId":"172","endLine":272,"endColumn":33},{"ruleId":"169","severity":1,"message":"170","line":341,"column":29,"nodeType":"171","messageId":"172","endLine":341,"endColumn":31},{"ruleId":"141","severity":1,"message":"173","line":3,"column":9,"nodeType":"143","messageId":"144","endLine":3,"endColumn":22},{"ruleId":"141","severity":1,"message":"174","line":2,"column":33,"nodeType":"143","messageId":"144","endLine":2,"endColumn":38},{"ruleId":"141","severity":1,"message":"175","line":6,"column":16,"nodeType":"143","messageId":"144","endLine":6,"endColumn":23},{"ruleId":"141","severity":1,"message":"176","line":4,"column":13,"nodeType":"143","messageId":"144","endLine":4,"endColumn":23},{"ruleId":"141","severity":1,"message":"177","line":4,"column":25,"nodeType":"143","messageId":"144","endLine":4,"endColumn":39},{"ruleId":"141","severity":1,"message":"178","line":7,"column":35,"nodeType":"143","messageId":"144","endLine":7,"endColumn":45},{"ruleId":"169","severity":1,"message":"179","line":95,"column":32,"nodeType":"171","messageId":"172","endLine":95,"endColumn":34},{"ruleId":"169","severity":1,"message":"179","line":122,"column":73,"nodeType":"171","messageId":"172","endLine":122,"endColumn":75},{"ruleId":"141","severity":1,"message":"174","line":2,"column":9,"nodeType":"143","messageId":"144","endLine":2,"endColumn":14},{"ruleId":"169","severity":1,"message":"170","line":169,"column":68,"nodeType":"171","messageId":"172","endLine":169,"endColumn":70},{"ruleId":"169","severity":1,"message":"170","line":62,"column":86,"nodeType":"171","messageId":"172","endLine":62,"endColumn":88},{"ruleId":"141","severity":1,"message":"159","line":9,"column":5,"nodeType":"143","messageId":"144","endLine":9,"endColumn":9},{"ruleId":"141","severity":1,"message":"180","line":6,"column":5,"nodeType":"143","messageId":"144","endLine":6,"endColumn":14},{"ruleId":"141","severity":1,"message":"181","line":6,"column":16,"nodeType":"143","messageId":"144","endLine":6,"endColumn":29},{"ruleId":"141","severity":1,"message":"182","line":8,"column":5,"nodeType":"143","messageId":"144","endLine":8,"endColumn":14},{"ruleId":"141","severity":1,"message":"183","line":13,"column":16,"nodeType":"143","messageId":"144","endLine":13,"endColumn":22},{"ruleId":"141","severity":1,"message":"184","line":14,"column":8,"nodeType":"143","messageId":"144","endLine":14,"endColumn":12},{"ruleId":"141","severity":1,"message":"185","line":2,"column":17,"nodeType":"143","messageId":"144","endLine":2,"endColumn":21},{"ruleId":"169","severity":1,"message":"170","line":61,"column":43,"nodeType":"171","messageId":"172","endLine":61,"endColumn":45},"no-unused-vars","'useHistory' is defined but never used.","Identifier","unusedVar","'useLocation' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'contextType' is assigned a value but never used.","'ParticlesBg' is defined but never used.","'FormControlLabel' is defined but never used.","no-native-reassign",["186"],"no-negated-in-lhs",["187"],"'Avatar' is defined but never used.","'Button' is defined but never used.","'List' is defined but never used.","'ListItem' is defined but never used.","'ListItemAvatar' is defined but never used.","'ListItemText' is defined but never used.","'Picker' is defined but never used.","'Mood' is defined but never used.","'SentimentSatisfied' is defined but never used.","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'AssignmentInd' is defined but never used.","'Paper' is defined but never used.","'classes' is assigned a value but never used.","'IconButton' is defined but never used.","'LinearProgress' is defined but never used.","'Typography' is defined but never used.","Expected '===' and instead saw '=='.","'InputBase' is defined but never used.","'OutlinedInput' is defined but never used.","'TextField' is defined but never used.","'Search' is defined but never used.","'clsx' is defined but never used.","'Fade' is defined but never used.","no-global-assign","no-unsafe-negation"]